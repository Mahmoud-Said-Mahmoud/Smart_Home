
smart_home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00003f46  00003fda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080012e  0080012e  000040a8  2**0
                  ALLOC
  3 .stab         00002f58  00000000  00000000  000040a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d5e  00000000  00000000  00007000  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000804d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a092  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b193  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c118  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c55a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cde8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 12 13 	call	0x2624	; 0x2624 <main>
      8a:	0c 94 a1 1f 	jmp	0x3f42	; 0x3f42 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e2       	ldi	r26, 0x25	; 37
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 1f 	jmp	0x3f0c	; 0x3f0c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e2       	ldi	r24, 0x25	; 37
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 1f 	jmp	0x3f0c	; 0x3f0c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 72 1f 	jmp	0x3ee4	; 0x3ee4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e2       	ldi	r22, 0x25	; 37
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8e 1f 	jmp	0x3f1c	; 0x3f1c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 96 1f 	jmp	0x3f2c	; 0x3f2c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <HLCD_VoidSendChar>:
#include "HLCD_Config.h"
#include <util/delay.h>
 

void HLCD_VoidSendChar(u8 Copy_U8Data)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	ab 97       	sbiw	r28, 0x2b	; 43
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8b a7       	std	Y+43, r24	; 0x2b
	 /*Set Rs=1 , to send data*/
    MDIO_VoidSetPinValue(HLCD_Rs_Port,0,1);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
	
	/*Set Rw=0 , to write on LCD*/
	MDIO_VoidSetPinValue(HLCD_Rw_Port,1,0); 
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
	
	 /*Write Data On LCD*/
	MDIO_VoidSetPortValue(HLCD_DataPort,Copy_U8Data);
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	6b a5       	ldd	r22, Y+43	; 0x2b
     ccc:	0e 94 65 10 	call	0x20ca	; 0x20ca <MDIO_VoidSetPortValue>
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0); 
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	62 e0       	ldi	r22, 0x02	; 2
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e8       	ldi	r26, 0x80	; 128
     ce0:	bf e3       	ldi	r27, 0x3F	; 63
     ce2:	8f a3       	std	Y+39, r24	; 0x27
     ce4:	98 a7       	std	Y+40, r25	; 0x28
     ce6:	a9 a7       	std	Y+41, r26	; 0x29
     ce8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cea:	6f a1       	ldd	r22, Y+39	; 0x27
     cec:	78 a5       	ldd	r23, Y+40	; 0x28
     cee:	89 a5       	ldd	r24, Y+41	; 0x29
     cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	4a ef       	ldi	r20, 0xFA	; 250
     cf8:	54 e4       	ldi	r21, 0x44	; 68
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8b a3       	std	Y+35, r24	; 0x23
     d04:	9c a3       	std	Y+36, r25	; 0x24
     d06:	ad a3       	std	Y+37, r26	; 0x25
     d08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d0a:	6b a1       	ldd	r22, Y+35	; 0x23
     d0c:	7c a1       	ldd	r23, Y+36	; 0x24
     d0e:	8d a1       	ldd	r24, Y+37	; 0x25
     d10:	9e a1       	ldd	r25, Y+38	; 0x26
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d1e:	88 23       	and	r24, r24
     d20:	2c f4       	brge	.+10     	; 0xd2c <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9a a3       	std	Y+34, r25	; 0x22
     d28:	89 a3       	std	Y+33, r24	; 0x21
     d2a:	3f c0       	rjmp	.+126    	; 0xdaa <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
     d2c:	6b a1       	ldd	r22, Y+35	; 0x23
     d2e:	7c a1       	ldd	r23, Y+36	; 0x24
     d30:	8d a1       	ldd	r24, Y+37	; 0x25
     d32:	9e a1       	ldd	r25, Y+38	; 0x26
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	4f e7       	ldi	r20, 0x7F	; 127
     d3a:	57 e4       	ldi	r21, 0x47	; 71
     d3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d40:	18 16       	cp	r1, r24
     d42:	4c f5       	brge	.+82     	; 0xd96 <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d44:	6f a1       	ldd	r22, Y+39	; 0x27
     d46:	78 a5       	ldd	r23, Y+40	; 0x28
     d48:	89 a5       	ldd	r24, Y+41	; 0x29
     d4a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d4c:	20 e0       	ldi	r18, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	40 e2       	ldi	r20, 0x20	; 32
     d52:	51 e4       	ldi	r21, 0x41	; 65
     d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	bc 01       	movw	r22, r24
     d5e:	cd 01       	movw	r24, r26
     d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d64:	dc 01       	movw	r26, r24
     d66:	cb 01       	movw	r24, r22
     d68:	9a a3       	std	Y+34, r25	; 0x22
     d6a:	89 a3       	std	Y+33, r24	; 0x21
     d6c:	0f c0       	rjmp	.+30     	; 0xd8c <HLCD_VoidSendChar+0xee>
     d6e:	88 ec       	ldi	r24, 0xC8	; 200
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	98 a3       	std	Y+32, r25	; 0x20
     d74:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d78:	98 a1       	ldd	r25, Y+32	; 0x20
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <HLCD_VoidSendChar+0xdc>
     d7e:	98 a3       	std	Y+32, r25	; 0x20
     d80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	89 a1       	ldd	r24, Y+33	; 0x21
     d84:	9a a1       	ldd	r25, Y+34	; 0x22
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	9a a3       	std	Y+34, r25	; 0x22
     d8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8c:	89 a1       	ldd	r24, Y+33	; 0x21
     d8e:	9a a1       	ldd	r25, Y+34	; 0x22
     d90:	00 97       	sbiw	r24, 0x00	; 0
     d92:	69 f7       	brne	.-38     	; 0xd6e <HLCD_VoidSendChar+0xd0>
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d96:	6b a1       	ldd	r22, Y+35	; 0x23
     d98:	7c a1       	ldd	r23, Y+36	; 0x24
     d9a:	8d a1       	ldd	r24, Y+37	; 0x25
     d9c:	9e a1       	ldd	r25, Y+38	; 0x26
     d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	9a a3       	std	Y+34, r25	; 0x22
     da8:	89 a3       	std	Y+33, r24	; 0x21
     daa:	89 a1       	ldd	r24, Y+33	; 0x21
     dac:	9a a1       	ldd	r25, Y+34	; 0x22
     dae:	9e 8f       	std	Y+30, r25	; 0x1e
     db0:	8d 8f       	std	Y+29, r24	; 0x1d
     db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <HLCD_VoidSendChar+0x118>
     dba:	9e 8f       	std	Y+30, r25	; 0x1e
     dbc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*wait 1 ms*/
	
	_delay_ms(1); 
	
	 /*set Hi to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,1);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a0 e8       	ldi	r26, 0x80	; 128
     dce:	bf e3       	ldi	r27, 0x3F	; 63
     dd0:	89 8f       	std	Y+25, r24	; 0x19
     dd2:	9a 8f       	std	Y+26, r25	; 0x1a
     dd4:	ab 8f       	std	Y+27, r26	; 0x1b
     dd6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	69 8d       	ldd	r22, Y+25	; 0x19
     dda:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ddc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dde:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4a ef       	ldi	r20, 0xFA	; 250
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8d 8b       	std	Y+21, r24	; 0x15
     df2:	9e 8b       	std	Y+22, r25	; 0x16
     df4:	af 8b       	std	Y+23, r26	; 0x17
     df6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     df8:	6d 89       	ldd	r22, Y+21	; 0x15
     dfa:	7e 89       	ldd	r23, Y+22	; 0x16
     dfc:	8f 89       	ldd	r24, Y+23	; 0x17
     dfe:	98 8d       	ldd	r25, Y+24	; 0x18
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5f e3       	ldi	r21, 0x3F	; 63
     e08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e0c:	88 23       	and	r24, r24
     e0e:	2c f4       	brge	.+10     	; 0xe1a <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9c 8b       	std	Y+20, r25	; 0x14
     e16:	8b 8b       	std	Y+19, r24	; 0x13
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
     e1a:	6d 89       	ldd	r22, Y+21	; 0x15
     e1c:	7e 89       	ldd	r23, Y+22	; 0x16
     e1e:	8f 89       	ldd	r24, Y+23	; 0x17
     e20:	98 8d       	ldd	r25, Y+24	; 0x18
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	4f e7       	ldi	r20, 0x7F	; 127
     e28:	57 e4       	ldi	r21, 0x47	; 71
     e2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e2e:	18 16       	cp	r1, r24
     e30:	4c f5       	brge	.+82     	; 0xe84 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e32:	69 8d       	ldd	r22, Y+25	; 0x19
     e34:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	51 e4       	ldi	r21, 0x41	; 65
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9c 8b       	std	Y+20, r25	; 0x14
     e58:	8b 8b       	std	Y+19, r24	; 0x13
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <HLCD_VoidSendChar+0x1dc>
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9a 8b       	std	Y+18, r25	; 0x12
     e62:	89 8b       	std	Y+17, r24	; 0x11
     e64:	89 89       	ldd	r24, Y+17	; 0x11
     e66:	9a 89       	ldd	r25, Y+18	; 0x12
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <HLCD_VoidSendChar+0x1ca>
     e6c:	9a 8b       	std	Y+18, r25	; 0x12
     e6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	8b 89       	ldd	r24, Y+19	; 0x13
     e72:	9c 89       	ldd	r25, Y+20	; 0x14
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9c 8b       	std	Y+20, r25	; 0x14
     e78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7a:	8b 89       	ldd	r24, Y+19	; 0x13
     e7c:	9c 89       	ldd	r25, Y+20	; 0x14
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	69 f7       	brne	.-38     	; 0xe5c <HLCD_VoidSendChar+0x1be>
     e82:	14 c0       	rjmp	.+40     	; 0xeac <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e84:	6d 89       	ldd	r22, Y+21	; 0x15
     e86:	7e 89       	ldd	r23, Y+22	; 0x16
     e88:	8f 89       	ldd	r24, Y+23	; 0x17
     e8a:	98 8d       	ldd	r25, Y+24	; 0x18
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9c 8b       	std	Y+20, r25	; 0x14
     e96:	8b 8b       	std	Y+19, r24	; 0x13
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	98 8b       	std	Y+16, r25	; 0x10
     e9e:	8f 87       	std	Y+15, r24	; 0x0f
     ea0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea2:	98 89       	ldd	r25, Y+16	; 0x10
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <HLCD_VoidSendChar+0x206>
     ea8:	98 8b       	std	Y+16, r25	; 0x10
     eaa:	8f 87       	std	Y+15, r24	; 0x0f
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	 /*set low to ennable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e4       	ldi	r27, 0x40	; 64
     ebe:	8b 87       	std	Y+11, r24	; 0x0b
     ec0:	9c 87       	std	Y+12, r25	; 0x0c
     ec2:	ad 87       	std	Y+13, r26	; 0x0d
     ec4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
     eca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a ef       	ldi	r20, 0xFA	; 250
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8f 83       	std	Y+7, r24	; 0x07
     ee0:	98 87       	std	Y+8, r25	; 0x08
     ee2:	a9 87       	std	Y+9, r26	; 0x09
     ee4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee6:	6f 81       	ldd	r22, Y+7	; 0x07
     ee8:	78 85       	ldd	r23, Y+8	; 0x08
     eea:	89 85       	ldd	r24, Y+9	; 0x09
     eec:	9a 85       	ldd	r25, Y+10	; 0x0a
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	5f e3       	ldi	r21, 0x3F	; 63
     ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     efa:	88 23       	and	r24, r24
     efc:	2c f4       	brge	.+10     	; 0xf08 <HLCD_VoidSendChar+0x26a>
		__ticks = 1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9e 83       	std	Y+6, r25	; 0x06
     f04:	8d 83       	std	Y+5, r24	; 0x05
     f06:	3f c0       	rjmp	.+126    	; 0xf86 <HLCD_VoidSendChar+0x2e8>
	else if (__tmp > 65535)
     f08:	6f 81       	ldd	r22, Y+7	; 0x07
     f0a:	78 85       	ldd	r23, Y+8	; 0x08
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	3f ef       	ldi	r19, 0xFF	; 255
     f14:	4f e7       	ldi	r20, 0x7F	; 127
     f16:	57 e4       	ldi	r21, 0x47	; 71
     f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f1c:	18 16       	cp	r1, r24
     f1e:	4c f5       	brge	.+82     	; 0xf72 <HLCD_VoidSendChar+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f20:	6b 85       	ldd	r22, Y+11	; 0x0b
     f22:	7c 85       	ldd	r23, Y+12	; 0x0c
     f24:	8d 85       	ldd	r24, Y+13	; 0x0d
     f26:	9e 85       	ldd	r25, Y+14	; 0x0e
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e2       	ldi	r20, 0x20	; 32
     f2e:	51 e4       	ldi	r21, 0x41	; 65
     f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	bc 01       	movw	r22, r24
     f3a:	cd 01       	movw	r24, r26
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9e 83       	std	Y+6, r25	; 0x06
     f46:	8d 83       	std	Y+5, r24	; 0x05
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <HLCD_VoidSendChar+0x2ca>
     f4a:	88 ec       	ldi	r24, 0xC8	; 200
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9c 83       	std	Y+4, r25	; 0x04
     f50:	8b 83       	std	Y+3, r24	; 0x03
     f52:	8b 81       	ldd	r24, Y+3	; 0x03
     f54:	9c 81       	ldd	r25, Y+4	; 0x04
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	f1 f7       	brne	.-4      	; 0xf56 <HLCD_VoidSendChar+0x2b8>
     f5a:	9c 83       	std	Y+4, r25	; 0x04
     f5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	9e 81       	ldd	r25, Y+6	; 0x06
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	69 f7       	brne	.-38     	; 0xf4a <HLCD_VoidSendChar+0x2ac>
     f70:	14 c0       	rjmp	.+40     	; 0xf9a <HLCD_VoidSendChar+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	9a 83       	std	Y+2, r25	; 0x02
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <HLCD_VoidSendChar+0x2f4>
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait 1 ms*/
	_delay_ms(2);
}
     f9a:	ab 96       	adiw	r28, 0x2b	; 43
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <HLCD_VoidSendCommand>:
void HLCD_VoidSendCommand(u8 Copy_U8Command)
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	ab 97       	sbiw	r28, 0x2b	; 43
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	8b a7       	std	Y+43, r24	; 0x2b
	/*Set Rs=0 , to send command*/
	MDIO_VoidSetPinValue(HLCD_Rs_Port,0,0);
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
	
	/*Set Rw=0 , to write on LCD*/
	MDIO_VoidSetPinValue(HLCD_Rw_Port,1,0);
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
	
	  /*DO command On LCD*/
	MDIO_VoidSetPortValue(HLCD_DataPort,Copy_U8Command);
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	6b a5       	ldd	r22, Y+43	; 0x2b
     fda:	0e 94 65 10 	call	0x20ca	; 0x20ca <MDIO_VoidSetPortValue>
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	62 e0       	ldi	r22, 0x02	; 2
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 e8       	ldi	r26, 0x80	; 128
     fee:	bf e3       	ldi	r27, 0x3F	; 63
     ff0:	8f a3       	std	Y+39, r24	; 0x27
     ff2:	98 a7       	std	Y+40, r25	; 0x28
     ff4:	a9 a7       	std	Y+41, r26	; 0x29
     ff6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	6f a1       	ldd	r22, Y+39	; 0x27
     ffa:	78 a5       	ldd	r23, Y+40	; 0x28
     ffc:	89 a5       	ldd	r24, Y+41	; 0x29
     ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	4a ef       	ldi	r20, 0xFA	; 250
    1006:	54 e4       	ldi	r21, 0x44	; 68
    1008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	8b a3       	std	Y+35, r24	; 0x23
    1012:	9c a3       	std	Y+36, r25	; 0x24
    1014:	ad a3       	std	Y+37, r26	; 0x25
    1016:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1018:	6b a1       	ldd	r22, Y+35	; 0x23
    101a:	7c a1       	ldd	r23, Y+36	; 0x24
    101c:	8d a1       	ldd	r24, Y+37	; 0x25
    101e:	9e a1       	ldd	r25, Y+38	; 0x26
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e8       	ldi	r20, 0x80	; 128
    1026:	5f e3       	ldi	r21, 0x3F	; 63
    1028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    102c:	88 23       	and	r24, r24
    102e:	2c f4       	brge	.+10     	; 0x103a <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9a a3       	std	Y+34, r25	; 0x22
    1036:	89 a3       	std	Y+33, r24	; 0x21
    1038:	3f c0       	rjmp	.+126    	; 0x10b8 <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    103a:	6b a1       	ldd	r22, Y+35	; 0x23
    103c:	7c a1       	ldd	r23, Y+36	; 0x24
    103e:	8d a1       	ldd	r24, Y+37	; 0x25
    1040:	9e a1       	ldd	r25, Y+38	; 0x26
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	3f ef       	ldi	r19, 0xFF	; 255
    1046:	4f e7       	ldi	r20, 0x7F	; 127
    1048:	57 e4       	ldi	r21, 0x47	; 71
    104a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    104e:	18 16       	cp	r1, r24
    1050:	4c f5       	brge	.+82     	; 0x10a4 <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1052:	6f a1       	ldd	r22, Y+39	; 0x27
    1054:	78 a5       	ldd	r23, Y+40	; 0x28
    1056:	89 a5       	ldd	r24, Y+41	; 0x29
    1058:	9a a5       	ldd	r25, Y+42	; 0x2a
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e2       	ldi	r20, 0x20	; 32
    1060:	51 e4       	ldi	r21, 0x41	; 65
    1062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9a a3       	std	Y+34, r25	; 0x22
    1078:	89 a3       	std	Y+33, r24	; 0x21
    107a:	0f c0       	rjmp	.+30     	; 0x109a <HLCD_VoidSendCommand+0xee>
    107c:	88 ec       	ldi	r24, 0xC8	; 200
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	98 a3       	std	Y+32, r25	; 0x20
    1082:	8f 8f       	std	Y+31, r24	; 0x1f
    1084:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1086:	98 a1       	ldd	r25, Y+32	; 0x20
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <HLCD_VoidSendCommand+0xdc>
    108c:	98 a3       	std	Y+32, r25	; 0x20
    108e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1090:	89 a1       	ldd	r24, Y+33	; 0x21
    1092:	9a a1       	ldd	r25, Y+34	; 0x22
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	9a a3       	std	Y+34, r25	; 0x22
    1098:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    109a:	89 a1       	ldd	r24, Y+33	; 0x21
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	69 f7       	brne	.-38     	; 0x107c <HLCD_VoidSendCommand+0xd0>
    10a2:	14 c0       	rjmp	.+40     	; 0x10cc <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	9a a3       	std	Y+34, r25	; 0x22
    10b6:	89 a3       	std	Y+33, r24	; 0x21
    10b8:	89 a1       	ldd	r24, Y+33	; 0x21
    10ba:	9a a1       	ldd	r25, Y+34	; 0x22
    10bc:	9e 8f       	std	Y+30, r25	; 0x1e
    10be:	8d 8f       	std	Y+29, r24	; 0x1d
    10c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <HLCD_VoidSendCommand+0x118>
    10c8:	9e 8f       	std	Y+30, r25	; 0x1e
    10ca:	8d 8f       	std	Y+29, r24	; 0x1d
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	/*set Hi to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,1);
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	62 e0       	ldi	r22, 0x02	; 2
    10d0:	41 e0       	ldi	r20, 0x01	; 1
    10d2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e8       	ldi	r26, 0x80	; 128
    10dc:	bf e3       	ldi	r27, 0x3F	; 63
    10de:	89 8f       	std	Y+25, r24	; 0x19
    10e0:	9a 8f       	std	Y+26, r25	; 0x1a
    10e2:	ab 8f       	std	Y+27, r26	; 0x1b
    10e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e6:	69 8d       	ldd	r22, Y+25	; 0x19
    10e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4a ef       	ldi	r20, 0xFA	; 250
    10f4:	54 e4       	ldi	r21, 0x44	; 68
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	8d 8b       	std	Y+21, r24	; 0x15
    1100:	9e 8b       	std	Y+22, r25	; 0x16
    1102:	af 8b       	std	Y+23, r26	; 0x17
    1104:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1106:	6d 89       	ldd	r22, Y+21	; 0x15
    1108:	7e 89       	ldd	r23, Y+22	; 0x16
    110a:	8f 89       	ldd	r24, Y+23	; 0x17
    110c:	98 8d       	ldd	r25, Y+24	; 0x18
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e8       	ldi	r20, 0x80	; 128
    1114:	5f e3       	ldi	r21, 0x3F	; 63
    1116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    111a:	88 23       	and	r24, r24
    111c:	2c f4       	brge	.+10     	; 0x1128 <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	9c 8b       	std	Y+20, r25	; 0x14
    1124:	8b 8b       	std	Y+19, r24	; 0x13
    1126:	3f c0       	rjmp	.+126    	; 0x11a6 <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    1128:	6d 89       	ldd	r22, Y+21	; 0x15
    112a:	7e 89       	ldd	r23, Y+22	; 0x16
    112c:	8f 89       	ldd	r24, Y+23	; 0x17
    112e:	98 8d       	ldd	r25, Y+24	; 0x18
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	3f ef       	ldi	r19, 0xFF	; 255
    1134:	4f e7       	ldi	r20, 0x7F	; 127
    1136:	57 e4       	ldi	r21, 0x47	; 71
    1138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    113c:	18 16       	cp	r1, r24
    113e:	4c f5       	brge	.+82     	; 0x1192 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1140:	69 8d       	ldd	r22, Y+25	; 0x19
    1142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e2       	ldi	r20, 0x20	; 32
    114e:	51 e4       	ldi	r21, 0x41	; 65
    1150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9c 8b       	std	Y+20, r25	; 0x14
    1166:	8b 8b       	std	Y+19, r24	; 0x13
    1168:	0f c0       	rjmp	.+30     	; 0x1188 <HLCD_VoidSendCommand+0x1dc>
    116a:	88 ec       	ldi	r24, 0xC8	; 200
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9a 8b       	std	Y+18, r25	; 0x12
    1170:	89 8b       	std	Y+17, r24	; 0x11
    1172:	89 89       	ldd	r24, Y+17	; 0x11
    1174:	9a 89       	ldd	r25, Y+18	; 0x12
    1176:	01 97       	sbiw	r24, 0x01	; 1
    1178:	f1 f7       	brne	.-4      	; 0x1176 <HLCD_VoidSendCommand+0x1ca>
    117a:	9a 8b       	std	Y+18, r25	; 0x12
    117c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117e:	8b 89       	ldd	r24, Y+19	; 0x13
    1180:	9c 89       	ldd	r25, Y+20	; 0x14
    1182:	01 97       	sbiw	r24, 0x01	; 1
    1184:	9c 8b       	std	Y+20, r25	; 0x14
    1186:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1188:	8b 89       	ldd	r24, Y+19	; 0x13
    118a:	9c 89       	ldd	r25, Y+20	; 0x14
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	69 f7       	brne	.-38     	; 0x116a <HLCD_VoidSendCommand+0x1be>
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1192:	6d 89       	ldd	r22, Y+21	; 0x15
    1194:	7e 89       	ldd	r23, Y+22	; 0x16
    1196:	8f 89       	ldd	r24, Y+23	; 0x17
    1198:	98 8d       	ldd	r25, Y+24	; 0x18
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9c 8b       	std	Y+20, r25	; 0x14
    11a4:	8b 8b       	std	Y+19, r24	; 0x13
    11a6:	8b 89       	ldd	r24, Y+19	; 0x13
    11a8:	9c 89       	ldd	r25, Y+20	; 0x14
    11aa:	98 8b       	std	Y+16, r25	; 0x10
    11ac:	8f 87       	std	Y+15, r24	; 0x0f
    11ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    11b0:	98 89       	ldd	r25, Y+16	; 0x10
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	f1 f7       	brne	.-4      	; 0x11b2 <HLCD_VoidSendCommand+0x206>
    11b6:	98 8b       	std	Y+16, r25	; 0x10
    11b8:	8f 87       	std	Y+15, r24	; 0x0f
	
	 /*wait 1 ms*/
	_delay_ms(1);
	
	/*set low to enable*/
	MDIO_VoidSetPinValue(HLCD_EN_Port,2,0);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	62 e0       	ldi	r22, 0x02	; 2
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <MDIO_VoidSetPinValue>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e4       	ldi	r27, 0x40	; 64
    11cc:	8b 87       	std	Y+11, r24	; 0x0b
    11ce:	9c 87       	std	Y+12, r25	; 0x0c
    11d0:	ad 87       	std	Y+13, r26	; 0x0d
    11d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11da:	9e 85       	ldd	r25, Y+14	; 0x0e
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	4a ef       	ldi	r20, 0xFA	; 250
    11e2:	54 e4       	ldi	r21, 0x44	; 68
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	8f 83       	std	Y+7, r24	; 0x07
    11ee:	98 87       	std	Y+8, r25	; 0x08
    11f0:	a9 87       	std	Y+9, r26	; 0x09
    11f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11f4:	6f 81       	ldd	r22, Y+7	; 0x07
    11f6:	78 85       	ldd	r23, Y+8	; 0x08
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e8       	ldi	r20, 0x80	; 128
    1202:	5f e3       	ldi	r21, 0x3F	; 63
    1204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1208:	88 23       	and	r24, r24
    120a:	2c f4       	brge	.+10     	; 0x1216 <HLCD_VoidSendCommand+0x26a>
		__ticks = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9e 83       	std	Y+6, r25	; 0x06
    1212:	8d 83       	std	Y+5, r24	; 0x05
    1214:	3f c0       	rjmp	.+126    	; 0x1294 <HLCD_VoidSendCommand+0x2e8>
	else if (__tmp > 65535)
    1216:	6f 81       	ldd	r22, Y+7	; 0x07
    1218:	78 85       	ldd	r23, Y+8	; 0x08
    121a:	89 85       	ldd	r24, Y+9	; 0x09
    121c:	9a 85       	ldd	r25, Y+10	; 0x0a
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	3f ef       	ldi	r19, 0xFF	; 255
    1222:	4f e7       	ldi	r20, 0x7F	; 127
    1224:	57 e4       	ldi	r21, 0x47	; 71
    1226:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    122a:	18 16       	cp	r1, r24
    122c:	4c f5       	brge	.+82     	; 0x1280 <HLCD_VoidSendCommand+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e2       	ldi	r20, 0x20	; 32
    123c:	51 e4       	ldi	r21, 0x41	; 65
    123e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	bc 01       	movw	r22, r24
    1248:	cd 01       	movw	r24, r26
    124a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124e:	dc 01       	movw	r26, r24
    1250:	cb 01       	movw	r24, r22
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <HLCD_VoidSendCommand+0x2ca>
    1258:	88 ec       	ldi	r24, 0xC8	; 200
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	8b 83       	std	Y+3, r24	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <HLCD_VoidSendCommand+0x2b8>
    1268:	9c 83       	std	Y+4, r25	; 0x04
    126a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	9e 83       	std	Y+6, r25	; 0x06
    1274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	69 f7       	brne	.-38     	; 0x1258 <HLCD_VoidSendCommand+0x2ac>
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <HLCD_VoidSendCommand+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1280:	6f 81       	ldd	r22, Y+7	; 0x07
    1282:	78 85       	ldd	r23, Y+8	; 0x08
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	8d 81       	ldd	r24, Y+5	; 0x05
    1296:	9e 81       	ldd	r25, Y+6	; 0x06
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	f1 f7       	brne	.-4      	; 0x12a0 <HLCD_VoidSendCommand+0x2f4>
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
	
	/*wait 1 ms*/
	_delay_ms(2);
	
}
    12a8:	ab 96       	adiw	r28, 0x2b	; 43
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <HLCD_VoidInit>:
void HLCD_VoidInit(void)
{
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	cc 54       	subi	r28, 0x4C	; 76
    12c8:	d0 40       	sbci	r29, 0x00	; 0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
	/*Set Direction Of alla Pins*/
	
	MDIO_VoidSetPortDirection(HLCD_DataPort,0xff);
    12d4:	82 e0       	ldi	r24, 0x02	; 2
    12d6:	6f ef       	ldi	r22, 0xFF	; 255
    12d8:	0e 94 24 10 	call	0x2048	; 0x2048 <MDIO_VoidSetPortDirection>
	MDIO_VoidSetPinDirection(HLCD_Rs_Port,0,1);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_Rw_Port,1,1);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MDIO_VoidSetPinDirection>
	MDIO_VoidSetPinDirection(HLCD_EN_Port,2,1);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	62 e0       	ldi	r22, 0x02	; 2
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MDIO_VoidSetPinDirection>
    12fa:	fe 01       	movw	r30, r28
    12fc:	e7 5b       	subi	r30, 0xB7	; 183
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e2       	ldi	r26, 0x20	; 32
    1306:	b2 e4       	ldi	r27, 0x42	; 66
    1308:	80 83       	st	Z, r24
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	a2 83       	std	Z+2, r26	; 0x02
    130e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1310:	8e 01       	movw	r16, r28
    1312:	0b 5b       	subi	r16, 0xBB	; 187
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	fe 01       	movw	r30, r28
    1318:	e7 5b       	subi	r30, 0xB7	; 183
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a ef       	ldi	r20, 0xFA	; 250
    132a:	54 e4       	ldi	r21, 0x44	; 68
    132c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	f8 01       	movw	r30, r16
    1336:	80 83       	st	Z, r24
    1338:	91 83       	std	Z+1, r25	; 0x01
    133a:	a2 83       	std	Z+2, r26	; 0x02
    133c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    133e:	fe 01       	movw	r30, r28
    1340:	eb 5b       	subi	r30, 0xBB	; 187
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	60 81       	ld	r22, Z
    1346:	71 81       	ldd	r23, Z+1	; 0x01
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	93 81       	ldd	r25, Z+3	; 0x03
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	40 e8       	ldi	r20, 0x80	; 128
    1352:	5f e3       	ldi	r21, 0x3F	; 63
    1354:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1358:	88 23       	and	r24, r24
    135a:	44 f4       	brge	.+16     	; 0x136c <HLCD_VoidInit+0xb2>
		__ticks = 1;
    135c:	fe 01       	movw	r30, r28
    135e:	ed 5b       	subi	r30, 0xBD	; 189
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	91 83       	std	Z+1, r25	; 0x01
    1368:	80 83       	st	Z, r24
    136a:	64 c0       	rjmp	.+200    	; 0x1434 <HLCD_VoidInit+0x17a>
	else if (__tmp > 65535)
    136c:	fe 01       	movw	r30, r28
    136e:	eb 5b       	subi	r30, 0xBB	; 187
    1370:	ff 4f       	sbci	r31, 0xFF	; 255
    1372:	60 81       	ld	r22, Z
    1374:	71 81       	ldd	r23, Z+1	; 0x01
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	0c f0       	brlt	.+2      	; 0x138c <HLCD_VoidInit+0xd2>
    138a:	43 c0       	rjmp	.+134    	; 0x1412 <HLCD_VoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138c:	fe 01       	movw	r30, r28
    138e:	e7 5b       	subi	r30, 0xB7	; 183
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e2       	ldi	r20, 0x20	; 32
    13a0:	51 e4       	ldi	r21, 0x41	; 65
    13a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	8e 01       	movw	r16, r28
    13ac:	0d 5b       	subi	r16, 0xBD	; 189
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	bc 01       	movw	r22, r24
    13b2:	cd 01       	movw	r24, r26
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	f8 01       	movw	r30, r16
    13be:	91 83       	std	Z+1, r25	; 0x01
    13c0:	80 83       	st	Z, r24
    13c2:	1f c0       	rjmp	.+62     	; 0x1402 <HLCD_VoidInit+0x148>
    13c4:	fe 01       	movw	r30, r28
    13c6:	ef 5b       	subi	r30, 0xBF	; 191
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	80 83       	st	Z, r24
    13d2:	fe 01       	movw	r30, r28
    13d4:	ef 5b       	subi	r30, 0xBF	; 191
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <HLCD_VoidInit+0x122>
    13e0:	fe 01       	movw	r30, r28
    13e2:	ef 5b       	subi	r30, 0xBF	; 191
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	de 01       	movw	r26, r28
    13ec:	ad 5b       	subi	r26, 0xBD	; 189
    13ee:	bf 4f       	sbci	r27, 0xFF	; 255
    13f0:	fe 01       	movw	r30, r28
    13f2:	ed 5b       	subi	r30, 0xBD	; 189
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	91 81       	ldd	r25, Z+1	; 0x01
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	9c 93       	st	X, r25
    1400:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1402:	fe 01       	movw	r30, r28
    1404:	ed 5b       	subi	r30, 0xBD	; 189
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 81       	ld	r24, Z
    140a:	91 81       	ldd	r25, Z+1	; 0x01
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	d1 f6       	brne	.-76     	; 0x13c4 <HLCD_VoidInit+0x10a>
    1410:	24 c0       	rjmp	.+72     	; 0x145a <HLCD_VoidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	8e 01       	movw	r16, r28
    1414:	0d 5b       	subi	r16, 0xBD	; 189
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	fe 01       	movw	r30, r28
    141a:	eb 5b       	subi	r30, 0xBB	; 187
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	60 81       	ld	r22, Z
    1420:	71 81       	ldd	r23, Z+1	; 0x01
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	f8 01       	movw	r30, r16
    1430:	91 83       	std	Z+1, r25	; 0x01
    1432:	80 83       	st	Z, r24
    1434:	fe 01       	movw	r30, r28
    1436:	ed 5b       	subi	r30, 0xBD	; 189
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	fe 01       	movw	r30, r28
    1440:	ff 96       	adiw	r30, 0x3f	; 63
    1442:	91 83       	std	Z+1, r25	; 0x01
    1444:	80 83       	st	Z, r24
    1446:	fe 01       	movw	r30, r28
    1448:	ff 96       	adiw	r30, 0x3f	; 63
    144a:	80 81       	ld	r24, Z
    144c:	91 81       	ldd	r25, Z+1	; 0x01
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <HLCD_VoidInit+0x194>
    1452:	fe 01       	movw	r30, r28
    1454:	ff 96       	adiw	r30, 0x3f	; 63
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
	
		/*wait more than 30ms*/
	_delay_ms(40);
	
	/*Function Set (Set No.of Lines & Font Type*/
	HLCD_VoidSendCommand(0b00111000);
    145a:	88 e3       	ldi	r24, 0x38	; 56
    145c:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a4 e3       	ldi	r26, 0x34	; 52
    1466:	b2 e4       	ldi	r27, 0x42	; 66
    1468:	8b af       	std	Y+59, r24	; 0x3b
    146a:	9c af       	std	Y+60, r25	; 0x3c
    146c:	ad af       	std	Y+61, r26	; 0x3d
    146e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1470:	6b ad       	ldd	r22, Y+59	; 0x3b
    1472:	7c ad       	ldd	r23, Y+60	; 0x3c
    1474:	8d ad       	ldd	r24, Y+61	; 0x3d
    1476:	9e ad       	ldd	r25, Y+62	; 0x3e
    1478:	2b ea       	ldi	r18, 0xAB	; 171
    147a:	3a ea       	ldi	r19, 0xAA	; 170
    147c:	4a e2       	ldi	r20, 0x2A	; 42
    147e:	50 e4       	ldi	r21, 0x40	; 64
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8f ab       	std	Y+55, r24	; 0x37
    148a:	98 af       	std	Y+56, r25	; 0x38
    148c:	a9 af       	std	Y+57, r26	; 0x39
    148e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1490:	6f a9       	ldd	r22, Y+55	; 0x37
    1492:	78 ad       	ldd	r23, Y+56	; 0x38
    1494:	89 ad       	ldd	r24, Y+57	; 0x39
    1496:	9a ad       	ldd	r25, Y+58	; 0x3a
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	1c f4       	brge	.+6      	; 0x14ae <HLCD_VoidInit+0x1f4>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	8e ab       	std	Y+54, r24	; 0x36
    14ac:	91 c0       	rjmp	.+290    	; 0x15d0 <HLCD_VoidInit+0x316>
	else if (__tmp > 255)
    14ae:	6f a9       	ldd	r22, Y+55	; 0x37
    14b0:	78 ad       	ldd	r23, Y+56	; 0x38
    14b2:	89 ad       	ldd	r24, Y+57	; 0x39
    14b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	53 e4       	ldi	r21, 0x43	; 67
    14be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	0c f0       	brlt	.+2      	; 0x14c8 <HLCD_VoidInit+0x20e>
    14c6:	7b c0       	rjmp	.+246    	; 0x15be <HLCD_VoidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    14c8:	6b ad       	ldd	r22, Y+59	; 0x3b
    14ca:	7c ad       	ldd	r23, Y+60	; 0x3c
    14cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	4a e7       	ldi	r20, 0x7A	; 122
    14d6:	54 e4       	ldi	r21, 0x44	; 68
    14d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    14dc:	dc 01       	movw	r26, r24
    14de:	cb 01       	movw	r24, r22
    14e0:	8a ab       	std	Y+50, r24	; 0x32
    14e2:	9b ab       	std	Y+51, r25	; 0x33
    14e4:	ac ab       	std	Y+52, r26	; 0x34
    14e6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e8:	6a a9       	ldd	r22, Y+50	; 0x32
    14ea:	7b a9       	ldd	r23, Y+51	; 0x33
    14ec:	8c a9       	ldd	r24, Y+52	; 0x34
    14ee:	9d a9       	ldd	r25, Y+53	; 0x35
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	4a ef       	ldi	r20, 0xFA	; 250
    14f6:	54 e4       	ldi	r21, 0x44	; 68
    14f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	8e a7       	std	Y+46, r24	; 0x2e
    1502:	9f a7       	std	Y+47, r25	; 0x2f
    1504:	a8 ab       	std	Y+48, r26	; 0x30
    1506:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1508:	6e a5       	ldd	r22, Y+46	; 0x2e
    150a:	7f a5       	ldd	r23, Y+47	; 0x2f
    150c:	88 a9       	ldd	r24, Y+48	; 0x30
    150e:	99 a9       	ldd	r25, Y+49	; 0x31
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e8       	ldi	r20, 0x80	; 128
    1516:	5f e3       	ldi	r21, 0x3F	; 63
    1518:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    151c:	88 23       	and	r24, r24
    151e:	2c f4       	brge	.+10     	; 0x152a <HLCD_VoidInit+0x270>
		__ticks = 1;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9d a7       	std	Y+45, r25	; 0x2d
    1526:	8c a7       	std	Y+44, r24	; 0x2c
    1528:	3f c0       	rjmp	.+126    	; 0x15a8 <HLCD_VoidInit+0x2ee>
	else if (__tmp > 65535)
    152a:	6e a5       	ldd	r22, Y+46	; 0x2e
    152c:	7f a5       	ldd	r23, Y+47	; 0x2f
    152e:	88 a9       	ldd	r24, Y+48	; 0x30
    1530:	99 a9       	ldd	r25, Y+49	; 0x31
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	3f ef       	ldi	r19, 0xFF	; 255
    1536:	4f e7       	ldi	r20, 0x7F	; 127
    1538:	57 e4       	ldi	r21, 0x47	; 71
    153a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    153e:	18 16       	cp	r1, r24
    1540:	4c f5       	brge	.+82     	; 0x1594 <HLCD_VoidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1542:	6a a9       	ldd	r22, Y+50	; 0x32
    1544:	7b a9       	ldd	r23, Y+51	; 0x33
    1546:	8c a9       	ldd	r24, Y+52	; 0x34
    1548:	9d a9       	ldd	r25, Y+53	; 0x35
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e2       	ldi	r20, 0x20	; 32
    1550:	51 e4       	ldi	r21, 0x41	; 65
    1552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	9d a7       	std	Y+45, r25	; 0x2d
    1568:	8c a7       	std	Y+44, r24	; 0x2c
    156a:	0f c0       	rjmp	.+30     	; 0x158a <HLCD_VoidInit+0x2d0>
    156c:	88 ec       	ldi	r24, 0xC8	; 200
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9b a7       	std	Y+43, r25	; 0x2b
    1572:	8a a7       	std	Y+42, r24	; 0x2a
    1574:	8a a5       	ldd	r24, Y+42	; 0x2a
    1576:	9b a5       	ldd	r25, Y+43	; 0x2b
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <HLCD_VoidInit+0x2be>
    157c:	9b a7       	std	Y+43, r25	; 0x2b
    157e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1580:	8c a5       	ldd	r24, Y+44	; 0x2c
    1582:	9d a5       	ldd	r25, Y+45	; 0x2d
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	9d a7       	std	Y+45, r25	; 0x2d
    1588:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158a:	8c a5       	ldd	r24, Y+44	; 0x2c
    158c:	9d a5       	ldd	r25, Y+45	; 0x2d
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	69 f7       	brne	.-38     	; 0x156c <HLCD_VoidInit+0x2b2>
    1592:	24 c0       	rjmp	.+72     	; 0x15dc <HLCD_VoidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1594:	6e a5       	ldd	r22, Y+46	; 0x2e
    1596:	7f a5       	ldd	r23, Y+47	; 0x2f
    1598:	88 a9       	ldd	r24, Y+48	; 0x30
    159a:	99 a9       	ldd	r25, Y+49	; 0x31
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9d a7       	std	Y+45, r25	; 0x2d
    15a6:	8c a7       	std	Y+44, r24	; 0x2c
    15a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    15aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    15ac:	99 a7       	std	Y+41, r25	; 0x29
    15ae:	88 a7       	std	Y+40, r24	; 0x28
    15b0:	88 a5       	ldd	r24, Y+40	; 0x28
    15b2:	99 a5       	ldd	r25, Y+41	; 0x29
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <HLCD_VoidInit+0x2fa>
    15b8:	99 a7       	std	Y+41, r25	; 0x29
    15ba:	88 a7       	std	Y+40, r24	; 0x28
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <HLCD_VoidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15be:	6f a9       	ldd	r22, Y+55	; 0x37
    15c0:	78 ad       	ldd	r23, Y+56	; 0x38
    15c2:	89 ad       	ldd	r24, Y+57	; 0x39
    15c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    15c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8e ab       	std	Y+54, r24	; 0x36
    15d0:	8e a9       	ldd	r24, Y+54	; 0x36
    15d2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15d4:	8f a1       	ldd	r24, Y+39	; 0x27
    15d6:	8a 95       	dec	r24
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <HLCD_VoidInit+0x31c>
    15da:	8f a3       	std	Y+39, r24	; 0x27

    /*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display ON/OFF Control*/
	HLCD_VoidSendCommand(0b00001110);
    15dc:	8e e0       	ldi	r24, 0x0E	; 14
    15de:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a4 e3       	ldi	r26, 0x34	; 52
    15e8:	b2 e4       	ldi	r27, 0x42	; 66
    15ea:	8b a3       	std	Y+35, r24	; 0x23
    15ec:	9c a3       	std	Y+36, r25	; 0x24
    15ee:	ad a3       	std	Y+37, r26	; 0x25
    15f0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15f2:	6b a1       	ldd	r22, Y+35	; 0x23
    15f4:	7c a1       	ldd	r23, Y+36	; 0x24
    15f6:	8d a1       	ldd	r24, Y+37	; 0x25
    15f8:	9e a1       	ldd	r25, Y+38	; 0x26
    15fa:	2b ea       	ldi	r18, 0xAB	; 171
    15fc:	3a ea       	ldi	r19, 0xAA	; 170
    15fe:	4a e2       	ldi	r20, 0x2A	; 42
    1600:	50 e4       	ldi	r21, 0x40	; 64
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8f 8f       	std	Y+31, r24	; 0x1f
    160c:	98 a3       	std	Y+32, r25	; 0x20
    160e:	a9 a3       	std	Y+33, r26	; 0x21
    1610:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1612:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1614:	78 a1       	ldd	r23, Y+32	; 0x20
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	9a a1       	ldd	r25, Y+34	; 0x22
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	1c f4       	brge	.+6      	; 0x1630 <HLCD_VoidInit+0x376>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	8e 8f       	std	Y+30, r24	; 0x1e
    162e:	91 c0       	rjmp	.+290    	; 0x1752 <HLCD_VoidInit+0x498>
	else if (__tmp > 255)
    1630:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1632:	78 a1       	ldd	r23, Y+32	; 0x20
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4f e7       	ldi	r20, 0x7F	; 127
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1644:	18 16       	cp	r1, r24
    1646:	0c f0       	brlt	.+2      	; 0x164a <HLCD_VoidInit+0x390>
    1648:	7b c0       	rjmp	.+246    	; 0x1740 <HLCD_VoidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    164a:	6b a1       	ldd	r22, Y+35	; 0x23
    164c:	7c a1       	ldd	r23, Y+36	; 0x24
    164e:	8d a1       	ldd	r24, Y+37	; 0x25
    1650:	9e a1       	ldd	r25, Y+38	; 0x26
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a e7       	ldi	r20, 0x7A	; 122
    1658:	54 e4       	ldi	r21, 0x44	; 68
    165a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8a 8f       	std	Y+26, r24	; 0x1a
    1664:	9b 8f       	std	Y+27, r25	; 0x1b
    1666:	ac 8f       	std	Y+28, r26	; 0x1c
    1668:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    166c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    166e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1670:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a ef       	ldi	r20, 0xFA	; 250
    1678:	54 e4       	ldi	r21, 0x44	; 68
    167a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8e 8b       	std	Y+22, r24	; 0x16
    1684:	9f 8b       	std	Y+23, r25	; 0x17
    1686:	a8 8f       	std	Y+24, r26	; 0x18
    1688:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    168a:	6e 89       	ldd	r22, Y+22	; 0x16
    168c:	7f 89       	ldd	r23, Y+23	; 0x17
    168e:	88 8d       	ldd	r24, Y+24	; 0x18
    1690:	99 8d       	ldd	r25, Y+25	; 0x19
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <HLCD_VoidInit+0x3f2>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9d 8b       	std	Y+21, r25	; 0x15
    16a8:	8c 8b       	std	Y+20, r24	; 0x14
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <HLCD_VoidInit+0x470>
	else if (__tmp > 65535)
    16ac:	6e 89       	ldd	r22, Y+22	; 0x16
    16ae:	7f 89       	ldd	r23, Y+23	; 0x17
    16b0:	88 8d       	ldd	r24, Y+24	; 0x18
    16b2:	99 8d       	ldd	r25, Y+25	; 0x19
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <HLCD_VoidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16c6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9d 8b       	std	Y+21, r25	; 0x15
    16ea:	8c 8b       	std	Y+20, r24	; 0x14
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <HLCD_VoidInit+0x452>
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9b 8b       	std	Y+19, r25	; 0x13
    16f4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16f6:	8a 89       	ldd	r24, Y+18	; 0x12
    16f8:	9b 89       	ldd	r25, Y+19	; 0x13
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <HLCD_VoidInit+0x440>
    16fe:	9b 8b       	std	Y+19, r25	; 0x13
    1700:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8c 89       	ldd	r24, Y+20	; 0x14
    1704:	9d 89       	ldd	r25, Y+21	; 0x15
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9d 8b       	std	Y+21, r25	; 0x15
    170a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8c 89       	ldd	r24, Y+20	; 0x14
    170e:	9d 89       	ldd	r25, Y+21	; 0x15
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <HLCD_VoidInit+0x434>
    1714:	24 c0       	rjmp	.+72     	; 0x175e <HLCD_VoidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6e 89       	ldd	r22, Y+22	; 0x16
    1718:	7f 89       	ldd	r23, Y+23	; 0x17
    171a:	88 8d       	ldd	r24, Y+24	; 0x18
    171c:	99 8d       	ldd	r25, Y+25	; 0x19
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9d 8b       	std	Y+21, r25	; 0x15
    1728:	8c 8b       	std	Y+20, r24	; 0x14
    172a:	8c 89       	ldd	r24, Y+20	; 0x14
    172c:	9d 89       	ldd	r25, Y+21	; 0x15
    172e:	99 8b       	std	Y+17, r25	; 0x11
    1730:	88 8b       	std	Y+16, r24	; 0x10
    1732:	88 89       	ldd	r24, Y+16	; 0x10
    1734:	99 89       	ldd	r25, Y+17	; 0x11
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <HLCD_VoidInit+0x47c>
    173a:	99 8b       	std	Y+17, r25	; 0x11
    173c:	88 8b       	std	Y+16, r24	; 0x10
    173e:	0f c0       	rjmp	.+30     	; 0x175e <HLCD_VoidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1740:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1742:	78 a1       	ldd	r23, Y+32	; 0x20
    1744:	89 a1       	ldd	r24, Y+33	; 0x21
    1746:	9a a1       	ldd	r25, Y+34	; 0x22
    1748:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8e 8f       	std	Y+30, r24	; 0x1e
    1752:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1754:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1756:	8f 85       	ldd	r24, Y+15	; 0x0f
    1758:	8a 95       	dec	r24
    175a:	f1 f7       	brne	.-4      	; 0x1758 <HLCD_VoidInit+0x49e>
    175c:	8f 87       	std	Y+15, r24	; 0x0f
	
	/*Wait More Than 39us*/
    _delay_us(45);
	
	/*Display Clear*/
	HLCD_VoidSendCommand(0b00000001);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e0       	ldi	r26, 0x00	; 0
    176a:	b0 e4       	ldi	r27, 0x40	; 64
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	ad 87       	std	Y+13, r26	; 0x0d
    1772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	98 87       	std	Y+8, r25	; 0x08
    1790:	a9 87       	std	Y+9, r26	; 0x09
    1792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <HLCD_VoidInit+0x4fc>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <HLCD_VoidInit+0x57a>
	else if (__tmp > 65535)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <HLCD_VoidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <HLCD_VoidInit+0x55c>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <HLCD_VoidInit+0x54a>
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <HLCD_VoidInit+0x53e>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <HLCD_VoidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <HLCD_VoidInit+0x586>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
	
	/*Entry Mode Set
	/*HLCD_VoidSendCommand(0b000001IS);*/
	
	
}
    1848:	c4 5b       	subi	r28, 0xB4	; 180
    184a:	df 4f       	sbci	r29, 0xFF	; 255
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	08 95       	ret

00001860 <HLCD_VoidSendString>:



void HLCD_VoidSendString(u8* Coby_U8String)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <HLCD_VoidSendString+0x6>
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	9b 83       	std	Y+3, r25	; 0x03
    186e:	8a 83       	std	Y+2, r24	; 0x02
	/*Lentgh Of String*/
	u8 LOC_LENGTH = 0;
    1870:	19 82       	std	Y+1, r1	; 0x01
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <HLCD_VoidSendString+0x30>
	while(Coby_U8String[LOC_LENGTH]!=('\0'))
	{
		
		
		/*Send Character as String*/
		HLCD_VoidSendChar(Coby_U8String[LOC_LENGTH]);
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	fc 01       	movw	r30, r24
    1880:	e2 0f       	add	r30, r18
    1882:	f3 1f       	adc	r31, r19
    1884:	80 81       	ld	r24, Z
    1886:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
		
		/*Increment Length*/
		LOC_LENGTH++;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	8f 5f       	subi	r24, 0xFF	; 255
    188e:	89 83       	std	Y+1, r24	; 0x01
	/*Lentgh Of String*/
	u8 LOC_LENGTH = 0;
	
	
	/*Do Until String End*/
	while(Coby_U8String[LOC_LENGTH]!=('\0'))
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	fc 01       	movw	r30, r24
    189c:	e2 0f       	add	r30, r18
    189e:	f3 1f       	adc	r31, r19
    18a0:	80 81       	ld	r24, Z
    18a2:	88 23       	and	r24, r24
    18a4:	39 f7       	brne	.-50     	; 0x1874 <HLCD_VoidSendString+0x14>
		/*Increment Length*/
		LOC_LENGTH++;
	}
	
	
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <HLCD_VoidSetPostion>:

void HLCD_VoidSetPostion(u8 Copy_U8Row,u8 Copy_U8Colm)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <HLCD_VoidSetPostion+0x6>
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	89 83       	std	Y+1, r24	; 0x01
    18be:	6a 83       	std	Y+2, r22	; 0x02
	
	/*If U Want The First Row*/
	if(0==Copy_U8Row)
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	88 23       	and	r24, r24
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <HLCD_VoidSetPostion+0x1e>
	{
	
        /*Enter Colm NO. U Want To Display On It*/	
		HLCD_VoidSendCommand(Copy_U8Colm+128);
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	80 58       	subi	r24, 0x80	; 128
    18ca:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    18ce:	07 c0       	rjmp	.+14     	; 0x18de <HLCD_VoidSetPostion+0x2c>
	
		
	}
	
	/*If U Want The Second Row*/
	else if(1==Copy_U8Row)
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	21 f4       	brne	.+8      	; 0x18de <HLCD_VoidSetPostion+0x2c>
	{
		
		
        /*Enter Colm NO. U Want To Display On It*/	
			HLCD_VoidSendCommand(Copy_U8Colm+128+64);
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	80 54       	subi	r24, 0x40	; 64
    18da:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				

	}
	
	
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <HLCD_VoidSendNumber>:
void HLCD_VoidSendNumber(u32 Copy_U8Number)
{
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	28 97       	sbiw	r28, 0x08	; 8
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	6d 83       	std	Y+5, r22	; 0x05
    1906:	7e 83       	std	Y+6, r23	; 0x06
    1908:	8f 83       	std	Y+7, r24	; 0x07
    190a:	98 87       	std	Y+8, r25	; 0x08
	if(0==Copy_U8Number)
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	af 81       	ldd	r26, Y+7	; 0x07
    1912:	b8 85       	ldd	r27, Y+8	; 0x08
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	a1 05       	cpc	r26, r1
    1918:	b1 05       	cpc	r27, r1
    191a:	21 f4       	brne	.+8      	; 0x1924 <HLCD_VoidSendNumber+0x3c>
	{
		HLCD_VoidSendChar(0+48);
    191c:	80 e3       	ldi	r24, 0x30	; 48
    191e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
    1922:	79 c0       	rjmp	.+242    	; 0x1a16 <HLCD_VoidSendNumber+0x12e>
	}
	else
	{
	u32 LOC_Rev =1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	89 83       	std	Y+1, r24	; 0x01
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	ab 83       	std	Y+3, r26	; 0x03
    1932:	bc 83       	std	Y+4, r27	; 0x04
    1934:	36 c0       	rjmp	.+108    	; 0x19a2 <HLCD_VoidSendNumber+0xba>
	while(Copy_U8Number)
	{
		LOC_Rev = (LOC_Rev*10)+ Copy_U8Number%10;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	9a 81       	ldd	r25, Y+2	; 0x02
    193a:	ab 81       	ldd	r26, Y+3	; 0x03
    193c:	bc 81       	ldd	r27, Y+4	; 0x04
    193e:	2a e0       	ldi	r18, 0x0A	; 10
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <__mulsi3>
    194e:	7b 01       	movw	r14, r22
    1950:	8c 01       	movw	r16, r24
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	af 81       	ldd	r26, Y+7	; 0x07
    1958:	b8 85       	ldd	r27, Y+8	; 0x08
    195a:	2a e0       	ldi	r18, 0x0A	; 10
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	50 e0       	ldi	r21, 0x00	; 0
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__udivmodsi4>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8e 0d       	add	r24, r14
    1970:	9f 1d       	adc	r25, r15
    1972:	a0 1f       	adc	r26, r16
    1974:	b1 1f       	adc	r27, r17
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	ab 83       	std	Y+3, r26	; 0x03
    197c:	bc 83       	std	Y+4, r27	; 0x04
		Copy_U8Number /=10 ;
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	af 81       	ldd	r26, Y+7	; 0x07
    1984:	b8 85       	ldd	r27, Y+8	; 0x08
    1986:	2a e0       	ldi	r18, 0x0A	; 10
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__udivmodsi4>
    1996:	da 01       	movw	r26, r20
    1998:	c9 01       	movw	r24, r18
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	af 83       	std	Y+7, r26	; 0x07
    19a0:	b8 87       	std	Y+8, r27	; 0x08
		HLCD_VoidSendChar(0+48);
	}
	else
	{
	u32 LOC_Rev =1;
	while(Copy_U8Number)
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	af 81       	ldd	r26, Y+7	; 0x07
    19a8:	b8 85       	ldd	r27, Y+8	; 0x08
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	a1 05       	cpc	r26, r1
    19ae:	b1 05       	cpc	r27, r1
    19b0:	11 f6       	brne	.-124    	; 0x1936 <HLCD_VoidSendNumber+0x4e>
    19b2:	28 c0       	rjmp	.+80     	; 0x1a04 <HLCD_VoidSendNumber+0x11c>
		
		
	}
	while(LOC_Rev>1)
	{
		Copy_U8Number = LOC_Rev%10;
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	9a 81       	ldd	r25, Y+2	; 0x02
    19b8:	ab 81       	ldd	r26, Y+3	; 0x03
    19ba:	bc 81       	ldd	r27, Y+4	; 0x04
    19bc:	2a e0       	ldi	r18, 0x0A	; 10
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	50 e0       	ldi	r21, 0x00	; 0
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__udivmodsi4>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	8d 83       	std	Y+5, r24	; 0x05
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	af 83       	std	Y+7, r26	; 0x07
    19d6:	b8 87       	std	Y+8, r27	; 0x08
		HLCD_VoidSendChar(Copy_U8Number+48);
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	80 5d       	subi	r24, 0xD0	; 208
    19dc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
		LOC_Rev = LOC_Rev /10;
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	ab 81       	ldd	r26, Y+3	; 0x03
    19e6:	bc 81       	ldd	r27, Y+4	; 0x04
    19e8:	2a e0       	ldi	r18, 0x0A	; 10
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	0e 94 48 1f 	call	0x3e90	; 0x3e90 <__udivmodsi4>
    19f8:	da 01       	movw	r26, r20
    19fa:	c9 01       	movw	r24, r18
    19fc:	89 83       	std	Y+1, r24	; 0x01
    19fe:	9a 83       	std	Y+2, r25	; 0x02
    1a00:	ab 83       	std	Y+3, r26	; 0x03
    1a02:	bc 83       	std	Y+4, r27	; 0x04
		LOC_Rev = (LOC_Rev*10)+ Copy_U8Number%10;
		Copy_U8Number /=10 ;
		
		
	}
	while(LOC_Rev>1)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	9a 81       	ldd	r25, Y+2	; 0x02
    1a08:	ab 81       	ldd	r26, Y+3	; 0x03
    1a0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a0c:	82 30       	cpi	r24, 0x02	; 2
    1a0e:	91 05       	cpc	r25, r1
    1a10:	a1 05       	cpc	r26, r1
    1a12:	b1 05       	cpc	r27, r1
    1a14:	78 f6       	brcc	.-98     	; 0x19b4 <HLCD_VoidSendNumber+0xcc>
		
	}
		
	}
	
}
    1a16:	28 96       	adiw	r28, 0x08	; 8
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	08 95       	ret

00001a30 <HLCD_VoidDrawChar>:

void HLCD_VoidDrawChar(void)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	
	HLCD_VoidSendCommand(0b01000000);
    1a38:	80 e4       	ldi	r24, 0x40	; 64
    1a3a:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00111);
    1a3e:	87 e0       	ldi	r24, 0x07	; 7
    1a40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01000);
    1a44:	88 e0       	ldi	r24, 0x08	; 8
    1a46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b01000);
    1a4a:	88 e0       	ldi	r24, 0x08	; 8
    1a4c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00111);
    1a50:	87 e0       	ldi	r24, 0x07	; 7
    1a52:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    1a56:	84 e0       	ldi	r24, 0x04	; 4
    1a58:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00100);
    1a5c:	84 e0       	ldi	r24, 0x04	; 4
    1a5e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendChar(0b00111);
    1a62:	87 e0       	ldi	r24, 0x07	; 7
    1a64:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	HLCD_VoidSendCommand(128+1);
    1a68:	81 e8       	ldi	r24, 0x81	; 129
    1a6a:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
	HLCD_VoidSendChar(0b00000000);
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
	
	
	
	
}
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <MADC_voidInit>:
#include "BIT_MATH.h"
#include "MADC_Private.h"
#include "MADC_Interface.h"

void MADC_voidInit(void)
{
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
	/*AVCC voltage */
	SET_BIT(ADMUX,ADMUX_REFS0);
    1a82:	a7 e2       	ldi	r26, 0x27	; 39
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e7 e2       	ldi	r30, 0x27	; 39
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 64       	ori	r24, 0x40	; 64
    1a8e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
    1a90:	a7 e2       	ldi	r26, 0x27	; 39
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e7 e2       	ldi	r30, 0x27	; 39
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	8f 77       	andi	r24, 0x7F	; 127
    1a9c:	8c 93       	st	X, r24
	/* ACTIVE left adjust */
	CLR_BIT(ADMUX,ADMUX_ADLAR);
    1a9e:	a7 e2       	ldi	r26, 0x27	; 39
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e7 e2       	ldi	r30, 0x27	; 39
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8f 7d       	andi	r24, 0xDF	; 223
    1aaa:	8c 93       	st	X, r24
	/*Set Prescaler to divide by 128*/
		SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1aac:	a6 e2       	ldi	r26, 0x26	; 38
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e6 e2       	ldi	r30, 0x26	; 38
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1aba:	a6 e2       	ldi	r26, 0x26	; 38
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e6 e2       	ldi	r30, 0x26	; 38
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	82 60       	ori	r24, 0x02	; 2
    1ac6:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1ac8:	a6 e2       	ldi	r26, 0x26	; 38
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e6 e2       	ldi	r30, 0x26	; 38
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	8c 93       	st	X, r24
	/*EN peripheral */
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    1ad6:	a6 e2       	ldi	r26, 0x26	; 38
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e6 e2       	ldi	r30, 0x26	; 38
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	80 68       	ori	r24, 0x80	; 128
    1ae2:	8c 93       	st	X, r24
	
}
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <MADC_ReadData>:
u16 MADC_ReadData(u8 Copy_u8Channel)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	0f 92       	push	r0
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	89 83       	std	Y+1, r24	; 0x01
	/* Clear the mux bits in ADMUX register*/
	ADMUX &=0b11100000;
    1af6:	a7 e2       	ldi	r26, 0x27	; 39
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e7 e2       	ldi	r30, 0x27	; 39
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	80 7e       	andi	r24, 0xE0	; 224
    1b02:	8c 93       	st	X, r24
	/*Set the required channel into the MUX bits*/
	ADMUX|= Copy_u8Channel;
    1b04:	a7 e2       	ldi	r26, 0x27	; 39
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e7 e2       	ldi	r30, 0x27	; 39
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	90 81       	ld	r25, Z
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	89 2b       	or	r24, r25
    1b12:	8c 93       	st	X, r24
	/* Start conversion */
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    1b14:	a6 e2       	ldi	r26, 0x26	; 38
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e6 e2       	ldi	r30, 0x26	; 38
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	80 64       	ori	r24, 0x40	; 64
    1b20:	8c 93       	st	X, r24
	/*Busy waiting */
	while ((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
    1b22:	e6 e2       	ldi	r30, 0x26	; 38
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	82 95       	swap	r24
    1b2a:	8f 70       	andi	r24, 0x0F	; 15
    1b2c:	88 2f       	mov	r24, r24
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	81 70       	andi	r24, 0x01	; 1
    1b32:	90 70       	andi	r25, 0x00	; 0
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	a9 f3       	breq	.-22     	; 0x1b22 <MADC_ReadData+0x38>
	/*clear flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    1b38:	a6 e2       	ldi	r26, 0x26	; 38
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e6 e2       	ldi	r30, 0x26	; 38
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	80 61       	ori	r24, 0x10	; 16
    1b44:	8c 93       	st	X, r24
	/*RETURN */
	return ADC_data;
    1b46:	e4 e2       	ldi	r30, 0x24	; 36
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	91 81       	ldd	r25, Z+1	; 0x01
	
}
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <MDIO_VoidSetPinDirection>:




void MDIO_VoidSetPinDirection(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Direction)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	27 97       	sbiw	r28, 0x07	; 7
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	6a 83       	std	Y+2, r22	; 0x02
    1b6e:	4b 83       	std	Y+3, r20	; 0x03
	if(1== Copy_U8Direction)
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <MDIO_VoidSetPinDirection+0x22>
    1b76:	6f c0       	rjmp	.+222    	; 0x1c56 <MDIO_VoidSetPinDirection+0x100>
	{
		switch(Copy_U8Port)
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3f 83       	std	Y+7, r19	; 0x07
    1b80:	2e 83       	std	Y+6, r18	; 0x06
    1b82:	8e 81       	ldd	r24, Y+6	; 0x06
    1b84:	9f 81       	ldd	r25, Y+7	; 0x07
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	91 05       	cpc	r25, r1
    1b8a:	49 f1       	breq	.+82     	; 0x1bde <MDIO_VoidSetPinDirection+0x88>
    1b8c:	2e 81       	ldd	r18, Y+6	; 0x06
    1b8e:	3f 81       	ldd	r19, Y+7	; 0x07
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <MDIO_VoidSetPinDirection+0x4a>
    1b96:	8e 81       	ldd	r24, Y+6	; 0x06
    1b98:	9f 81       	ldd	r25, Y+7	; 0x07
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <MDIO_VoidSetPinDirection+0x60>
    1b9e:	d2 c0       	rjmp	.+420    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
    1ba0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ba2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ba4:	22 30       	cpi	r18, 0x02	; 2
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	71 f1       	breq	.+92     	; 0x1c06 <MDIO_VoidSetPinDirection+0xb0>
    1baa:	8e 81       	ldd	r24, Y+6	; 0x06
    1bac:	9f 81       	ldd	r25, Y+7	; 0x07
    1bae:	83 30       	cpi	r24, 0x03	; 3
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	e9 f1       	breq	.+122    	; 0x1c2e <MDIO_VoidSetPinDirection+0xd8>
    1bb4:	c7 c0       	rjmp	.+398    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
		{
			case 0 : SET_BIT(DDRA_REG,Copy_U8Pin);
    1bb6:	aa e3       	ldi	r26, 0x3A	; 58
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	ea e3       	ldi	r30, 0x3A	; 58
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <MDIO_VoidSetPinDirection+0x7e>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <MDIO_VoidSetPinDirection+0x7a>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	b3 c0       	rjmp	.+358    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 1 : SET_BIT(DDRB_REG,Copy_U8Pin);
    1bde:	a7 e3       	ldi	r26, 0x37	; 55
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e7 e3       	ldi	r30, 0x37	; 55
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <MDIO_VoidSetPinDirection+0xa6>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <MDIO_VoidSetPinDirection+0xa2>
    1c00:	84 2b       	or	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	9f c0       	rjmp	.+318    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 2 : SET_BIT(DDRC_REG,Copy_U8Pin);
    1c06:	a4 e3       	ldi	r26, 0x34	; 52
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e4 e3       	ldi	r30, 0x34	; 52
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <MDIO_VoidSetPinDirection+0xce>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <MDIO_VoidSetPinDirection+0xca>
    1c28:	84 2b       	or	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	8b c0       	rjmp	.+278    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
			break;
			case 3 : SET_BIT(DDRD_REG,Copy_U8Pin);
    1c2e:	a1 e3       	ldi	r26, 0x31	; 49
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e1 e3       	ldi	r30, 0x31	; 49
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <MDIO_VoidSetPinDirection+0xf6>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <MDIO_VoidSetPinDirection+0xf2>
    1c50:	84 2b       	or	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	77 c0       	rjmp	.+238    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
			
			
			
		}
	}
	else if(0== Copy_U8Direction)
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	88 23       	and	r24, r24
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <MDIO_VoidSetPinDirection+0x108>
    1c5c:	73 c0       	rjmp	.+230    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
	{
				switch(Copy_U8Port)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3d 83       	std	Y+5, r19	; 0x05
    1c66:	2c 83       	std	Y+4, r18	; 0x04
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	91 05       	cpc	r25, r1
    1c70:	59 f1       	breq	.+86     	; 0x1cc8 <MDIO_VoidSetPinDirection+0x172>
    1c72:	2c 81       	ldd	r18, Y+4	; 0x04
    1c74:	3d 81       	ldd	r19, Y+5	; 0x05
    1c76:	22 30       	cpi	r18, 0x02	; 2
    1c78:	31 05       	cpc	r19, r1
    1c7a:	2c f4       	brge	.+10     	; 0x1c86 <MDIO_VoidSetPinDirection+0x130>
    1c7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f0       	breq	.+26     	; 0x1c9e <MDIO_VoidSetPinDirection+0x148>
    1c84:	5f c0       	rjmp	.+190    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
    1c86:	2c 81       	ldd	r18, Y+4	; 0x04
    1c88:	3d 81       	ldd	r19, Y+5	; 0x05
    1c8a:	22 30       	cpi	r18, 0x02	; 2
    1c8c:	31 05       	cpc	r19, r1
    1c8e:	89 f1       	breq	.+98     	; 0x1cf2 <MDIO_VoidSetPinDirection+0x19c>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	83 30       	cpi	r24, 0x03	; 3
    1c96:	91 05       	cpc	r25, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <MDIO_VoidSetPinDirection+0x146>
    1c9a:	40 c0       	rjmp	.+128    	; 0x1d1c <MDIO_VoidSetPinDirection+0x1c6>
    1c9c:	53 c0       	rjmp	.+166    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
		{
			case 0 : CLR_BIT(DDRA_REG,Copy_U8Pin);break;
    1c9e:	aa e3       	ldi	r26, 0x3A	; 58
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ea e3       	ldi	r30, 0x3A	; 58
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <MDIO_VoidSetPinDirection+0x166>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <MDIO_VoidSetPinDirection+0x162>
    1cc0:	80 95       	com	r24
    1cc2:	84 23       	and	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	3e c0       	rjmp	.+124    	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
			case 1 : CLR_BIT(DDRB_REG,Copy_U8Pin);break;
    1cc8:	a7 e3       	ldi	r26, 0x37	; 55
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e7 e3       	ldi	r30, 0x37	; 55
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <MDIO_VoidSetPinDirection+0x190>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <MDIO_VoidSetPinDirection+0x18c>
    1cea:	80 95       	com	r24
    1cec:	84 23       	and	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	29 c0       	rjmp	.+82     	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
			case 2 : CLR_BIT(DDRC_REG,Copy_U8Pin);break;
    1cf2:	a4 e3       	ldi	r26, 0x34	; 52
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e4 e3       	ldi	r30, 0x34	; 52
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	48 2f       	mov	r20, r24
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <MDIO_VoidSetPinDirection+0x1ba>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <MDIO_VoidSetPinDirection+0x1b6>
    1d14:	80 95       	com	r24
    1d16:	84 23       	and	r24, r20
    1d18:	8c 93       	st	X, r24
    1d1a:	14 c0       	rjmp	.+40     	; 0x1d44 <MDIO_VoidSetPinDirection+0x1ee>
			case 3 : CLR_BIT(DDRD_REG,Copy_U8Pin);break;
    1d1c:	a1 e3       	ldi	r26, 0x31	; 49
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e1 e3       	ldi	r30, 0x31	; 49
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2f       	mov	r20, r24
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <MDIO_VoidSetPinDirection+0x1e4>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <MDIO_VoidSetPinDirection+0x1e0>
    1d3e:	80 95       	com	r24
    1d40:	84 23       	and	r24, r20
    1d42:	8c 93       	st	X, r24
	{
		
	/*Do Nothing*/	
	}
	
}
    1d44:	27 96       	adiw	r28, 0x07	; 7
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin )
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <MDIO_u8GetPinValue+0x6>
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <MDIO_u8GetPinValue+0x8>
    1d5e:	0f 92       	push	r0
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	8a 83       	std	Y+2, r24	; 0x02
    1d66:	6b 83       	std	Y+3, r22	; 0x03
	u8 Loc_U8RetValue;
	
	switch(Copy_U8Port)
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	3d 83       	std	Y+5, r19	; 0x05
    1d70:	2c 83       	std	Y+4, r18	; 0x04
    1d72:	4c 81       	ldd	r20, Y+4	; 0x04
    1d74:	5d 81       	ldd	r21, Y+5	; 0x05
    1d76:	41 30       	cpi	r20, 0x01	; 1
    1d78:	51 05       	cpc	r21, r1
    1d7a:	41 f1       	breq	.+80     	; 0x1dcc <MDIO_u8GetPinValue+0x76>
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	91 05       	cpc	r25, r1
    1d84:	34 f4       	brge	.+12     	; 0x1d92 <MDIO_u8GetPinValue+0x3c>
    1d86:	2c 81       	ldd	r18, Y+4	; 0x04
    1d88:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8a:	21 15       	cp	r18, r1
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	61 f0       	breq	.+24     	; 0x1da8 <MDIO_u8GetPinValue+0x52>
    1d90:	52 c0       	rjmp	.+164    	; 0x1e36 <MDIO_u8GetPinValue+0xe0>
    1d92:	4c 81       	ldd	r20, Y+4	; 0x04
    1d94:	5d 81       	ldd	r21, Y+5	; 0x05
    1d96:	42 30       	cpi	r20, 0x02	; 2
    1d98:	51 05       	cpc	r21, r1
    1d9a:	51 f1       	breq	.+84     	; 0x1df0 <MDIO_u8GetPinValue+0x9a>
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1da0:	83 30       	cpi	r24, 0x03	; 3
    1da2:	91 05       	cpc	r25, r1
    1da4:	b9 f1       	breq	.+110    	; 0x1e14 <MDIO_u8GetPinValue+0xbe>
    1da6:	47 c0       	rjmp	.+142    	; 0x1e36 <MDIO_u8GetPinValue+0xe0>
	{
		case 0: Loc_U8RetValue=GET_BIT(PINA_REG,Copy_U8Pin);break;
    1da8:	e9 e3       	ldi	r30, 0x39	; 57
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a9 01       	movw	r20, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <MDIO_u8GetPinValue+0x6a>
    1dbc:	55 95       	asr	r21
    1dbe:	47 95       	ror	r20
    1dc0:	8a 95       	dec	r24
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <MDIO_u8GetPinValue+0x66>
    1dc4:	ca 01       	movw	r24, r20
    1dc6:	81 70       	andi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	35 c0       	rjmp	.+106    	; 0x1e36 <MDIO_u8GetPinValue+0xe0>
		case 1: Loc_U8RetValue=GET_BIT(PINB_REG,Copy_U8Pin);break;
    1dcc:	e6 e3       	ldi	r30, 0x36	; 54
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a9 01       	movw	r20, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <MDIO_u8GetPinValue+0x8e>
    1de0:	55 95       	asr	r21
    1de2:	47 95       	ror	r20
    1de4:	8a 95       	dec	r24
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <MDIO_u8GetPinValue+0x8a>
    1de8:	ca 01       	movw	r24, r20
    1dea:	81 70       	andi	r24, 0x01	; 1
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	23 c0       	rjmp	.+70     	; 0x1e36 <MDIO_u8GetPinValue+0xe0>
		case 2: Loc_U8RetValue=GET_BIT(PINC_REG,Copy_U8Pin);break;
    1df0:	e3 e3       	ldi	r30, 0x33	; 51
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a9 01       	movw	r20, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <MDIO_u8GetPinValue+0xb2>
    1e04:	55 95       	asr	r21
    1e06:	47 95       	ror	r20
    1e08:	8a 95       	dec	r24
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <MDIO_u8GetPinValue+0xae>
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	11 c0       	rjmp	.+34     	; 0x1e36 <MDIO_u8GetPinValue+0xe0>
		case 3: Loc_U8RetValue=GET_BIT(PIND_REG,Copy_U8Pin);break;
    1e14:	e0 e3       	ldi	r30, 0x30	; 48
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	88 2f       	mov	r24, r24
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a9 01       	movw	r20, r18
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <MDIO_u8GetPinValue+0xd6>
    1e28:	55 95       	asr	r21
    1e2a:	47 95       	ror	r20
    1e2c:	8a 95       	dec	r24
    1e2e:	e2 f7       	brpl	.-8      	; 0x1e28 <MDIO_u8GetPinValue+0xd2>
    1e30:	ca 01       	movw	r24, r20
    1e32:	81 70       	andi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01
	
		
	}
	return Loc_U8RetValue;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <MDIO_VoidSetPinValue>:
void MDIO_VoidSetPinValue(u8 Copy_U8Port ,u8 Copy_U8Pin ,u8 Copy_U8Value)
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	27 97       	sbiw	r28, 0x07	; 7
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	6a 83       	std	Y+2, r22	; 0x02
    1e60:	4b 83       	std	Y+3, r20	; 0x03
	
	if(0==Copy_U8Value)
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	88 23       	and	r24, r24
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <MDIO_VoidSetPinValue+0x22>
    1e68:	74 c0       	rjmp	.+232    	; 0x1f52 <MDIO_VoidSetPinValue+0x10a>
	{
		switch(Copy_U8Port)
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	3f 83       	std	Y+7, r19	; 0x07
    1e72:	2e 83       	std	Y+6, r18	; 0x06
    1e74:	8e 81       	ldd	r24, Y+6	; 0x06
    1e76:	9f 81       	ldd	r25, Y+7	; 0x07
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	59 f1       	breq	.+86     	; 0x1ed4 <MDIO_VoidSetPinValue+0x8c>
    1e7e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e80:	3f 81       	ldd	r19, Y+7	; 0x07
    1e82:	22 30       	cpi	r18, 0x02	; 2
    1e84:	31 05       	cpc	r19, r1
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <MDIO_VoidSetPinValue+0x4a>
    1e88:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f0       	breq	.+26     	; 0x1eaa <MDIO_VoidSetPinValue+0x62>
    1e90:	d2 c0       	rjmp	.+420    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
    1e92:	2e 81       	ldd	r18, Y+6	; 0x06
    1e94:	3f 81       	ldd	r19, Y+7	; 0x07
    1e96:	22 30       	cpi	r18, 0x02	; 2
    1e98:	31 05       	cpc	r19, r1
    1e9a:	89 f1       	breq	.+98     	; 0x1efe <MDIO_VoidSetPinValue+0xb6>
    1e9c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9e:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea0:	83 30       	cpi	r24, 0x03	; 3
    1ea2:	91 05       	cpc	r25, r1
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <MDIO_VoidSetPinValue+0x60>
    1ea6:	40 c0       	rjmp	.+128    	; 0x1f28 <MDIO_VoidSetPinValue+0xe0>
    1ea8:	c6 c0       	rjmp	.+396    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
		{
			case 0 : CLR_BIT(PORTA_REG,Copy_U8Pin);break;
    1eaa:	ab e3       	ldi	r26, 0x3B	; 59
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	eb e3       	ldi	r30, 0x3B	; 59
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <MDIO_VoidSetPinValue+0x80>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <MDIO_VoidSetPinValue+0x7c>
    1ecc:	80 95       	com	r24
    1ece:	84 23       	and	r24, r20
    1ed0:	8c 93       	st	X, r24
    1ed2:	b1 c0       	rjmp	.+354    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
			case 1 : CLR_BIT(PORTB_REG,Copy_U8Pin);break;
    1ed4:	a8 e3       	ldi	r26, 0x38	; 56
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e8 e3       	ldi	r30, 0x38	; 56
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	48 2f       	mov	r20, r24
    1ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	02 2e       	mov	r0, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <MDIO_VoidSetPinValue+0xaa>
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	0a 94       	dec	r0
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <MDIO_VoidSetPinValue+0xa6>
    1ef6:	80 95       	com	r24
    1ef8:	84 23       	and	r24, r20
    1efa:	8c 93       	st	X, r24
    1efc:	9c c0       	rjmp	.+312    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
			case 2 : CLR_BIT(PORTC_REG,Copy_U8Pin);break;
    1efe:	a5 e3       	ldi	r26, 0x35	; 53
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e5 e3       	ldi	r30, 0x35	; 53
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	48 2f       	mov	r20, r24
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	02 2e       	mov	r0, r18
    1f16:	02 c0       	rjmp	.+4      	; 0x1f1c <MDIO_VoidSetPinValue+0xd4>
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	0a 94       	dec	r0
    1f1e:	e2 f7       	brpl	.-8      	; 0x1f18 <MDIO_VoidSetPinValue+0xd0>
    1f20:	80 95       	com	r24
    1f22:	84 23       	and	r24, r20
    1f24:	8c 93       	st	X, r24
    1f26:	87 c0       	rjmp	.+270    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
			case 3 : CLR_BIT(PORTD_REG,Copy_U8Pin);break;
    1f28:	a2 e3       	ldi	r26, 0x32	; 50
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e2 e3       	ldi	r30, 0x32	; 50
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 2e       	mov	r0, r18
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <MDIO_VoidSetPinValue+0xfe>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	0a 94       	dec	r0
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <MDIO_VoidSetPinValue+0xfa>
    1f4a:	80 95       	com	r24
    1f4c:	84 23       	and	r24, r20
    1f4e:	8c 93       	st	X, r24
    1f50:	72 c0       	rjmp	.+228    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
			default:/*Do Nothing*/;
			
		}
		
	}
	else if(1==Copy_U8Value)
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	81 30       	cpi	r24, 0x01	; 1
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <MDIO_VoidSetPinValue+0x112>
    1f58:	6e c0       	rjmp	.+220    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
	{
				switch(Copy_U8Port)
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	3d 83       	std	Y+5, r19	; 0x05
    1f62:	2c 83       	std	Y+4, r18	; 0x04
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	9d 81       	ldd	r25, Y+5	; 0x05
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	49 f1       	breq	.+82     	; 0x1fc0 <MDIO_VoidSetPinValue+0x178>
    1f6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f70:	3d 81       	ldd	r19, Y+5	; 0x05
    1f72:	22 30       	cpi	r18, 0x02	; 2
    1f74:	31 05       	cpc	r19, r1
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <MDIO_VoidSetPinValue+0x13a>
    1f78:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	61 f0       	breq	.+24     	; 0x1f98 <MDIO_VoidSetPinValue+0x150>
    1f80:	5a c0       	rjmp	.+180    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
    1f82:	2c 81       	ldd	r18, Y+4	; 0x04
    1f84:	3d 81       	ldd	r19, Y+5	; 0x05
    1f86:	22 30       	cpi	r18, 0x02	; 2
    1f88:	31 05       	cpc	r19, r1
    1f8a:	71 f1       	breq	.+92     	; 0x1fe8 <MDIO_VoidSetPinValue+0x1a0>
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f90:	83 30       	cpi	r24, 0x03	; 3
    1f92:	91 05       	cpc	r25, r1
    1f94:	e9 f1       	breq	.+122    	; 0x2010 <MDIO_VoidSetPinValue+0x1c8>
    1f96:	4f c0       	rjmp	.+158    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
		{
			case 0 : SET_BIT(PORTA_REG,Copy_U8Pin);break;
    1f98:	ab e3       	ldi	r26, 0x3B	; 59
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	eb e3       	ldi	r30, 0x3B	; 59
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	48 2f       	mov	r20, r24
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	02 2e       	mov	r0, r18
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <MDIO_VoidSetPinValue+0x16e>
    1fb2:	88 0f       	add	r24, r24
    1fb4:	99 1f       	adc	r25, r25
    1fb6:	0a 94       	dec	r0
    1fb8:	e2 f7       	brpl	.-8      	; 0x1fb2 <MDIO_VoidSetPinValue+0x16a>
    1fba:	84 2b       	or	r24, r20
    1fbc:	8c 93       	st	X, r24
    1fbe:	3b c0       	rjmp	.+118    	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
			case 1 : SET_BIT(PORTB_REG,Copy_U8Pin);break;
    1fc0:	a8 e3       	ldi	r26, 0x38	; 56
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e8 e3       	ldi	r30, 0x38	; 56
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	48 2f       	mov	r20, r24
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	02 2e       	mov	r0, r18
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <MDIO_VoidSetPinValue+0x196>
    1fda:	88 0f       	add	r24, r24
    1fdc:	99 1f       	adc	r25, r25
    1fde:	0a 94       	dec	r0
    1fe0:	e2 f7       	brpl	.-8      	; 0x1fda <MDIO_VoidSetPinValue+0x192>
    1fe2:	84 2b       	or	r24, r20
    1fe4:	8c 93       	st	X, r24
    1fe6:	27 c0       	rjmp	.+78     	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
			case 2 : SET_BIT(PORTC_REG,Copy_U8Pin);break;
    1fe8:	a5 e3       	ldi	r26, 0x35	; 53
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e5 e3       	ldi	r30, 0x35	; 53
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <MDIO_VoidSetPinValue+0x1be>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <MDIO_VoidSetPinValue+0x1ba>
    200a:	84 2b       	or	r24, r20
    200c:	8c 93       	st	X, r24
    200e:	13 c0       	rjmp	.+38     	; 0x2036 <MDIO_VoidSetPinValue+0x1ee>
			case 3 : SET_BIT(PORTD_REG,Copy_U8Pin);break;
    2010:	a2 e3       	ldi	r26, 0x32	; 50
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	e2 e3       	ldi	r30, 0x32	; 50
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <MDIO_VoidSetPinValue+0x1e6>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <MDIO_VoidSetPinValue+0x1e2>
    2032:	84 2b       	or	r24, r20
    2034:	8c 93       	st	X, r24
		/*Do Nothing*/
	}
	
	
	
}
    2036:	27 96       	adiw	r28, 0x07	; 7
    2038:	0f b6       	in	r0, 0x3f	; 63
    203a:	f8 94       	cli
    203c:	de bf       	out	0x3e, r29	; 62
    203e:	0f be       	out	0x3f, r0	; 63
    2040:	cd bf       	out	0x3d, r28	; 61
    2042:	cf 91       	pop	r28
    2044:	df 91       	pop	r29
    2046:	08 95       	ret

00002048 <MDIO_VoidSetPortDirection>:
void MDIO_VoidSetPortDirection(u8 Copy_U8Port ,u8 Copy_U8Direction)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	00 d0       	rcall	.+0      	; 0x204e <MDIO_VoidSetPortDirection+0x6>
    204e:	00 d0       	rcall	.+0      	; 0x2050 <MDIO_VoidSetPortDirection+0x8>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	6a 83       	std	Y+2, r22	; 0x02
	
	
		switch(Copy_U8Port)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	3c 83       	std	Y+4, r19	; 0x04
    2060:	2b 83       	std	Y+3, r18	; 0x03
    2062:	8b 81       	ldd	r24, Y+3	; 0x03
    2064:	9c 81       	ldd	r25, Y+4	; 0x04
    2066:	81 30       	cpi	r24, 0x01	; 1
    2068:	91 05       	cpc	r25, r1
    206a:	d1 f0       	breq	.+52     	; 0x20a0 <MDIO_VoidSetPortDirection+0x58>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	22 30       	cpi	r18, 0x02	; 2
    2072:	31 05       	cpc	r19, r1
    2074:	2c f4       	brge	.+10     	; 0x2080 <MDIO_VoidSetPortDirection+0x38>
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	61 f0       	breq	.+24     	; 0x2096 <MDIO_VoidSetPortDirection+0x4e>
    207e:	1e c0       	rjmp	.+60     	; 0x20bc <MDIO_VoidSetPortDirection+0x74>
    2080:	2b 81       	ldd	r18, Y+3	; 0x03
    2082:	3c 81       	ldd	r19, Y+4	; 0x04
    2084:	22 30       	cpi	r18, 0x02	; 2
    2086:	31 05       	cpc	r19, r1
    2088:	81 f0       	breq	.+32     	; 0x20aa <MDIO_VoidSetPortDirection+0x62>
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	91 05       	cpc	r25, r1
    2092:	81 f0       	breq	.+32     	; 0x20b4 <MDIO_VoidSetPortDirection+0x6c>
    2094:	13 c0       	rjmp	.+38     	; 0x20bc <MDIO_VoidSetPortDirection+0x74>
		{
			
			case 0 : DDRA_REG=Copy_U8Direction;break;
    2096:	ea e3       	ldi	r30, 0x3A	; 58
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	80 83       	st	Z, r24
    209e:	0e c0       	rjmp	.+28     	; 0x20bc <MDIO_VoidSetPortDirection+0x74>
			case 1 : DDRB_REG=Copy_U8Direction;break;
    20a0:	e7 e3       	ldi	r30, 0x37	; 55
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	80 83       	st	Z, r24
    20a8:	09 c0       	rjmp	.+18     	; 0x20bc <MDIO_VoidSetPortDirection+0x74>
			case 2 : DDRC_REG=Copy_U8Direction;break;
    20aa:	e4 e3       	ldi	r30, 0x34	; 52
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	80 83       	st	Z, r24
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <MDIO_VoidSetPortDirection+0x74>
			case 3 : DDRD_REG=Copy_U8Direction;break;
    20b4:	e1 e3       	ldi	r30, 0x31	; 49
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	80 83       	st	Z, r24
	
	
	
	
	
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <MDIO_VoidSetPortValue>:
void MDIO_VoidSetPortValue(u8 Copy_U8Port ,u8 Copy_U8Value)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <MDIO_VoidSetPortValue+0x6>
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <MDIO_VoidSetPortValue+0x8>
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	6a 83       	std	Y+2, r22	; 0x02
	
		switch(Copy_U8Port)
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	3c 83       	std	Y+4, r19	; 0x04
    20e2:	2b 83       	std	Y+3, r18	; 0x03
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	9c 81       	ldd	r25, Y+4	; 0x04
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	91 05       	cpc	r25, r1
    20ec:	d1 f0       	breq	.+52     	; 0x2122 <MDIO_VoidSetPortValue+0x58>
    20ee:	2b 81       	ldd	r18, Y+3	; 0x03
    20f0:	3c 81       	ldd	r19, Y+4	; 0x04
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	2c f4       	brge	.+10     	; 0x2102 <MDIO_VoidSetPortValue+0x38>
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	61 f0       	breq	.+24     	; 0x2118 <MDIO_VoidSetPortValue+0x4e>
    2100:	1e c0       	rjmp	.+60     	; 0x213e <MDIO_VoidSetPortValue+0x74>
    2102:	2b 81       	ldd	r18, Y+3	; 0x03
    2104:	3c 81       	ldd	r19, Y+4	; 0x04
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	81 f0       	breq	.+32     	; 0x212c <MDIO_VoidSetPortValue+0x62>
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	83 30       	cpi	r24, 0x03	; 3
    2112:	91 05       	cpc	r25, r1
    2114:	81 f0       	breq	.+32     	; 0x2136 <MDIO_VoidSetPortValue+0x6c>
    2116:	13 c0       	rjmp	.+38     	; 0x213e <MDIO_VoidSetPortValue+0x74>
		{
			case 0 : PORTA_REG =Copy_U8Value;break;
    2118:	eb e3       	ldi	r30, 0x3B	; 59
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	80 83       	st	Z, r24
    2120:	0e c0       	rjmp	.+28     	; 0x213e <MDIO_VoidSetPortValue+0x74>
			case 1 : PORTB_REG =Copy_U8Value;break;
    2122:	e8 e3       	ldi	r30, 0x38	; 56
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	80 83       	st	Z, r24
    212a:	09 c0       	rjmp	.+18     	; 0x213e <MDIO_VoidSetPortValue+0x74>
			case 2 : PORTC_REG =Copy_U8Value;break;
    212c:	e5 e3       	ldi	r30, 0x35	; 53
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	80 83       	st	Z, r24
    2134:	04 c0       	rjmp	.+8      	; 0x213e <MDIO_VoidSetPortValue+0x74>
			case 3 : PORTD_REG =Copy_U8Value;break;
    2136:	e2 e3       	ldi	r30, 0x32	; 50
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	80 83       	st	Z, r24
		
		
	
	
	
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <MDIO_VoidTogglePin>:

void MDIO_VoidTogglePin(u8 Copy_U8Port ,u8 Copy_U8Pin )
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <MDIO_VoidTogglePin+0x6>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <MDIO_VoidTogglePin+0x8>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_U8Port)
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	3c 83       	std	Y+4, r19	; 0x04
    2164:	2b 83       	std	Y+3, r18	; 0x03
    2166:	8b 81       	ldd	r24, Y+3	; 0x03
    2168:	9c 81       	ldd	r25, Y+4	; 0x04
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	91 05       	cpc	r25, r1
    216e:	49 f1       	breq	.+82     	; 0x21c2 <MDIO_VoidTogglePin+0x76>
    2170:	2b 81       	ldd	r18, Y+3	; 0x03
    2172:	3c 81       	ldd	r19, Y+4	; 0x04
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	31 05       	cpc	r19, r1
    2178:	2c f4       	brge	.+10     	; 0x2184 <MDIO_VoidTogglePin+0x38>
    217a:	8b 81       	ldd	r24, Y+3	; 0x03
    217c:	9c 81       	ldd	r25, Y+4	; 0x04
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	61 f0       	breq	.+24     	; 0x219a <MDIO_VoidTogglePin+0x4e>
    2182:	5a c0       	rjmp	.+180    	; 0x2238 <MDIO_VoidTogglePin+0xec>
    2184:	2b 81       	ldd	r18, Y+3	; 0x03
    2186:	3c 81       	ldd	r19, Y+4	; 0x04
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	71 f1       	breq	.+92     	; 0x21ea <MDIO_VoidTogglePin+0x9e>
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	9c 81       	ldd	r25, Y+4	; 0x04
    2192:	83 30       	cpi	r24, 0x03	; 3
    2194:	91 05       	cpc	r25, r1
    2196:	e9 f1       	breq	.+122    	; 0x2212 <MDIO_VoidTogglePin+0xc6>
    2198:	4f c0       	rjmp	.+158    	; 0x2238 <MDIO_VoidTogglePin+0xec>
	{
		case 0 : TOGGLE_BIT(PORTA_REG,Copy_U8Pin);break;
    219a:	ab e3       	ldi	r26, 0x3B	; 59
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	eb e3       	ldi	r30, 0x3B	; 59
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	48 2f       	mov	r20, r24
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	02 2e       	mov	r0, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <MDIO_VoidTogglePin+0x6c>
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	0a 94       	dec	r0
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <MDIO_VoidTogglePin+0x68>
    21bc:	84 27       	eor	r24, r20
    21be:	8c 93       	st	X, r24
    21c0:	3b c0       	rjmp	.+118    	; 0x2238 <MDIO_VoidTogglePin+0xec>
		case 1 : TOGGLE_BIT(PORTB_REG,Copy_U8Pin);break;
    21c2:	a8 e3       	ldi	r26, 0x38	; 56
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e8 e3       	ldi	r30, 0x38	; 56
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	48 2f       	mov	r20, r24
    21ce:	8a 81       	ldd	r24, Y+2	; 0x02
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	02 2e       	mov	r0, r18
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <MDIO_VoidTogglePin+0x94>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	0a 94       	dec	r0
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <MDIO_VoidTogglePin+0x90>
    21e4:	84 27       	eor	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	27 c0       	rjmp	.+78     	; 0x2238 <MDIO_VoidTogglePin+0xec>
		case 2 : TOGGLE_BIT(PORTC_REG,Copy_U8Pin);break;
    21ea:	a5 e3       	ldi	r26, 0x35	; 53
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e5 e3       	ldi	r30, 0x35	; 53
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <MDIO_VoidTogglePin+0xbc>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <MDIO_VoidTogglePin+0xb8>
    220c:	84 27       	eor	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	13 c0       	rjmp	.+38     	; 0x2238 <MDIO_VoidTogglePin+0xec>
		case 3 : TOGGLE_BIT(PORTD_REG,Copy_U8Pin);break;
    2212:	a2 e3       	ldi	r26, 0x32	; 50
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e2 e3       	ldi	r30, 0x32	; 50
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <MDIO_VoidTogglePin+0xe4>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <MDIO_VoidTogglePin+0xe0>
    2234:	84 27       	eor	r24, r20
    2236:	8c 93       	st	X, r24
		
		
		
	}
	
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <TIM0_Init>:
u8 Flag=0;
u16 Snap1=0;
u32 Snap2=0;
u32 Snap3=0;
void TIM0_Init(void)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,1);
	
	#endif
	#elif TIMER0_MODE==PWM_MODE
		/*Select Mode(PWM) */
	SET_BIT(TCCR0,6);
    224e:	a3 e5       	ldi	r26, 0x53	; 83
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e3 e5       	ldi	r30, 0x53	; 83
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	80 64       	ori	r24, 0x40	; 64
    225a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
    225c:	a3 e5       	ldi	r26, 0x53	; 83
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e3 e5       	ldi	r30, 0x53	; 83
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	88 60       	ori	r24, 0x08	; 8
    2268:	8c 93       	st	X, r24
	
	/*Select Non Inverting Mode*/
	SET_BIT(TCCR0,5);
    226a:	a3 e5       	ldi	r26, 0x53	; 83
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e3 e5       	ldi	r30, 0x53	; 83
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	80 62       	ori	r24, 0x20	; 32
    2276:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,4);
    2278:	a3 e5       	ldi	r26, 0x53	; 83
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e3 e5       	ldi	r30, 0x53	; 83
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8f 7e       	andi	r24, 0xEF	; 239
    2284:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,2);
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	
	#elif TIMER0_PRESCALLING==DIV_256
	SET_BIT(TCCR0,2);
    2286:	a3 e5       	ldi	r26, 0x53	; 83
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e3 e5       	ldi	r30, 0x53	; 83
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	84 60       	ori	r24, 0x04	; 4
    2292:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,0);
    2294:	a3 e5       	ldi	r26, 0x53	; 83
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e3 e5       	ldi	r30, 0x53	; 83
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	8e 7f       	andi	r24, 0xFE	; 254
    22a0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
    22a2:	a3 e5       	ldi	r26, 0x53	; 83
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e3 e5       	ldi	r30, 0x53	; 83
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	8d 7f       	andi	r24, 0xFD	; 253
    22ae:	8c 93       	st	X, r24
	#endif

	
	
	
}
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <TIM0_PrelaodValue>:

void TIM0_PrelaodValue(u8 Copy_U8PV0)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	0f 92       	push	r0
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	89 83       	std	Y+1, r24	; 0x01
	
	/*Preload Value*/
	TCNT0=Copy_U8PV0 ;
    22c2:	e2 e5       	ldi	r30, 0x52	; 82
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	80 83       	st	Z, r24
	
}
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <TIM0_CompareValue>:


void TIM0_CompareValue(u8 Copy_U8CV0)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	0f 92       	push	r0
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	89 83       	std	Y+1, r24	; 0x01
	/*Set Compare Value*/
	OCR0=Copy_U8CV0;
    22de:	ec e5       	ldi	r30, 0x5C	; 92
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	80 83       	st	Z, r24
}
    22e6:	0f 90       	pop	r0
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <TIM0_FastPWM_Set_DutyCycle>:


void TIM0_FastPWM_Set_DutyCycle(u8 Copy_U8DC)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	0f 92       	push	r0
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	89 83       	std	Y+1, r24	; 0x01
	/*Set Duty Cycle*/
	OCR0=Copy_U8DC;
    22fa:	ec e5       	ldi	r30, 0x5C	; 92
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	80 83       	st	Z, r24
}
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <TIM1_Init_OV>:

void TIM1_Init_OV(void)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
	/*Select Normal Mode*/
	CLR_BIT(TCCR1A,0);
    2312:	af e4       	ldi	r26, 0x4F	; 79
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	ef e4       	ldi	r30, 0x4F	; 79
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	8e 7f       	andi	r24, 0xFE	; 254
    231e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,1);
    2320:	af e4       	ldi	r26, 0x4F	; 79
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	ef e4       	ldi	r30, 0x4F	; 79
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	8d 7f       	andi	r24, 0xFD	; 253
    232c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,3);
    232e:	ae e4       	ldi	r26, 0x4E	; 78
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	ee e4       	ldi	r30, 0x4E	; 78
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	87 7f       	andi	r24, 0xF7	; 247
    233a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,4);
    233c:	ae e4       	ldi	r26, 0x4E	; 78
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	ee e4       	ldi	r30, 0x4E	; 78
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	8f 7e       	andi	r24, 0xEF	; 239
    2348:	8c 93       	st	X, r24
	
	/*Select Prescaler (256)*/
	SET_BIT(TCCR1B,2);
    234a:	ae e4       	ldi	r26, 0x4E	; 78
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	ee e4       	ldi	r30, 0x4E	; 78
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	84 60       	ori	r24, 0x04	; 4
    2356:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,1);
    2358:	ae e4       	ldi	r26, 0x4E	; 78
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	ee e4       	ldi	r30, 0x4E	; 78
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	8d 7f       	andi	r24, 0xFD	; 253
    2364:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,0);
    2366:	ae e4       	ldi	r26, 0x4E	; 78
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	ee e4       	ldi	r30, 0x4E	; 78
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	8e 7f       	andi	r24, 0xFE	; 254
    2372:	8c 93       	st	X, r24
	
	/*Enable OVER Flow Interrupt (PIE) */
	SET_BIT(TIMSK,2);
    2374:	a9 e5       	ldi	r26, 0x59	; 89
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e9 e5       	ldi	r30, 0x59	; 89
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	84 60       	ori	r24, 0x04	; 4
    2380:	8c 93       	st	X, r24
	
	/*Enable ICU Interrupt (PIE)*/
	SET_BIT(TIMSK,5);
    2382:	a9 e5       	ldi	r26, 0x59	; 89
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e9 e5       	ldi	r30, 0x59	; 89
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	80 62       	ori	r24, 0x20	; 32
    238e:	8c 93       	st	X, r24
	
}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <__vector_9>:
//
}
#endif

void __vector_9(void) /*TIM1_Over Flow Int*/
{
    2396:	1f 92       	push	r1
    2398:	0f 92       	push	r0
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	0f 92       	push	r0
    239e:	11 24       	eor	r1, r1
    23a0:	8f 93       	push	r24
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	cd b7       	in	r28, 0x3d	; 61
    23a8:	de b7       	in	r29, 0x3e	; 62
	
	OV_Count1++;
    23aa:	80 91 2e 01 	lds	r24, 0x012E
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	80 93 2e 01 	sts	0x012E, r24
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	8f 91       	pop	r24
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0
    23c0:	1f 90       	pop	r1
    23c2:	18 95       	reti

000023c4 <__vector_6>:

void __vector_6(void) /*TIM_ICU Int*/
{
    23c4:	1f 92       	push	r1
    23c6:	0f 92       	push	r0
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	0f 92       	push	r0
    23cc:	11 24       	eor	r1, r1
    23ce:	2f 93       	push	r18
    23d0:	3f 93       	push	r19
    23d2:	4f 93       	push	r20
    23d4:	5f 93       	push	r21
    23d6:	8f 93       	push	r24
    23d8:	9f 93       	push	r25
    23da:	af 93       	push	r26
    23dc:	bf 93       	push	r27
    23de:	ef 93       	push	r30
    23e0:	ff 93       	push	r31
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
    23ea:	80 91 2f 01 	lds	r24, 0x012F
    23ee:	88 23       	and	r24, r24
    23f0:	a9 f4       	brne	.+42     	; 0x241c <__vector_6+0x58>
	{
		/*Capture First Change*/
		Snap1=ICR1;
    23f2:	e6 e4       	ldi	r30, 0x46	; 70
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	90 93 31 01 	sts	0x0131, r25
    23fe:	80 93 30 01 	sts	0x0130, r24
		
		/*Select Sense Control(ICES) :Falling_Edge */
		CLR_BIT(TCCR1B,6); 
    2402:	ae e4       	ldi	r26, 0x4E	; 78
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ee e4       	ldi	r30, 0x4E	; 78
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	8f 7b       	andi	r24, 0xBF	; 191
    240e:	8c 93       	st	X, r24
		
		Flag=1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	80 93 2f 01 	sts	0x012F, r24
		OV_Count1=0;
    2416:	10 92 2e 01 	sts	0x012E, r1
    241a:	58 c0       	rjmp	.+176    	; 0x24cc <__vector_6+0x108>
		
	}
	
	else if(Flag==1)
    241c:	80 91 2f 01 	lds	r24, 0x012F
    2420:	81 30       	cpi	r24, 0x01	; 1
    2422:	61 f5       	brne	.+88     	; 0x247c <__vector_6+0xb8>
	{
		/*Capture Second Change*/
		Snap2=ICR1+(OV_Count1*(2^16));
    2424:	e6 e4       	ldi	r30, 0x46	; 70
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	40 81       	ld	r20, Z
    242a:	51 81       	ldd	r21, Z+1	; 0x01
    242c:	80 91 2e 01 	lds	r24, 0x012E
    2430:	88 2f       	mov	r24, r24
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	9c 01       	movw	r18, r24
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	c9 01       	movw	r24, r18
    243c:	88 0f       	add	r24, r24
    243e:	99 1f       	adc	r25, r25
    2440:	88 0f       	add	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	82 0f       	add	r24, r18
    244a:	93 1f       	adc	r25, r19
    244c:	84 0f       	add	r24, r20
    244e:	95 1f       	adc	r25, r21
    2450:	cc 01       	movw	r24, r24
    2452:	a0 e0       	ldi	r26, 0x00	; 0
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	80 93 32 01 	sts	0x0132, r24
    245a:	90 93 33 01 	sts	0x0133, r25
    245e:	a0 93 34 01 	sts	0x0134, r26
    2462:	b0 93 35 01 	sts	0x0135, r27
		
		/*Select Sense Control(ICES) :Rising_Edge */
		SET_BIT(TCCR1B,6); 
    2466:	ae e4       	ldi	r26, 0x4E	; 78
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	ee e4       	ldi	r30, 0x4E	; 78
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	80 64       	ori	r24, 0x40	; 64
    2472:	8c 93       	st	X, r24
		
		Flag=2;
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	80 93 2f 01 	sts	0x012F, r24
    247a:	28 c0       	rjmp	.+80     	; 0x24cc <__vector_6+0x108>
		
		
	}
	
	else if(Flag==2)
    247c:	80 91 2f 01 	lds	r24, 0x012F
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	21 f5       	brne	.+72     	; 0x24cc <__vector_6+0x108>
	{
		/*Capture 3rd Change*/
		Snap3=ICR1+(OV_Count1*(2^16));
    2484:	e6 e4       	ldi	r30, 0x46	; 70
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	40 81       	ld	r20, Z
    248a:	51 81       	ldd	r21, Z+1	; 0x01
    248c:	80 91 2e 01 	lds	r24, 0x012E
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9c 01       	movw	r18, r24
    2496:	22 0f       	add	r18, r18
    2498:	33 1f       	adc	r19, r19
    249a:	c9 01       	movw	r24, r18
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	82 0f       	add	r24, r18
    24aa:	93 1f       	adc	r25, r19
    24ac:	84 0f       	add	r24, r20
    24ae:	95 1f       	adc	r25, r21
    24b0:	cc 01       	movw	r24, r24
    24b2:	a0 e0       	ldi	r26, 0x00	; 0
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	80 93 36 01 	sts	0x0136, r24
    24ba:	90 93 37 01 	sts	0x0137, r25
    24be:	a0 93 38 01 	sts	0x0138, r26
    24c2:	b0 93 39 01 	sts	0x0139, r27
		
		Flag=3;
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	80 93 2f 01 	sts	0x012F, r24
	}
}
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	ff 91       	pop	r31
    24d2:	ef 91       	pop	r30
    24d4:	bf 91       	pop	r27
    24d6:	af 91       	pop	r26
    24d8:	9f 91       	pop	r25
    24da:	8f 91       	pop	r24
    24dc:	5f 91       	pop	r21
    24de:	4f 91       	pop	r20
    24e0:	3f 91       	pop	r19
    24e2:	2f 91       	pop	r18
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	0f 90       	pop	r0
    24ea:	1f 90       	pop	r1
    24ec:	18 95       	reti

000024ee <URT_Init>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "MURT_Private.h"

void URT_Init(void)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
	static u8 LOC_UBRR_Help=0;
	/*Select Register */
	SET_BIT(LOC_UBRR_Help,7);
    24f6:	80 91 3c 01 	lds	r24, 0x013C
    24fa:	80 68       	ori	r24, 0x80	; 128
    24fc:	80 93 3c 01 	sts	0x013C, r24
	
	/*Enable Recevier*/
	SET_BIT(UCSRB,4);
    2500:	aa e2       	ldi	r26, 0x2A	; 42
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	ea e2       	ldi	r30, 0x2A	; 42
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	80 61       	ori	r24, 0x10	; 16
    250c:	8c 93       	st	X, r24
	
	/*Enable Transmitter*/
	SET_BIT(UCSRB,3);
    250e:	aa e2       	ldi	r26, 0x2A	; 42
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	ea e2       	ldi	r30, 0x2A	; 42
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	88 60       	ori	r24, 0x08	; 8
    251a:	8c 93       	st	X, r24
	
	/*Select Mode (A Synch)*/
	CLR_BIT(LOC_UBRR_Help,6);
    251c:	80 91 3c 01 	lds	r24, 0x013C
    2520:	8f 7b       	andi	r24, 0xBF	; 191
    2522:	80 93 3c 01 	sts	0x013C, r24
	
	/*Select Parity Mode(Disable)*/
	CLR_BIT(LOC_UBRR_Help,5);
    2526:	80 91 3c 01 	lds	r24, 0x013C
    252a:	8f 7d       	andi	r24, 0xDF	; 223
    252c:	80 93 3c 01 	sts	0x013C, r24
	CLR_BIT(LOC_UBRR_Help,4);
    2530:	80 91 3c 01 	lds	r24, 0x013C
    2534:	8f 7e       	andi	r24, 0xEF	; 239
    2536:	80 93 3c 01 	sts	0x013C, r24
	
	/*Stop Bit Select (1 Bit)*/
	CLR_BIT(LOC_UBRR_Help,3);
    253a:	80 91 3c 01 	lds	r24, 0x013C
    253e:	87 7f       	andi	r24, 0xF7	; 247
    2540:	80 93 3c 01 	sts	0x013C, r24
	
	/*Select Character Size (8 Bit)*/
	CLR_BIT(UCSRB,2);
    2544:	aa e2       	ldi	r26, 0x2A	; 42
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	ea e2       	ldi	r30, 0x2A	; 42
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	8b 7f       	andi	r24, 0xFB	; 251
    2550:	8c 93       	st	X, r24
	SET_BIT(LOC_UBRR_Help,2);
    2552:	80 91 3c 01 	lds	r24, 0x013C
    2556:	84 60       	ori	r24, 0x04	; 4
    2558:	80 93 3c 01 	sts	0x013C, r24
	SET_BIT(LOC_UBRR_Help,1);
    255c:	80 91 3c 01 	lds	r24, 0x013C
    2560:	82 60       	ori	r24, 0x02	; 2
    2562:	80 93 3c 01 	sts	0x013C, r24
	
	/*Select BAUD Rate*/
	UBRR=51;
    2566:	e9 e2       	ldi	r30, 0x29	; 41
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	83 e3       	ldi	r24, 0x33	; 51
    256c:	80 83       	st	Z, r24
	
	UCSRC=LOC_UBRR_Help;
    256e:	e0 e4       	ldi	r30, 0x40	; 64
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 91 3c 01 	lds	r24, 0x013C
    2576:	80 83       	st	Z, r24
	
	
}
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <URT_Transmitte>:

void URT_Transmitte(u8 Copy_U8Data)
{
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	89 83       	std	Y+1, r24	; 0x01
		UDR=Copy_U8Data;
    258a:	ec e2       	ldi	r30, 0x2C	; 44
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	80 83       	st	Z, r24
	while(GET_BIT(UCSRA,5)==0);
    2592:	eb e2       	ldi	r30, 0x2B	; 43
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	82 95       	swap	r24
    259a:	86 95       	lsr	r24
    259c:	87 70       	andi	r24, 0x07	; 7
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	81 70       	andi	r24, 0x01	; 1
    25a4:	90 70       	andi	r25, 0x00	; 0
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	a1 f3       	breq	.-24     	; 0x2592 <URT_Transmitte+0x14>

	
}
    25aa:	0f 90       	pop	r0
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <URT_Recevier>:

u8 URT_Recevier(void)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,7)==0);
    25ba:	eb e2       	ldi	r30, 0x2B	; 43
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	88 23       	and	r24, r24
    25c2:	dc f7       	brge	.-10     	; 0x25ba <URT_Recevier+0x8>
	return UDR;
    25c4:	ec e2       	ldi	r30, 0x2C	; 44
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
	
}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <URT_SendString>:

void URT_SendString(u8* Coby_U8String)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <URT_SendString+0x6>
    25d6:	0f 92       	push	r0
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	9b 83       	std	Y+3, r25	; 0x03
    25de:	8a 83       	std	Y+2, r24	; 0x02

	/*Lentgh Of String*/
		u8 LOC_LEGNTH = 0;
    25e0:	19 82       	std	Y+1, r1	; 0x01


		/*Do Until String End*/
		for(LOC_LEGNTH=0;Coby_U8String[LOC_LEGNTH];LOC_LEGNTH++)
    25e2:	19 82       	std	Y+1, r1	; 0x01
    25e4:	0e c0       	rjmp	.+28     	; 0x2602 <URT_SendString+0x32>
		{


			/*Send Character as String*/
			URT_Transmitte(Coby_U8String[LOC_LEGNTH]);
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	e2 0f       	add	r30, r18
    25f4:	f3 1f       	adc	r31, r19
    25f6:	80 81       	ld	r24, Z
    25f8:	0e 94 bf 12 	call	0x257e	; 0x257e <URT_Transmitte>
	/*Lentgh Of String*/
		u8 LOC_LEGNTH = 0;


		/*Do Until String End*/
		for(LOC_LEGNTH=0;Coby_U8String[LOC_LEGNTH];LOC_LEGNTH++)
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	fc 01       	movw	r30, r24
    260e:	e2 0f       	add	r30, r18
    2610:	f3 1f       	adc	r31, r19
    2612:	80 81       	ld	r24, Z
    2614:	88 23       	and	r24, r24
    2616:	39 f7       	brne	.-50     	; 0x25e6 <URT_SendString+0x16>
			URT_Transmitte(Coby_U8String[LOC_LEGNTH]);

			/*Increment Length*/

		}
}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <main>:
u8 Login_Trial=False;
u8 Door_State=Closed;
u8 Login_state=OUT;
u8 Data=0;
int main(void)
{
    2624:	2f 92       	push	r2
    2626:	3f 92       	push	r3
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	df 93       	push	r29
    262e:	cf 93       	push	r28
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	ca 5c       	subi	r28, 0xCA	; 202
    2636:	d0 40       	sbci	r29, 0x00	; 0
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <main+0x12b0>
		/*Login */
		while(!Login_Trial)
		{

			/*Password & ID */
			u8 *IDTrue[3]={0};
    2646:	ce 01       	movw	r24, r28
    2648:	8f 54       	subi	r24, 0x4F	; 79
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	26 e0       	ldi	r18, 0x06	; 6
    264e:	fc 01       	movw	r30, r24
    2650:	df 01       	movw	r26, r30
    2652:	42 2f       	mov	r20, r18
    2654:	1d 92       	st	X+, r1
    2656:	4a 95       	dec	r20
    2658:	e9 f7       	brne	.-6      	; 0x2654 <main+0x30>
			u8 *PassTrue[3]={0};
    265a:	ce 01       	movw	r24, r28
    265c:	8f 54       	subi	r24, 0x4F	; 79
    265e:	9f 4f       	sbci	r25, 0xFF	; 255
    2660:	26 e0       	ldi	r18, 0x06	; 6
    2662:	fc 01       	movw	r30, r24
    2664:	37 96       	adiw	r30, 0x07	; 7
    2666:	df 01       	movw	r26, r30
    2668:	42 2f       	mov	r20, r18
    266a:	1d 92       	st	X+, r1
    266c:	4a 95       	dec	r20
    266e:	e9 f7       	brne	.-6      	; 0x266a <main+0x46>

			/*Init */
			URT_Init();
    2670:	0e 94 77 12 	call	0x24ee	; 0x24ee <URT_Init>
			HLCD_VoidInit();
    2674:	0e 94 5d 09 	call	0x12ba	; 0x12ba <HLCD_VoidInit>
			MADC_voidInit();
    2678:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <MADC_voidInit>
			/*TIM0 Init*/
			TIM0_Init();
    267c:	0e 94 23 11 	call	0x2246	; 0x2246 <TIM0_Init>
			u8 ID=0;
    2680:	fe 01       	movw	r30, r28
    2682:	ef 54       	subi	r30, 0x4F	; 79
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	16 82       	std	Z+6, r1	; 0x06
			u8 Pass=0;
    2688:	fe 01       	movw	r30, r28
    268a:	ef 54       	subi	r30, 0x4F	; 79
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	15 86       	std	Z+13, r1	; 0x0d



			/*Go To ID Check Function*/

			u8 Pas=0;
    2690:	fe 01       	movw	r30, r28
    2692:	e0 55       	subi	r30, 0x50	; 80
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	10 82       	st	Z, r1
			/* bigger loop id check  */
			for(u8 y=0;y<3;y++)
    2698:	fe 01       	movw	r30, r28
    269a:	e1 55       	subi	r30, 0x51	; 81
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	10 82       	st	Z, r1
    26a0:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <main+0x12a0>
			{
				/*If Correct ID*/
				if(IDTrue[0]=='3'&&IDTrue[1]=='0'&&IDTrue[2]=='0'&&IDTrue[3]=='0')
    26a4:	fe 01       	movw	r30, r28
    26a6:	ef 54       	subi	r30, 0x4F	; 79
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	91 81       	ldd	r25, Z+1	; 0x01
    26ae:	83 33       	cpi	r24, 0x33	; 51
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f0       	breq	.+2      	; 0x26b6 <main+0x92>
    26b4:	03 c2       	rjmp	.+1030   	; 0x2abc <main+0x498>
    26b6:	fe 01       	movw	r30, r28
    26b8:	ef 54       	subi	r30, 0x4F	; 79
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	82 81       	ldd	r24, Z+2	; 0x02
    26be:	93 81       	ldd	r25, Z+3	; 0x03
    26c0:	80 33       	cpi	r24, 0x30	; 48
    26c2:	91 05       	cpc	r25, r1
    26c4:	09 f0       	breq	.+2      	; 0x26c8 <main+0xa4>
    26c6:	fa c1       	rjmp	.+1012   	; 0x2abc <main+0x498>
    26c8:	fe 01       	movw	r30, r28
    26ca:	ef 54       	subi	r30, 0x4F	; 79
    26cc:	ff 4f       	sbci	r31, 0xFF	; 255
    26ce:	84 81       	ldd	r24, Z+4	; 0x04
    26d0:	95 81       	ldd	r25, Z+5	; 0x05
    26d2:	80 33       	cpi	r24, 0x30	; 48
    26d4:	91 05       	cpc	r25, r1
    26d6:	09 f0       	breq	.+2      	; 0x26da <main+0xb6>
    26d8:	f1 c1       	rjmp	.+994    	; 0x2abc <main+0x498>
    26da:	fe 01       	movw	r30, r28
    26dc:	ef 54       	subi	r30, 0x4F	; 79
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	86 81       	ldd	r24, Z+6	; 0x06
    26e2:	97 81       	ldd	r25, Z+7	; 0x07
    26e4:	80 33       	cpi	r24, 0x30	; 48
    26e6:	91 05       	cpc	r25, r1
    26e8:	09 f0       	breq	.+2      	; 0x26ec <main+0xc8>
    26ea:	e8 c1       	rjmp	.+976    	; 0x2abc <main+0x498>
				{
					y=4; //For Exit For Loop
    26ec:	fe 01       	movw	r30, r28
    26ee:	e1 55       	subi	r30, 0x51	; 81
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	84 e0       	ldi	r24, 0x04	; 4
    26f4:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,0);
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					/*Go To Pass Check Function*/
					Pass_Check();
    2704:	ce 01       	movw	r24, r28
    2706:	8f 54       	subi	r24, 0x4F	; 79
    2708:	9f 4f       	sbci	r25, 0xFF	; 255
    270a:	1c 01       	movw	r2, r24
    270c:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>

					for(Pas=0;Pas<2;Pas++)
    2710:	fe 01       	movw	r30, r28
    2712:	e0 55       	subi	r30, 0x50	; 80
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	10 82       	st	Z, r1
    2718:	c9 c1       	rjmp	.+914    	; 0x2aac <main+0x488>
					{
						/*If Correct Password*/
						if(PassTrue[0]=='1'&&PassTrue[1]=='0'&&PassTrue[2]=='0'&&PassTrue[3]=='0')
    271a:	fe 01       	movw	r30, r28
    271c:	ef 54       	subi	r30, 0x4F	; 79
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	87 81       	ldd	r24, Z+7	; 0x07
    2722:	90 85       	ldd	r25, Z+8	; 0x08
    2724:	81 33       	cpi	r24, 0x31	; 49
    2726:	91 05       	cpc	r25, r1
    2728:	79 f5       	brne	.+94     	; 0x2788 <main+0x164>
    272a:	fe 01       	movw	r30, r28
    272c:	ef 54       	subi	r30, 0x4F	; 79
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	81 85       	ldd	r24, Z+9	; 0x09
    2732:	92 85       	ldd	r25, Z+10	; 0x0a
    2734:	80 33       	cpi	r24, 0x30	; 48
    2736:	91 05       	cpc	r25, r1
    2738:	39 f5       	brne	.+78     	; 0x2788 <main+0x164>
    273a:	fe 01       	movw	r30, r28
    273c:	ef 54       	subi	r30, 0x4F	; 79
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	83 85       	ldd	r24, Z+11	; 0x0b
    2742:	94 85       	ldd	r25, Z+12	; 0x0c
    2744:	80 33       	cpi	r24, 0x30	; 48
    2746:	91 05       	cpc	r25, r1
    2748:	f9 f4       	brne	.+62     	; 0x2788 <main+0x164>
    274a:	fe 01       	movw	r30, r28
    274c:	ef 54       	subi	r30, 0x4F	; 79
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	85 85       	ldd	r24, Z+13	; 0x0d
    2752:	96 85       	ldd	r25, Z+14	; 0x0e
    2754:	80 33       	cpi	r24, 0x30	; 48
    2756:	91 05       	cpc	r25, r1
    2758:	b9 f4       	brne	.+46     	; 0x2788 <main+0x164>
						{
							Login_Trial=True;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	80 93 3d 01 	sts	0x013D, r24
							Pas=3; //For Exit For Loop
    2760:	fe 01       	movw	r30, r28
    2762:	e0 55       	subi	r30, 0x50	; 80
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	80 83       	st	Z, r24
							HLCD_VoidSendCommand(0x01);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSetPostion(0,6);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	66 e0       	ldi	r22, 0x06	; 6
    2774:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
							HLCD_VoidSendString("Hello");
    2778:	80 e6       	ldi	r24, 0x60	; 96
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
							Login_state=IN;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	80 93 3f 01 	sts	0x013F, r24
    2786:	89 c1       	rjmp	.+786    	; 0x2a9a <main+0x476>
						}

						/*If Incorrect Password*/
						else if(Pas<2)
    2788:	fe 01       	movw	r30, r28
    278a:	e0 55       	subi	r30, 0x50	; 80
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	82 30       	cpi	r24, 0x02	; 2
    2792:	08 f0       	brcs	.+2      	; 0x2796 <main+0x172>
    2794:	c1 c0       	rjmp	.+386    	; 0x2918 <main+0x2f4>
						{
							HLCD_VoidSendCommand(0x01);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSendString("Wrong Pass Try Again");
    279c:	86 e6       	ldi	r24, 0x66	; 102
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    27a4:	fe 01       	movw	r30, r28
    27a6:	eb 55       	subi	r30, 0x5B	; 91
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	aa e7       	ldi	r26, 0x7A	; 122
    27b0:	b4 e4       	ldi	r27, 0x44	; 68
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ba:	8e 01       	movw	r16, r28
    27bc:	0f 55       	subi	r16, 0x5F	; 95
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	fe 01       	movw	r30, r28
    27c2:	eb 55       	subi	r30, 0x5B	; 91
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	4a ef       	ldi	r20, 0xFA	; 250
    27d4:	54 e4       	ldi	r21, 0x44	; 68
    27d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	f8 01       	movw	r30, r16
    27e0:	80 83       	st	Z, r24
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	a2 83       	std	Z+2, r26	; 0x02
    27e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e8:	fe 01       	movw	r30, r28
    27ea:	ef 55       	subi	r30, 0x5F	; 95
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	60 81       	ld	r22, Z
    27f0:	71 81       	ldd	r23, Z+1	; 0x01
    27f2:	82 81       	ldd	r24, Z+2	; 0x02
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e8       	ldi	r20, 0x80	; 128
    27fc:	5f e3       	ldi	r21, 0x3F	; 63
    27fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2802:	88 23       	and	r24, r24
    2804:	44 f4       	brge	.+16     	; 0x2816 <main+0x1f2>
		__ticks = 1;
    2806:	fe 01       	movw	r30, r28
    2808:	e1 56       	subi	r30, 0x61	; 97
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
    2814:	64 c0       	rjmp	.+200    	; 0x28de <main+0x2ba>
	else if (__tmp > 65535)
    2816:	fe 01       	movw	r30, r28
    2818:	ef 55       	subi	r30, 0x5F	; 95
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	60 81       	ld	r22, Z
    281e:	71 81       	ldd	r23, Z+1	; 0x01
    2820:	82 81       	ldd	r24, Z+2	; 0x02
    2822:	93 81       	ldd	r25, Z+3	; 0x03
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	0c f0       	brlt	.+2      	; 0x2836 <main+0x212>
    2834:	43 c0       	rjmp	.+134    	; 0x28bc <main+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	fe 01       	movw	r30, r28
    2838:	eb 55       	subi	r30, 0x5B	; 91
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8e 01       	movw	r16, r28
    2856:	01 56       	subi	r16, 0x61	; 97
    2858:	1f 4f       	sbci	r17, 0xFF	; 255
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	f8 01       	movw	r30, r16
    2868:	91 83       	std	Z+1, r25	; 0x01
    286a:	80 83       	st	Z, r24
    286c:	1f c0       	rjmp	.+62     	; 0x28ac <main+0x288>
    286e:	fe 01       	movw	r30, r28
    2870:	e3 56       	subi	r30, 0x63	; 99
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	80 83       	st	Z, r24
    287c:	fe 01       	movw	r30, r28
    287e:	e3 56       	subi	r30, 0x63	; 99
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	91 81       	ldd	r25, Z+1	; 0x01
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <main+0x262>
    288a:	fe 01       	movw	r30, r28
    288c:	e3 56       	subi	r30, 0x63	; 99
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	de 01       	movw	r26, r28
    2896:	a1 56       	subi	r26, 0x61	; 97
    2898:	bf 4f       	sbci	r27, 0xFF	; 255
    289a:	fe 01       	movw	r30, r28
    289c:	e1 56       	subi	r30, 0x61	; 97
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	91 81       	ldd	r25, Z+1	; 0x01
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	11 96       	adiw	r26, 0x01	; 1
    28a8:	9c 93       	st	X, r25
    28aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e1 56       	subi	r30, 0x61	; 97
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	80 81       	ld	r24, Z
    28b4:	91 81       	ldd	r25, Z+1	; 0x01
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	d1 f6       	brne	.-76     	; 0x286e <main+0x24a>
    28ba:	27 c0       	rjmp	.+78     	; 0x290a <main+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	8e 01       	movw	r16, r28
    28be:	01 56       	subi	r16, 0x61	; 97
    28c0:	1f 4f       	sbci	r17, 0xFF	; 255
    28c2:	fe 01       	movw	r30, r28
    28c4:	ef 55       	subi	r30, 0x5F	; 95
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	60 81       	ld	r22, Z
    28ca:	71 81       	ldd	r23, Z+1	; 0x01
    28cc:	82 81       	ldd	r24, Z+2	; 0x02
    28ce:	93 81       	ldd	r25, Z+3	; 0x03
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	f8 01       	movw	r30, r16
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    28de:	de 01       	movw	r26, r28
    28e0:	a5 56       	subi	r26, 0x65	; 101
    28e2:	bf 4f       	sbci	r27, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	e1 56       	subi	r30, 0x61	; 97
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	8d 93       	st	X+, r24
    28f0:	9c 93       	st	X, r25
    28f2:	fe 01       	movw	r30, r28
    28f4:	e5 56       	subi	r30, 0x65	; 101
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <main+0x2d8>
    2900:	fe 01       	movw	r30, r28
    2902:	e5 56       	subi	r30, 0x65	; 101
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
							_delay_ms(1000);
							/*Go To Pass Check Function*/
							Pass_Check();
    290a:	ce 01       	movw	r24, r28
    290c:	8f 54       	subi	r24, 0x4F	; 79
    290e:	9f 4f       	sbci	r25, 0xFF	; 255
    2910:	1c 01       	movw	r2, r24
    2912:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>
    2916:	c1 c0       	rjmp	.+386    	; 0x2a9a <main+0x476>
						}
						/*If Incorrect Password*/
						else if(Pas==2)
    2918:	fe 01       	movw	r30, r28
    291a:	e0 55       	subi	r30, 0x50	; 80
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	82 30       	cpi	r24, 0x02	; 2
    2922:	09 f0       	breq	.+2      	; 0x2926 <main+0x302>
    2924:	ba c0       	rjmp	.+372    	; 0x2a9a <main+0x476>
						{
							HLCD_VoidSendCommand(0x01);
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSendString("Wrong Pass ");
    292c:	8b e7       	ldi	r24, 0x7B	; 123
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    2934:	fe 01       	movw	r30, r28
    2936:	e9 56       	subi	r30, 0x69	; 105
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	aa e7       	ldi	r26, 0x7A	; 122
    2940:	b4 e4       	ldi	r27, 0x44	; 68
    2942:	80 83       	st	Z, r24
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	a2 83       	std	Z+2, r26	; 0x02
    2948:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294a:	8e 01       	movw	r16, r28
    294c:	0d 56       	subi	r16, 0x6D	; 109
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e9 56       	subi	r30, 0x69	; 105
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4a ef       	ldi	r20, 0xFA	; 250
    2964:	54 e4       	ldi	r21, 0x44	; 68
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	80 83       	st	Z, r24
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	a2 83       	std	Z+2, r26	; 0x02
    2976:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2978:	fe 01       	movw	r30, r28
    297a:	ed 56       	subi	r30, 0x6D	; 109
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	44 f4       	brge	.+16     	; 0x29a6 <main+0x382>
		__ticks = 1;
    2996:	fe 01       	movw	r30, r28
    2998:	ef 56       	subi	r30, 0x6F	; 111
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
    29a4:	64 c0       	rjmp	.+200    	; 0x2a6e <main+0x44a>
	else if (__tmp > 65535)
    29a6:	fe 01       	movw	r30, r28
    29a8:	ed 56       	subi	r30, 0x6D	; 109
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	3f ef       	ldi	r19, 0xFF	; 255
    29b8:	4f e7       	ldi	r20, 0x7F	; 127
    29ba:	57 e4       	ldi	r21, 0x47	; 71
    29bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29c0:	18 16       	cp	r1, r24
    29c2:	0c f0       	brlt	.+2      	; 0x29c6 <main+0x3a2>
    29c4:	43 c0       	rjmp	.+134    	; 0x2a4c <main+0x428>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29c6:	fe 01       	movw	r30, r28
    29c8:	e9 56       	subi	r30, 0x69	; 105
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	60 81       	ld	r22, Z
    29ce:	71 81       	ldd	r23, Z+1	; 0x01
    29d0:	82 81       	ldd	r24, Z+2	; 0x02
    29d2:	93 81       	ldd	r25, Z+3	; 0x03
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e2       	ldi	r20, 0x20	; 32
    29da:	51 e4       	ldi	r21, 0x41	; 65
    29dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	8e 01       	movw	r16, r28
    29e6:	0f 56       	subi	r16, 0x6F	; 111
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	bc 01       	movw	r22, r24
    29ec:	cd 01       	movw	r24, r26
    29ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	f8 01       	movw	r30, r16
    29f8:	91 83       	std	Z+1, r25	; 0x01
    29fa:	80 83       	st	Z, r24
    29fc:	1f c0       	rjmp	.+62     	; 0x2a3c <main+0x418>
    29fe:	fe 01       	movw	r30, r28
    2a00:	e1 57       	subi	r30, 0x71	; 113
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	88 ec       	ldi	r24, 0xC8	; 200
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e1 57       	subi	r30, 0x71	; 113
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <main+0x3f2>
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e1 57       	subi	r30, 0x71	; 113
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	91 83       	std	Z+1, r25	; 0x01
    2a22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	de 01       	movw	r26, r28
    2a26:	af 56       	subi	r26, 0x6F	; 111
    2a28:	bf 4f       	sbci	r27, 0xFF	; 255
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ef 56       	subi	r30, 0x6F	; 111
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	11 96       	adiw	r26, 0x01	; 1
    2a38:	9c 93       	st	X, r25
    2a3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ef 56       	subi	r30, 0x6F	; 111
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	d1 f6       	brne	.-76     	; 0x29fe <main+0x3da>
    2a4a:	27 c0       	rjmp	.+78     	; 0x2a9a <main+0x476>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	0f 56       	subi	r16, 0x6F	; 111
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	fe 01       	movw	r30, r28
    2a54:	ed 56       	subi	r30, 0x6D	; 109
    2a56:	ff 4f       	sbci	r31, 0xFF	; 255
    2a58:	60 81       	ld	r22, Z
    2a5a:	71 81       	ldd	r23, Z+1	; 0x01
    2a5c:	82 81       	ldd	r24, Z+2	; 0x02
    2a5e:	93 81       	ldd	r25, Z+3	; 0x03
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	f8 01       	movw	r30, r16
    2a6a:	91 83       	std	Z+1, r25	; 0x01
    2a6c:	80 83       	st	Z, r24
    2a6e:	de 01       	movw	r26, r28
    2a70:	a3 57       	subi	r26, 0x73	; 115
    2a72:	bf 4f       	sbci	r27, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	ef 56       	subi	r30, 0x6F	; 111
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	8d 93       	st	X+, r24
    2a80:	9c 93       	st	X, r25
    2a82:	fe 01       	movw	r30, r28
    2a84:	e3 57       	subi	r30, 0x73	; 115
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <main+0x468>
    2a90:	fe 01       	movw	r30, r28
    2a92:	e3 57       	subi	r30, 0x73	; 115
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	91 83       	std	Z+1, r25	; 0x01
    2a98:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
					HLCD_VoidSetPostion(0,0);
					/*Go To Pass Check Function*/
					Pass_Check();

					for(Pas=0;Pas<2;Pas++)
    2a9a:	de 01       	movw	r26, r28
    2a9c:	a0 55       	subi	r26, 0x50	; 80
    2a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e0 55       	subi	r30, 0x50	; 80
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	8f 5f       	subi	r24, 0xFF	; 255
    2aaa:	8c 93       	st	X, r24
    2aac:	fe 01       	movw	r30, r28
    2aae:	e0 55       	subi	r30, 0x50	; 80
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	80 81       	ld	r24, Z
    2ab4:	82 30       	cpi	r24, 0x02	; 2
    2ab6:	08 f4       	brcc	.+2      	; 0x2aba <main+0x496>
    2ab8:	30 ce       	rjmp	.-928    	; 0x271a <main+0xf6>
    2aba:	78 c6       	rjmp	.+3312   	; 0x37ac <main+0x1188>




				/*get secound user */
				else if(IDTrue[0]=='2'&&IDTrue[1]=='0'&&IDTrue[2]=='0'&&IDTrue[3]=='0')
    2abc:	fe 01       	movw	r30, r28
    2abe:	ef 54       	subi	r30, 0x4F	; 79
    2ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac2:	80 81       	ld	r24, Z
    2ac4:	91 81       	ldd	r25, Z+1	; 0x01
    2ac6:	82 33       	cpi	r24, 0x32	; 50
    2ac8:	91 05       	cpc	r25, r1
    2aca:	09 f0       	breq	.+2      	; 0x2ace <main+0x4aa>
    2acc:	ff c1       	rjmp	.+1022   	; 0x2ecc <main+0x8a8>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ef 54       	subi	r30, 0x4F	; 79
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	82 81       	ldd	r24, Z+2	; 0x02
    2ad6:	93 81       	ldd	r25, Z+3	; 0x03
    2ad8:	80 33       	cpi	r24, 0x30	; 48
    2ada:	91 05       	cpc	r25, r1
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <main+0x4bc>
    2ade:	f6 c1       	rjmp	.+1004   	; 0x2ecc <main+0x8a8>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	ef 54       	subi	r30, 0x4F	; 79
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	84 81       	ldd	r24, Z+4	; 0x04
    2ae8:	95 81       	ldd	r25, Z+5	; 0x05
    2aea:	80 33       	cpi	r24, 0x30	; 48
    2aec:	91 05       	cpc	r25, r1
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <main+0x4ce>
    2af0:	ed c1       	rjmp	.+986    	; 0x2ecc <main+0x8a8>
    2af2:	fe 01       	movw	r30, r28
    2af4:	ef 54       	subi	r30, 0x4F	; 79
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	86 81       	ldd	r24, Z+6	; 0x06
    2afa:	97 81       	ldd	r25, Z+7	; 0x07
    2afc:	80 33       	cpi	r24, 0x30	; 48
    2afe:	91 05       	cpc	r25, r1
    2b00:	09 f0       	breq	.+2      	; 0x2b04 <main+0x4e0>
    2b02:	e4 c1       	rjmp	.+968    	; 0x2ecc <main+0x8a8>
				{
					y=4; //For Exit For Loop
    2b04:	fe 01       	movw	r30, r28
    2b06:	e1 55       	subi	r30, 0x51	; 81
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	84 e0       	ldi	r24, 0x04	; 4
    2b0c:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
    2b0e:	81 e0       	ldi	r24, 0x01	; 1
    2b10:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,0);
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	60 e0       	ldi	r22, 0x00	; 0
    2b18:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					/*Go To Pass Check Function*/
					Pass_Check();
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	8f 54       	subi	r24, 0x4F	; 79
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	1c 01       	movw	r2, r24
    2b24:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>

					for(Pas=0;Pas<2;Pas++)
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e0 55       	subi	r30, 0x50	; 80
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	10 82       	st	Z, r1
    2b30:	c5 c1       	rjmp	.+906    	; 0x2ebc <main+0x898>
					{
						/*If Correct Password*/
						if(PassTrue[0]=='5'&&PassTrue[1]=='0'&&PassTrue[2]=='0'&&PassTrue[3]=='0')
    2b32:	fe 01       	movw	r30, r28
    2b34:	ef 54       	subi	r30, 0x4F	; 79
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	87 81       	ldd	r24, Z+7	; 0x07
    2b3a:	90 85       	ldd	r25, Z+8	; 0x08
    2b3c:	85 33       	cpi	r24, 0x35	; 53
    2b3e:	91 05       	cpc	r25, r1
    2b40:	79 f5       	brne	.+94     	; 0x2ba0 <main+0x57c>
    2b42:	fe 01       	movw	r30, r28
    2b44:	ef 54       	subi	r30, 0x4F	; 79
    2b46:	ff 4f       	sbci	r31, 0xFF	; 255
    2b48:	81 85       	ldd	r24, Z+9	; 0x09
    2b4a:	92 85       	ldd	r25, Z+10	; 0x0a
    2b4c:	80 33       	cpi	r24, 0x30	; 48
    2b4e:	91 05       	cpc	r25, r1
    2b50:	39 f5       	brne	.+78     	; 0x2ba0 <main+0x57c>
    2b52:	fe 01       	movw	r30, r28
    2b54:	ef 54       	subi	r30, 0x4F	; 79
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	83 85       	ldd	r24, Z+11	; 0x0b
    2b5a:	94 85       	ldd	r25, Z+12	; 0x0c
    2b5c:	80 33       	cpi	r24, 0x30	; 48
    2b5e:	91 05       	cpc	r25, r1
    2b60:	f9 f4       	brne	.+62     	; 0x2ba0 <main+0x57c>
    2b62:	fe 01       	movw	r30, r28
    2b64:	ef 54       	subi	r30, 0x4F	; 79
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	85 85       	ldd	r24, Z+13	; 0x0d
    2b6a:	96 85       	ldd	r25, Z+14	; 0x0e
    2b6c:	80 33       	cpi	r24, 0x30	; 48
    2b6e:	91 05       	cpc	r25, r1
    2b70:	b9 f4       	brne	.+46     	; 0x2ba0 <main+0x57c>
						{
							Login_Trial=True;
    2b72:	81 e0       	ldi	r24, 0x01	; 1
    2b74:	80 93 3d 01 	sts	0x013D, r24
							Pas=2; //For Exit For Loop
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e0 55       	subi	r30, 0x50	; 80
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	82 e0       	ldi	r24, 0x02	; 2
    2b80:	80 83       	st	Z, r24
							HLCD_VoidSendCommand(0x01);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSetPostion(0,6);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	66 e0       	ldi	r22, 0x06	; 6
    2b8c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
							HLCD_VoidSendString("HELLO");
    2b90:	87 e8       	ldi	r24, 0x87	; 135
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
							Login_state=IN;
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	80 93 3f 01 	sts	0x013F, r24
    2b9e:	85 c1       	rjmp	.+778    	; 0x2eaa <main+0x886>
						}
						/*If Incorrect Password*/
						else if(Pas<2)
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e0 55       	subi	r30, 0x50	; 80
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	80 81       	ld	r24, Z
    2ba8:	82 30       	cpi	r24, 0x02	; 2
    2baa:	08 f0       	brcs	.+2      	; 0x2bae <main+0x58a>
    2bac:	bd c0       	rjmp	.+378    	; 0x2d28 <main+0x704>
						{
							HLCD_VoidSendCommand(0x01);
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e7 57       	subi	r30, 0x77	; 119
    2bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	aa e7       	ldi	r26, 0x7A	; 122
    2bc0:	b4 e4       	ldi	r27, 0x44	; 68
    2bc2:	80 83       	st	Z, r24
    2bc4:	91 83       	std	Z+1, r25	; 0x01
    2bc6:	a2 83       	std	Z+2, r26	; 0x02
    2bc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	8e 01       	movw	r16, r28
    2bcc:	0b 57       	subi	r16, 0x7B	; 123
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e7 57       	subi	r30, 0x77	; 119
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	f8 01       	movw	r30, r16
    2bf0:	80 83       	st	Z, r24
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	a2 83       	std	Z+2, r26	; 0x02
    2bf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	eb 57       	subi	r30, 0x7B	; 123
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e8       	ldi	r20, 0x80	; 128
    2c0c:	5f e3       	ldi	r21, 0x3F	; 63
    2c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	44 f4       	brge	.+16     	; 0x2c26 <main+0x602>
		__ticks = 1;
    2c16:	fe 01       	movw	r30, r28
    2c18:	ed 57       	subi	r30, 0x7D	; 125
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	91 83       	std	Z+1, r25	; 0x01
    2c22:	80 83       	st	Z, r24
    2c24:	64 c0       	rjmp	.+200    	; 0x2cee <main+0x6ca>
	else if (__tmp > 65535)
    2c26:	fe 01       	movw	r30, r28
    2c28:	eb 57       	subi	r30, 0x7B	; 123
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	60 81       	ld	r22, Z
    2c2e:	71 81       	ldd	r23, Z+1	; 0x01
    2c30:	82 81       	ldd	r24, Z+2	; 0x02
    2c32:	93 81       	ldd	r25, Z+3	; 0x03
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	3f ef       	ldi	r19, 0xFF	; 255
    2c38:	4f e7       	ldi	r20, 0x7F	; 127
    2c3a:	57 e4       	ldi	r21, 0x47	; 71
    2c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c40:	18 16       	cp	r1, r24
    2c42:	0c f0       	brlt	.+2      	; 0x2c46 <main+0x622>
    2c44:	43 c0       	rjmp	.+134    	; 0x2ccc <main+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c46:	fe 01       	movw	r30, r28
    2c48:	e7 57       	subi	r30, 0x77	; 119
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	60 81       	ld	r22, Z
    2c4e:	71 81       	ldd	r23, Z+1	; 0x01
    2c50:	82 81       	ldd	r24, Z+2	; 0x02
    2c52:	93 81       	ldd	r25, Z+3	; 0x03
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e2       	ldi	r20, 0x20	; 32
    2c5a:	51 e4       	ldi	r21, 0x41	; 65
    2c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	8e 01       	movw	r16, r28
    2c66:	0d 57       	subi	r16, 0x7D	; 125
    2c68:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	f8 01       	movw	r30, r16
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
    2c7c:	1f c0       	rjmp	.+62     	; 0x2cbc <main+0x698>
    2c7e:	fe 01       	movw	r30, r28
    2c80:	ef 57       	subi	r30, 0x7F	; 127
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	88 ec       	ldi	r24, 0xC8	; 200
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	ef 57       	subi	r30, 0x7F	; 127
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <main+0x672>
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ef 57       	subi	r30, 0x7F	; 127
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca4:	de 01       	movw	r26, r28
    2ca6:	ad 57       	subi	r26, 0x7D	; 125
    2ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	ed 57       	subi	r30, 0x7D	; 125
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	80 81       	ld	r24, Z
    2cb2:	91 81       	ldd	r25, Z+1	; 0x01
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	11 96       	adiw	r26, 0x01	; 1
    2cb8:	9c 93       	st	X, r25
    2cba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	ed 57       	subi	r30, 0x7D	; 125
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	d1 f6       	brne	.-76     	; 0x2c7e <main+0x65a>
    2cca:	27 c0       	rjmp	.+78     	; 0x2d1a <main+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ccc:	8e 01       	movw	r16, r28
    2cce:	0d 57       	subi	r16, 0x7D	; 125
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	eb 57       	subi	r30, 0x7B	; 123
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	f8 01       	movw	r30, r16
    2cea:	91 83       	std	Z+1, r25	; 0x01
    2cec:	80 83       	st	Z, r24
    2cee:	de 01       	movw	r26, r28
    2cf0:	a1 58       	subi	r26, 0x81	; 129
    2cf2:	bf 4f       	sbci	r27, 0xFF	; 255
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	ed 57       	subi	r30, 0x7D	; 125
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	8d 93       	st	X+, r24
    2d00:	9c 93       	st	X, r25
    2d02:	fe 01       	movw	r30, r28
    2d04:	e1 58       	subi	r30, 0x81	; 129
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	80 81       	ld	r24, Z
    2d0a:	91 81       	ldd	r25, Z+1	; 0x01
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <main+0x6e8>
    2d10:	fe 01       	movw	r30, r28
    2d12:	e1 58       	subi	r30, 0x81	; 129
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
							//HLCD_VoidSendString("Wrong Pass Try Again");
							_delay_ms(1000);
							/*Go To Pass Check Function*/
							Pass_Check();
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	8f 54       	subi	r24, 0x4F	; 79
    2d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d20:	1c 01       	movw	r2, r24
    2d22:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>
    2d26:	c1 c0       	rjmp	.+386    	; 0x2eaa <main+0x886>
						}
						/*If Incorrect Password*/
						else if(Pas==2)
    2d28:	fe 01       	movw	r30, r28
    2d2a:	e0 55       	subi	r30, 0x50	; 80
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	80 81       	ld	r24, Z
    2d30:	82 30       	cpi	r24, 0x02	; 2
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <main+0x712>
    2d34:	ba c0       	rjmp	.+372    	; 0x2eaa <main+0x886>
						{
							HLCD_VoidSendCommand(0x01);
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSendString("Wrong Pass ");
    2d3c:	8b e7       	ldi	r24, 0x7B	; 123
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    2d44:	fe 01       	movw	r30, r28
    2d46:	e5 58       	subi	r30, 0x85	; 133
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	aa e7       	ldi	r26, 0x7A	; 122
    2d50:	b4 e4       	ldi	r27, 0x44	; 68
    2d52:	80 83       	st	Z, r24
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	a2 83       	std	Z+2, r26	; 0x02
    2d58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	8e 01       	movw	r16, r28
    2d5c:	09 58       	subi	r16, 0x89	; 137
    2d5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d60:	fe 01       	movw	r30, r28
    2d62:	e5 58       	subi	r30, 0x85	; 133
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	4a ef       	ldi	r20, 0xFA	; 250
    2d74:	54 e4       	ldi	r21, 0x44	; 68
    2d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	f8 01       	movw	r30, r16
    2d80:	80 83       	st	Z, r24
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	a2 83       	std	Z+2, r26	; 0x02
    2d86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e9 58       	subi	r30, 0x89	; 137
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	60 81       	ld	r22, Z
    2d90:	71 81       	ldd	r23, Z+1	; 0x01
    2d92:	82 81       	ldd	r24, Z+2	; 0x02
    2d94:	93 81       	ldd	r25, Z+3	; 0x03
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	40 e8       	ldi	r20, 0x80	; 128
    2d9c:	5f e3       	ldi	r21, 0x3F	; 63
    2d9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da2:	88 23       	and	r24, r24
    2da4:	44 f4       	brge	.+16     	; 0x2db6 <main+0x792>
		__ticks = 1;
    2da6:	fe 01       	movw	r30, r28
    2da8:	eb 58       	subi	r30, 0x8B	; 139
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	91 83       	std	Z+1, r25	; 0x01
    2db2:	80 83       	st	Z, r24
    2db4:	64 c0       	rjmp	.+200    	; 0x2e7e <main+0x85a>
	else if (__tmp > 65535)
    2db6:	fe 01       	movw	r30, r28
    2db8:	e9 58       	subi	r30, 0x89	; 137
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	3f ef       	ldi	r19, 0xFF	; 255
    2dc8:	4f e7       	ldi	r20, 0x7F	; 127
    2dca:	57 e4       	ldi	r21, 0x47	; 71
    2dcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd0:	18 16       	cp	r1, r24
    2dd2:	0c f0       	brlt	.+2      	; 0x2dd6 <main+0x7b2>
    2dd4:	43 c0       	rjmp	.+134    	; 0x2e5c <main+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e5 58       	subi	r30, 0x85	; 133
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	60 81       	ld	r22, Z
    2dde:	71 81       	ldd	r23, Z+1	; 0x01
    2de0:	82 81       	ldd	r24, Z+2	; 0x02
    2de2:	93 81       	ldd	r25, Z+3	; 0x03
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	40 e2       	ldi	r20, 0x20	; 32
    2dea:	51 e4       	ldi	r21, 0x41	; 65
    2dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	8e 01       	movw	r16, r28
    2df6:	0b 58       	subi	r16, 0x8B	; 139
    2df8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dfa:	bc 01       	movw	r22, r24
    2dfc:	cd 01       	movw	r24, r26
    2dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	f8 01       	movw	r30, r16
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
    2e0c:	1f c0       	rjmp	.+62     	; 0x2e4c <main+0x828>
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ed 58       	subi	r30, 0x8D	; 141
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	88 ec       	ldi	r24, 0xC8	; 200
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	91 83       	std	Z+1, r25	; 0x01
    2e1a:	80 83       	st	Z, r24
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ed 58       	subi	r30, 0x8D	; 141
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <main+0x802>
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ed 58       	subi	r30, 0x8D	; 141
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e34:	de 01       	movw	r26, r28
    2e36:	ab 58       	subi	r26, 0x8B	; 139
    2e38:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	eb 58       	subi	r30, 0x8B	; 139
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 81       	ld	r24, Z
    2e42:	91 81       	ldd	r25, Z+1	; 0x01
    2e44:	01 97       	sbiw	r24, 0x01	; 1
    2e46:	11 96       	adiw	r26, 0x01	; 1
    2e48:	9c 93       	st	X, r25
    2e4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	eb 58       	subi	r30, 0x8B	; 139
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	00 97       	sbiw	r24, 0x00	; 0
    2e58:	d1 f6       	brne	.-76     	; 0x2e0e <main+0x7ea>
    2e5a:	27 c0       	rjmp	.+78     	; 0x2eaa <main+0x886>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5c:	8e 01       	movw	r16, r28
    2e5e:	0b 58       	subi	r16, 0x8B	; 139
    2e60:	1f 4f       	sbci	r17, 0xFF	; 255
    2e62:	fe 01       	movw	r30, r28
    2e64:	e9 58       	subi	r30, 0x89	; 137
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
    2e7e:	de 01       	movw	r26, r28
    2e80:	af 58       	subi	r26, 0x8F	; 143
    2e82:	bf 4f       	sbci	r27, 0xFF	; 255
    2e84:	fe 01       	movw	r30, r28
    2e86:	eb 58       	subi	r30, 0x8B	; 139
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	80 81       	ld	r24, Z
    2e8c:	91 81       	ldd	r25, Z+1	; 0x01
    2e8e:	8d 93       	st	X+, r24
    2e90:	9c 93       	st	X, r25
    2e92:	fe 01       	movw	r30, r28
    2e94:	ef 58       	subi	r30, 0x8F	; 143
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <main+0x878>
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ef 58       	subi	r30, 0x8F	; 143
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	91 83       	std	Z+1, r25	; 0x01
    2ea8:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
					HLCD_VoidSetPostion(0,0);
					/*Go To Pass Check Function*/
					Pass_Check();

					for(Pas=0;Pas<2;Pas++)
    2eaa:	de 01       	movw	r26, r28
    2eac:	a0 55       	subi	r26, 0x50	; 80
    2eae:	bf 4f       	sbci	r27, 0xFF	; 255
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e0 55       	subi	r30, 0x50	; 80
    2eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb6:	80 81       	ld	r24, Z
    2eb8:	8f 5f       	subi	r24, 0xFF	; 255
    2eba:	8c 93       	st	X, r24
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e0 55       	subi	r30, 0x50	; 80
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	80 81       	ld	r24, Z
    2ec4:	82 30       	cpi	r24, 0x02	; 2
    2ec6:	08 f4       	brcc	.+2      	; 0x2eca <main+0x8a6>
    2ec8:	34 ce       	rjmp	.-920    	; 0x2b32 <main+0x50e>
    2eca:	70 c4       	rjmp	.+2272   	; 0x37ac <main+0x1188>




				/*get third user */
				else if(IDTrue[0]=='6'&&IDTrue[1]=='0'&&IDTrue[2]=='0'&&IDTrue[3]=='0')
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ef 54       	subi	r30, 0x4F	; 79
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	86 33       	cpi	r24, 0x36	; 54
    2ed8:	91 05       	cpc	r25, r1
    2eda:	09 f0       	breq	.+2      	; 0x2ede <main+0x8ba>
    2edc:	03 c2       	rjmp	.+1030   	; 0x32e4 <main+0xcc0>
    2ede:	fe 01       	movw	r30, r28
    2ee0:	ef 54       	subi	r30, 0x4F	; 79
    2ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee4:	82 81       	ldd	r24, Z+2	; 0x02
    2ee6:	93 81       	ldd	r25, Z+3	; 0x03
    2ee8:	80 33       	cpi	r24, 0x30	; 48
    2eea:	91 05       	cpc	r25, r1
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <main+0x8cc>
    2eee:	fa c1       	rjmp	.+1012   	; 0x32e4 <main+0xcc0>
    2ef0:	fe 01       	movw	r30, r28
    2ef2:	ef 54       	subi	r30, 0x4F	; 79
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef6:	84 81       	ldd	r24, Z+4	; 0x04
    2ef8:	95 81       	ldd	r25, Z+5	; 0x05
    2efa:	80 33       	cpi	r24, 0x30	; 48
    2efc:	91 05       	cpc	r25, r1
    2efe:	09 f0       	breq	.+2      	; 0x2f02 <main+0x8de>
    2f00:	f1 c1       	rjmp	.+994    	; 0x32e4 <main+0xcc0>
    2f02:	fe 01       	movw	r30, r28
    2f04:	ef 54       	subi	r30, 0x4F	; 79
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	86 81       	ldd	r24, Z+6	; 0x06
    2f0a:	97 81       	ldd	r25, Z+7	; 0x07
    2f0c:	80 33       	cpi	r24, 0x30	; 48
    2f0e:	91 05       	cpc	r25, r1
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <main+0x8f0>
    2f12:	e8 c1       	rjmp	.+976    	; 0x32e4 <main+0xcc0>
				{
					y=4; //For Exit For Loop
    2f14:	fe 01       	movw	r30, r28
    2f16:	e1 55       	subi	r30, 0x51	; 81
    2f18:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1a:	84 e0       	ldi	r24, 0x04	; 4
    2f1c:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,0);
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					/*Go To Pass Check Function*/
					Pass_Check();
    2f2c:	ce 01       	movw	r24, r28
    2f2e:	8f 54       	subi	r24, 0x4F	; 79
    2f30:	9f 4f       	sbci	r25, 0xFF	; 255
    2f32:	1c 01       	movw	r2, r24
    2f34:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>

					for(Pas=0;Pas<2;Pas++)
    2f38:	fe 01       	movw	r30, r28
    2f3a:	e0 55       	subi	r30, 0x50	; 80
    2f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3e:	10 82       	st	Z, r1
    2f40:	c9 c1       	rjmp	.+914    	; 0x32d4 <main+0xcb0>
					{
						/*If Correct Password*/
						if(PassTrue[0]=='8'&&PassTrue[1]=='0'&&PassTrue[2]=='0'&&PassTrue[3]=='0')
    2f42:	fe 01       	movw	r30, r28
    2f44:	ef 54       	subi	r30, 0x4F	; 79
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	87 81       	ldd	r24, Z+7	; 0x07
    2f4a:	90 85       	ldd	r25, Z+8	; 0x08
    2f4c:	88 33       	cpi	r24, 0x38	; 56
    2f4e:	91 05       	cpc	r25, r1
    2f50:	79 f5       	brne	.+94     	; 0x2fb0 <main+0x98c>
    2f52:	fe 01       	movw	r30, r28
    2f54:	ef 54       	subi	r30, 0x4F	; 79
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	81 85       	ldd	r24, Z+9	; 0x09
    2f5a:	92 85       	ldd	r25, Z+10	; 0x0a
    2f5c:	80 33       	cpi	r24, 0x30	; 48
    2f5e:	91 05       	cpc	r25, r1
    2f60:	39 f5       	brne	.+78     	; 0x2fb0 <main+0x98c>
    2f62:	fe 01       	movw	r30, r28
    2f64:	ef 54       	subi	r30, 0x4F	; 79
    2f66:	ff 4f       	sbci	r31, 0xFF	; 255
    2f68:	83 85       	ldd	r24, Z+11	; 0x0b
    2f6a:	94 85       	ldd	r25, Z+12	; 0x0c
    2f6c:	80 33       	cpi	r24, 0x30	; 48
    2f6e:	91 05       	cpc	r25, r1
    2f70:	f9 f4       	brne	.+62     	; 0x2fb0 <main+0x98c>
    2f72:	fe 01       	movw	r30, r28
    2f74:	ef 54       	subi	r30, 0x4F	; 79
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	85 85       	ldd	r24, Z+13	; 0x0d
    2f7a:	96 85       	ldd	r25, Z+14	; 0x0e
    2f7c:	80 33       	cpi	r24, 0x30	; 48
    2f7e:	91 05       	cpc	r25, r1
    2f80:	b9 f4       	brne	.+46     	; 0x2fb0 <main+0x98c>
						{
							Login_Trial=True;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	80 93 3d 01 	sts	0x013D, r24
							Pas=2; //For Exit For Loop
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e0 55       	subi	r30, 0x50	; 80
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	80 83       	st	Z, r24
							HLCD_VoidSendCommand(0x01);
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSetPostion(0,4);
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	64 e0       	ldi	r22, 0x04	; 4
    2f9c:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
							HLCD_VoidSendString("HELLO");
    2fa0:	87 e8       	ldi	r24, 0x87	; 135
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
							Login_state=IN;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	80 93 3f 01 	sts	0x013F, r24
    2fae:	89 c1       	rjmp	.+786    	; 0x32c2 <main+0xc9e>
						}
						/*If Incorrect Password*/
						else if(Pas<2)
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	e0 55       	subi	r30, 0x50	; 80
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	82 30       	cpi	r24, 0x02	; 2
    2fba:	08 f0       	brcs	.+2      	; 0x2fbe <main+0x99a>
    2fbc:	c1 c0       	rjmp	.+386    	; 0x3140 <main+0xb1c>
						{
							HLCD_VoidSendCommand(0x01);
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSendString("Wrong Pass Try Again");
    2fc4:	86 e6       	ldi	r24, 0x66	; 102
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    2fcc:	fe 01       	movw	r30, r28
    2fce:	e3 59       	subi	r30, 0x93	; 147
    2fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	aa e7       	ldi	r26, 0x7A	; 122
    2fd8:	b4 e4       	ldi	r27, 0x44	; 68
    2fda:	80 83       	st	Z, r24
    2fdc:	91 83       	std	Z+1, r25	; 0x01
    2fde:	a2 83       	std	Z+2, r26	; 0x02
    2fe0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe2:	8e 01       	movw	r16, r28
    2fe4:	07 59       	subi	r16, 0x97	; 151
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
    2fe8:	fe 01       	movw	r30, r28
    2fea:	e3 59       	subi	r30, 0x93	; 147
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	60 81       	ld	r22, Z
    2ff0:	71 81       	ldd	r23, Z+1	; 0x01
    2ff2:	82 81       	ldd	r24, Z+2	; 0x02
    2ff4:	93 81       	ldd	r25, Z+3	; 0x03
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	4a ef       	ldi	r20, 0xFA	; 250
    2ffc:	54 e4       	ldi	r21, 0x44	; 68
    2ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	f8 01       	movw	r30, r16
    3008:	80 83       	st	Z, r24
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	a2 83       	std	Z+2, r26	; 0x02
    300e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3010:	fe 01       	movw	r30, r28
    3012:	e7 59       	subi	r30, 0x97	; 151
    3014:	ff 4f       	sbci	r31, 0xFF	; 255
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	44 f4       	brge	.+16     	; 0x303e <main+0xa1a>
		__ticks = 1;
    302e:	fe 01       	movw	r30, r28
    3030:	e9 59       	subi	r30, 0x99	; 153
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	80 83       	st	Z, r24
    303c:	64 c0       	rjmp	.+200    	; 0x3106 <main+0xae2>
	else if (__tmp > 65535)
    303e:	fe 01       	movw	r30, r28
    3040:	e7 59       	subi	r30, 0x97	; 151
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	60 81       	ld	r22, Z
    3046:	71 81       	ldd	r23, Z+1	; 0x01
    3048:	82 81       	ldd	r24, Z+2	; 0x02
    304a:	93 81       	ldd	r25, Z+3	; 0x03
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	3f ef       	ldi	r19, 0xFF	; 255
    3050:	4f e7       	ldi	r20, 0x7F	; 127
    3052:	57 e4       	ldi	r21, 0x47	; 71
    3054:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3058:	18 16       	cp	r1, r24
    305a:	0c f0       	brlt	.+2      	; 0x305e <main+0xa3a>
    305c:	43 c0       	rjmp	.+134    	; 0x30e4 <main+0xac0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    305e:	fe 01       	movw	r30, r28
    3060:	e3 59       	subi	r30, 0x93	; 147
    3062:	ff 4f       	sbci	r31, 0xFF	; 255
    3064:	60 81       	ld	r22, Z
    3066:	71 81       	ldd	r23, Z+1	; 0x01
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	93 81       	ldd	r25, Z+3	; 0x03
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e2       	ldi	r20, 0x20	; 32
    3072:	51 e4       	ldi	r21, 0x41	; 65
    3074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	8e 01       	movw	r16, r28
    307e:	09 59       	subi	r16, 0x99	; 153
    3080:	1f 4f       	sbci	r17, 0xFF	; 255
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	f8 01       	movw	r30, r16
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	80 83       	st	Z, r24
    3094:	1f c0       	rjmp	.+62     	; 0x30d4 <main+0xab0>
    3096:	fe 01       	movw	r30, r28
    3098:	eb 59       	subi	r30, 0x9B	; 155
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	88 ec       	ldi	r24, 0xC8	; 200
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
    30a4:	fe 01       	movw	r30, r28
    30a6:	eb 59       	subi	r30, 0x9B	; 155
    30a8:	ff 4f       	sbci	r31, 0xFF	; 255
    30aa:	80 81       	ld	r24, Z
    30ac:	91 81       	ldd	r25, Z+1	; 0x01
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <main+0xa8a>
    30b2:	fe 01       	movw	r30, r28
    30b4:	eb 59       	subi	r30, 0x9B	; 155
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	91 83       	std	Z+1, r25	; 0x01
    30ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30bc:	de 01       	movw	r26, r28
    30be:	a9 59       	subi	r26, 0x99	; 153
    30c0:	bf 4f       	sbci	r27, 0xFF	; 255
    30c2:	fe 01       	movw	r30, r28
    30c4:	e9 59       	subi	r30, 0x99	; 153
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	80 81       	ld	r24, Z
    30ca:	91 81       	ldd	r25, Z+1	; 0x01
    30cc:	01 97       	sbiw	r24, 0x01	; 1
    30ce:	11 96       	adiw	r26, 0x01	; 1
    30d0:	9c 93       	st	X, r25
    30d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d4:	fe 01       	movw	r30, r28
    30d6:	e9 59       	subi	r30, 0x99	; 153
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	d1 f6       	brne	.-76     	; 0x3096 <main+0xa72>
    30e2:	27 c0       	rjmp	.+78     	; 0x3132 <main+0xb0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e4:	8e 01       	movw	r16, r28
    30e6:	09 59       	subi	r16, 0x99	; 153
    30e8:	1f 4f       	sbci	r17, 0xFF	; 255
    30ea:	fe 01       	movw	r30, r28
    30ec:	e7 59       	subi	r30, 0x97	; 151
    30ee:	ff 4f       	sbci	r31, 0xFF	; 255
    30f0:	60 81       	ld	r22, Z
    30f2:	71 81       	ldd	r23, Z+1	; 0x01
    30f4:	82 81       	ldd	r24, Z+2	; 0x02
    30f6:	93 81       	ldd	r25, Z+3	; 0x03
    30f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	f8 01       	movw	r30, r16
    3102:	91 83       	std	Z+1, r25	; 0x01
    3104:	80 83       	st	Z, r24
    3106:	de 01       	movw	r26, r28
    3108:	ad 59       	subi	r26, 0x9D	; 157
    310a:	bf 4f       	sbci	r27, 0xFF	; 255
    310c:	fe 01       	movw	r30, r28
    310e:	e9 59       	subi	r30, 0x99	; 153
    3110:	ff 4f       	sbci	r31, 0xFF	; 255
    3112:	80 81       	ld	r24, Z
    3114:	91 81       	ldd	r25, Z+1	; 0x01
    3116:	8d 93       	st	X+, r24
    3118:	9c 93       	st	X, r25
    311a:	fe 01       	movw	r30, r28
    311c:	ed 59       	subi	r30, 0x9D	; 157
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	80 81       	ld	r24, Z
    3122:	91 81       	ldd	r25, Z+1	; 0x01
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <main+0xb00>
    3128:	fe 01       	movw	r30, r28
    312a:	ed 59       	subi	r30, 0x9D	; 157
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	91 83       	std	Z+1, r25	; 0x01
    3130:	80 83       	st	Z, r24
							_delay_ms(1000);
							/*Go To Pass Check Function*/
							Pass_Check();
    3132:	ce 01       	movw	r24, r28
    3134:	8f 54       	subi	r24, 0x4F	; 79
    3136:	9f 4f       	sbci	r25, 0xFF	; 255
    3138:	1c 01       	movw	r2, r24
    313a:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>
    313e:	c1 c0       	rjmp	.+386    	; 0x32c2 <main+0xc9e>
						}
						/*If Incorrect Password*/
						else if(Pas==2)
    3140:	fe 01       	movw	r30, r28
    3142:	e0 55       	subi	r30, 0x50	; 80
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	82 30       	cpi	r24, 0x02	; 2
    314a:	09 f0       	breq	.+2      	; 0x314e <main+0xb2a>
    314c:	ba c0       	rjmp	.+372    	; 0x32c2 <main+0xc9e>
						{
							HLCD_VoidSendCommand(0x01);
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSendString("Wrong Pass ");
    3154:	8b e7       	ldi	r24, 0x7B	; 123
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    315c:	fe 01       	movw	r30, r28
    315e:	e1 5a       	subi	r30, 0xA1	; 161
    3160:	ff 4f       	sbci	r31, 0xFF	; 255
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	aa e7       	ldi	r26, 0x7A	; 122
    3168:	b4 e4       	ldi	r27, 0x44	; 68
    316a:	80 83       	st	Z, r24
    316c:	91 83       	std	Z+1, r25	; 0x01
    316e:	a2 83       	std	Z+2, r26	; 0x02
    3170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3172:	8e 01       	movw	r16, r28
    3174:	05 5a       	subi	r16, 0xA5	; 165
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	fe 01       	movw	r30, r28
    317a:	e1 5a       	subi	r30, 0xA1	; 161
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	60 81       	ld	r22, Z
    3180:	71 81       	ldd	r23, Z+1	; 0x01
    3182:	82 81       	ldd	r24, Z+2	; 0x02
    3184:	93 81       	ldd	r25, Z+3	; 0x03
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	4a ef       	ldi	r20, 0xFA	; 250
    318c:	54 e4       	ldi	r21, 0x44	; 68
    318e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	f8 01       	movw	r30, r16
    3198:	80 83       	st	Z, r24
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	a2 83       	std	Z+2, r26	; 0x02
    319e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a0:	fe 01       	movw	r30, r28
    31a2:	e5 5a       	subi	r30, 0xA5	; 165
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	60 81       	ld	r22, Z
    31a8:	71 81       	ldd	r23, Z+1	; 0x01
    31aa:	82 81       	ldd	r24, Z+2	; 0x02
    31ac:	93 81       	ldd	r25, Z+3	; 0x03
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ba:	88 23       	and	r24, r24
    31bc:	44 f4       	brge	.+16     	; 0x31ce <main+0xbaa>
		__ticks = 1;
    31be:	fe 01       	movw	r30, r28
    31c0:	e7 5a       	subi	r30, 0xA7	; 167
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	64 c0       	rjmp	.+200    	; 0x3296 <main+0xc72>
	else if (__tmp > 65535)
    31ce:	fe 01       	movw	r30, r28
    31d0:	e5 5a       	subi	r30, 0xA5	; 165
    31d2:	ff 4f       	sbci	r31, 0xFF	; 255
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	3f ef       	ldi	r19, 0xFF	; 255
    31e0:	4f e7       	ldi	r20, 0x7F	; 127
    31e2:	57 e4       	ldi	r21, 0x47	; 71
    31e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31e8:	18 16       	cp	r1, r24
    31ea:	0c f0       	brlt	.+2      	; 0x31ee <main+0xbca>
    31ec:	43 c0       	rjmp	.+134    	; 0x3274 <main+0xc50>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ee:	fe 01       	movw	r30, r28
    31f0:	e1 5a       	subi	r30, 0xA1	; 161
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	60 81       	ld	r22, Z
    31f6:	71 81       	ldd	r23, Z+1	; 0x01
    31f8:	82 81       	ldd	r24, Z+2	; 0x02
    31fa:	93 81       	ldd	r25, Z+3	; 0x03
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e2       	ldi	r20, 0x20	; 32
    3202:	51 e4       	ldi	r21, 0x41	; 65
    3204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	8e 01       	movw	r16, r28
    320e:	07 5a       	subi	r16, 0xA7	; 167
    3210:	1f 4f       	sbci	r17, 0xFF	; 255
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	f8 01       	movw	r30, r16
    3220:	91 83       	std	Z+1, r25	; 0x01
    3222:	80 83       	st	Z, r24
    3224:	1f c0       	rjmp	.+62     	; 0x3264 <main+0xc40>
    3226:	fe 01       	movw	r30, r28
    3228:	e9 5a       	subi	r30, 0xA9	; 169
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	88 ec       	ldi	r24, 0xC8	; 200
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	91 83       	std	Z+1, r25	; 0x01
    3232:	80 83       	st	Z, r24
    3234:	fe 01       	movw	r30, r28
    3236:	e9 5a       	subi	r30, 0xA9	; 169
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	80 81       	ld	r24, Z
    323c:	91 81       	ldd	r25, Z+1	; 0x01
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <main+0xc1a>
    3242:	fe 01       	movw	r30, r28
    3244:	e9 5a       	subi	r30, 0xA9	; 169
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	91 83       	std	Z+1, r25	; 0x01
    324a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324c:	de 01       	movw	r26, r28
    324e:	a7 5a       	subi	r26, 0xA7	; 167
    3250:	bf 4f       	sbci	r27, 0xFF	; 255
    3252:	fe 01       	movw	r30, r28
    3254:	e7 5a       	subi	r30, 0xA7	; 167
    3256:	ff 4f       	sbci	r31, 0xFF	; 255
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	11 96       	adiw	r26, 0x01	; 1
    3260:	9c 93       	st	X, r25
    3262:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3264:	fe 01       	movw	r30, r28
    3266:	e7 5a       	subi	r30, 0xA7	; 167
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	d1 f6       	brne	.-76     	; 0x3226 <main+0xc02>
    3272:	27 c0       	rjmp	.+78     	; 0x32c2 <main+0xc9e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3274:	8e 01       	movw	r16, r28
    3276:	07 5a       	subi	r16, 0xA7	; 167
    3278:	1f 4f       	sbci	r17, 0xFF	; 255
    327a:	fe 01       	movw	r30, r28
    327c:	e5 5a       	subi	r30, 0xA5	; 165
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	60 81       	ld	r22, Z
    3282:	71 81       	ldd	r23, Z+1	; 0x01
    3284:	82 81       	ldd	r24, Z+2	; 0x02
    3286:	93 81       	ldd	r25, Z+3	; 0x03
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	f8 01       	movw	r30, r16
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	80 83       	st	Z, r24
    3296:	de 01       	movw	r26, r28
    3298:	ab 5a       	subi	r26, 0xAB	; 171
    329a:	bf 4f       	sbci	r27, 0xFF	; 255
    329c:	fe 01       	movw	r30, r28
    329e:	e7 5a       	subi	r30, 0xA7	; 167
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	8d 93       	st	X+, r24
    32a8:	9c 93       	st	X, r25
    32aa:	fe 01       	movw	r30, r28
    32ac:	eb 5a       	subi	r30, 0xAB	; 171
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	80 81       	ld	r24, Z
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	f1 f7       	brne	.-4      	; 0x32b4 <main+0xc90>
    32b8:	fe 01       	movw	r30, r28
    32ba:	eb 5a       	subi	r30, 0xAB	; 171
    32bc:	ff 4f       	sbci	r31, 0xFF	; 255
    32be:	91 83       	std	Z+1, r25	; 0x01
    32c0:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
					HLCD_VoidSetPostion(0,0);
					/*Go To Pass Check Function*/
					Pass_Check();

					for(Pas=0;Pas<2;Pas++)
    32c2:	de 01       	movw	r26, r28
    32c4:	a0 55       	subi	r26, 0x50	; 80
    32c6:	bf 4f       	sbci	r27, 0xFF	; 255
    32c8:	fe 01       	movw	r30, r28
    32ca:	e0 55       	subi	r30, 0x50	; 80
    32cc:	ff 4f       	sbci	r31, 0xFF	; 255
    32ce:	80 81       	ld	r24, Z
    32d0:	8f 5f       	subi	r24, 0xFF	; 255
    32d2:	8c 93       	st	X, r24
    32d4:	fe 01       	movw	r30, r28
    32d6:	e0 55       	subi	r30, 0x50	; 80
    32d8:	ff 4f       	sbci	r31, 0xFF	; 255
    32da:	80 81       	ld	r24, Z
    32dc:	82 30       	cpi	r24, 0x02	; 2
    32de:	08 f4       	brcc	.+2      	; 0x32e2 <main+0xcbe>
    32e0:	30 ce       	rjmp	.-928    	; 0x2f42 <main+0x91e>
    32e2:	64 c2       	rjmp	.+1224   	; 0x37ac <main+0x1188>




				/* get 4 user  by using voice application */
				else if(IDTrue[0]=='u'&&IDTrue[1]=='s'&&IDTrue[2]=='e'&&IDTrue[3]=='r')
    32e4:	fe 01       	movw	r30, r28
    32e6:	ef 54       	subi	r30, 0x4F	; 79
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	85 37       	cpi	r24, 0x75	; 117
    32f0:	91 05       	cpc	r25, r1
    32f2:	09 f0       	breq	.+2      	; 0x32f6 <main+0xcd2>
    32f4:	d5 c1       	rjmp	.+938    	; 0x36a0 <main+0x107c>
    32f6:	fe 01       	movw	r30, r28
    32f8:	ef 54       	subi	r30, 0x4F	; 79
    32fa:	ff 4f       	sbci	r31, 0xFF	; 255
    32fc:	82 81       	ldd	r24, Z+2	; 0x02
    32fe:	93 81       	ldd	r25, Z+3	; 0x03
    3300:	83 37       	cpi	r24, 0x73	; 115
    3302:	91 05       	cpc	r25, r1
    3304:	09 f0       	breq	.+2      	; 0x3308 <main+0xce4>
    3306:	cc c1       	rjmp	.+920    	; 0x36a0 <main+0x107c>
    3308:	fe 01       	movw	r30, r28
    330a:	ef 54       	subi	r30, 0x4F	; 79
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	84 81       	ldd	r24, Z+4	; 0x04
    3310:	95 81       	ldd	r25, Z+5	; 0x05
    3312:	85 36       	cpi	r24, 0x65	; 101
    3314:	91 05       	cpc	r25, r1
    3316:	09 f0       	breq	.+2      	; 0x331a <main+0xcf6>
    3318:	c3 c1       	rjmp	.+902    	; 0x36a0 <main+0x107c>
    331a:	fe 01       	movw	r30, r28
    331c:	ef 54       	subi	r30, 0x4F	; 79
    331e:	ff 4f       	sbci	r31, 0xFF	; 255
    3320:	86 81       	ldd	r24, Z+6	; 0x06
    3322:	97 81       	ldd	r25, Z+7	; 0x07
    3324:	82 37       	cpi	r24, 0x72	; 114
    3326:	91 05       	cpc	r25, r1
    3328:	09 f0       	breq	.+2      	; 0x332c <main+0xd08>
    332a:	ba c1       	rjmp	.+884    	; 0x36a0 <main+0x107c>
				{
					y=4; //For Exit For Loop
    332c:	fe 01       	movw	r30, r28
    332e:	e1 55       	subi	r30, 0x51	; 81
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	84 e0       	ldi	r24, 0x04	; 4
    3334:	80 83       	st	Z, r24
					HLCD_VoidSendCommand(0x01);
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,0);
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	60 e0       	ldi	r22, 0x00	; 0
    3340:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					/*Go To Pass Check Function*/
					Pass_Check();
    3344:	ce 01       	movw	r24, r28
    3346:	8f 54       	subi	r24, 0x4F	; 79
    3348:	9f 4f       	sbci	r25, 0xFF	; 255
    334a:	1c 01       	movw	r2, r24
    334c:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>

					for(Pas=0;Pas<2;Pas++)
    3350:	fe 01       	movw	r30, r28
    3352:	e0 55       	subi	r30, 0x50	; 80
    3354:	ff 4f       	sbci	r31, 0xFF	; 255
    3356:	10 82       	st	Z, r1
    3358:	9b c1       	rjmp	.+822    	; 0x3690 <main+0x106c>
					{
						/*If Correct Password*/
						if(PassTrue[0]=='8'&&PassTrue[1]=='0'&&PassTrue[2]=='0'&&PassTrue[3]=='0')
    335a:	fe 01       	movw	r30, r28
    335c:	ef 54       	subi	r30, 0x4F	; 79
    335e:	ff 4f       	sbci	r31, 0xFF	; 255
    3360:	87 81       	ldd	r24, Z+7	; 0x07
    3362:	90 85       	ldd	r25, Z+8	; 0x08
    3364:	88 33       	cpi	r24, 0x38	; 56
    3366:	91 05       	cpc	r25, r1
    3368:	79 f5       	brne	.+94     	; 0x33c8 <main+0xda4>
    336a:	fe 01       	movw	r30, r28
    336c:	ef 54       	subi	r30, 0x4F	; 79
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	81 85       	ldd	r24, Z+9	; 0x09
    3372:	92 85       	ldd	r25, Z+10	; 0x0a
    3374:	80 33       	cpi	r24, 0x30	; 48
    3376:	91 05       	cpc	r25, r1
    3378:	39 f5       	brne	.+78     	; 0x33c8 <main+0xda4>
    337a:	fe 01       	movw	r30, r28
    337c:	ef 54       	subi	r30, 0x4F	; 79
    337e:	ff 4f       	sbci	r31, 0xFF	; 255
    3380:	83 85       	ldd	r24, Z+11	; 0x0b
    3382:	94 85       	ldd	r25, Z+12	; 0x0c
    3384:	80 33       	cpi	r24, 0x30	; 48
    3386:	91 05       	cpc	r25, r1
    3388:	f9 f4       	brne	.+62     	; 0x33c8 <main+0xda4>
    338a:	fe 01       	movw	r30, r28
    338c:	ef 54       	subi	r30, 0x4F	; 79
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	85 85       	ldd	r24, Z+13	; 0x0d
    3392:	96 85       	ldd	r25, Z+14	; 0x0e
    3394:	80 33       	cpi	r24, 0x30	; 48
    3396:	91 05       	cpc	r25, r1
    3398:	b9 f4       	brne	.+46     	; 0x33c8 <main+0xda4>
						{
							Login_Trial=True;
    339a:	81 e0       	ldi	r24, 0x01	; 1
    339c:	80 93 3d 01 	sts	0x013D, r24
							Pas=2; //For Exit For Loop
    33a0:	fe 01       	movw	r30, r28
    33a2:	e0 55       	subi	r30, 0x50	; 80
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	82 e0       	ldi	r24, 0x02	; 2
    33a8:	80 83       	st	Z, r24
							HLCD_VoidSendCommand(0x01);
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSetPostion(0,4);
    33b0:	80 e0       	ldi	r24, 0x00	; 0
    33b2:	64 e0       	ldi	r22, 0x04	; 4
    33b4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
							HLCD_VoidSendString("HELLO");
    33b8:	87 e8       	ldi	r24, 0x87	; 135
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
							Login_state=IN;
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	80 93 3f 01 	sts	0x013F, r24
    33c6:	5b c1       	rjmp	.+694    	; 0x367e <main+0x105a>
						}
						/*If Incorrect Password*/
						else if(Pas<2)
    33c8:	fe 01       	movw	r30, r28
    33ca:	e0 55       	subi	r30, 0x50	; 80
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 81       	ld	r24, Z
    33d0:	82 30       	cpi	r24, 0x02	; 2
    33d2:	08 f0       	brcs	.+2      	; 0x33d6 <main+0xdb2>
    33d4:	c1 c0       	rjmp	.+386    	; 0x3558 <main+0xf34>
						{
							HLCD_VoidSendCommand(0x01);
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSendString("Wrong Pass Try Again");
    33dc:	86 e6       	ldi	r24, 0x66	; 102
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    33e4:	fe 01       	movw	r30, r28
    33e6:	ef 5a       	subi	r30, 0xAF	; 175
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	aa e7       	ldi	r26, 0x7A	; 122
    33f0:	b4 e4       	ldi	r27, 0x44	; 68
    33f2:	80 83       	st	Z, r24
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	a2 83       	std	Z+2, r26	; 0x02
    33f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fa:	8e 01       	movw	r16, r28
    33fc:	03 5b       	subi	r16, 0xB3	; 179
    33fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3400:	fe 01       	movw	r30, r28
    3402:	ef 5a       	subi	r30, 0xAF	; 175
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	60 81       	ld	r22, Z
    3408:	71 81       	ldd	r23, Z+1	; 0x01
    340a:	82 81       	ldd	r24, Z+2	; 0x02
    340c:	93 81       	ldd	r25, Z+3	; 0x03
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	4a ef       	ldi	r20, 0xFA	; 250
    3414:	54 e4       	ldi	r21, 0x44	; 68
    3416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	f8 01       	movw	r30, r16
    3420:	80 83       	st	Z, r24
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	a2 83       	std	Z+2, r26	; 0x02
    3426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3428:	fe 01       	movw	r30, r28
    342a:	e3 5b       	subi	r30, 0xB3	; 179
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	60 81       	ld	r22, Z
    3430:	71 81       	ldd	r23, Z+1	; 0x01
    3432:	82 81       	ldd	r24, Z+2	; 0x02
    3434:	93 81       	ldd	r25, Z+3	; 0x03
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	5f e3       	ldi	r21, 0x3F	; 63
    343e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3442:	88 23       	and	r24, r24
    3444:	44 f4       	brge	.+16     	; 0x3456 <main+0xe32>
		__ticks = 1;
    3446:	fe 01       	movw	r30, r28
    3448:	e5 5b       	subi	r30, 0xB5	; 181
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	91 83       	std	Z+1, r25	; 0x01
    3452:	80 83       	st	Z, r24
    3454:	64 c0       	rjmp	.+200    	; 0x351e <main+0xefa>
	else if (__tmp > 65535)
    3456:	fe 01       	movw	r30, r28
    3458:	e3 5b       	subi	r30, 0xB3	; 179
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	60 81       	ld	r22, Z
    345e:	71 81       	ldd	r23, Z+1	; 0x01
    3460:	82 81       	ldd	r24, Z+2	; 0x02
    3462:	93 81       	ldd	r25, Z+3	; 0x03
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	3f ef       	ldi	r19, 0xFF	; 255
    3468:	4f e7       	ldi	r20, 0x7F	; 127
    346a:	57 e4       	ldi	r21, 0x47	; 71
    346c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3470:	18 16       	cp	r1, r24
    3472:	0c f0       	brlt	.+2      	; 0x3476 <main+0xe52>
    3474:	43 c0       	rjmp	.+134    	; 0x34fc <main+0xed8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3476:	fe 01       	movw	r30, r28
    3478:	ef 5a       	subi	r30, 0xAF	; 175
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e2       	ldi	r20, 0x20	; 32
    348a:	51 e4       	ldi	r21, 0x41	; 65
    348c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3490:	dc 01       	movw	r26, r24
    3492:	cb 01       	movw	r24, r22
    3494:	8e 01       	movw	r16, r28
    3496:	05 5b       	subi	r16, 0xB5	; 181
    3498:	1f 4f       	sbci	r17, 0xFF	; 255
    349a:	bc 01       	movw	r22, r24
    349c:	cd 01       	movw	r24, r26
    349e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	f8 01       	movw	r30, r16
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
    34ac:	1f c0       	rjmp	.+62     	; 0x34ec <main+0xec8>
    34ae:	fe 01       	movw	r30, r28
    34b0:	e7 5b       	subi	r30, 0xB7	; 183
    34b2:	ff 4f       	sbci	r31, 0xFF	; 255
    34b4:	88 ec       	ldi	r24, 0xC8	; 200
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	80 83       	st	Z, r24
    34bc:	fe 01       	movw	r30, r28
    34be:	e7 5b       	subi	r30, 0xB7	; 183
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	80 81       	ld	r24, Z
    34c4:	91 81       	ldd	r25, Z+1	; 0x01
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <main+0xea2>
    34ca:	fe 01       	movw	r30, r28
    34cc:	e7 5b       	subi	r30, 0xB7	; 183
    34ce:	ff 4f       	sbci	r31, 0xFF	; 255
    34d0:	91 83       	std	Z+1, r25	; 0x01
    34d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34d4:	de 01       	movw	r26, r28
    34d6:	a5 5b       	subi	r26, 0xB5	; 181
    34d8:	bf 4f       	sbci	r27, 0xFF	; 255
    34da:	fe 01       	movw	r30, r28
    34dc:	e5 5b       	subi	r30, 0xB5	; 181
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	80 81       	ld	r24, Z
    34e2:	91 81       	ldd	r25, Z+1	; 0x01
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	11 96       	adiw	r26, 0x01	; 1
    34e8:	9c 93       	st	X, r25
    34ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ec:	fe 01       	movw	r30, r28
    34ee:	e5 5b       	subi	r30, 0xB5	; 181
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 81       	ld	r24, Z
    34f4:	91 81       	ldd	r25, Z+1	; 0x01
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	d1 f6       	brne	.-76     	; 0x34ae <main+0xe8a>
    34fa:	27 c0       	rjmp	.+78     	; 0x354a <main+0xf26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fc:	8e 01       	movw	r16, r28
    34fe:	05 5b       	subi	r16, 0xB5	; 181
    3500:	1f 4f       	sbci	r17, 0xFF	; 255
    3502:	fe 01       	movw	r30, r28
    3504:	e3 5b       	subi	r30, 0xB3	; 179
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	60 81       	ld	r22, Z
    350a:	71 81       	ldd	r23, Z+1	; 0x01
    350c:	82 81       	ldd	r24, Z+2	; 0x02
    350e:	93 81       	ldd	r25, Z+3	; 0x03
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	f8 01       	movw	r30, r16
    351a:	91 83       	std	Z+1, r25	; 0x01
    351c:	80 83       	st	Z, r24
    351e:	de 01       	movw	r26, r28
    3520:	a9 5b       	subi	r26, 0xB9	; 185
    3522:	bf 4f       	sbci	r27, 0xFF	; 255
    3524:	fe 01       	movw	r30, r28
    3526:	e5 5b       	subi	r30, 0xB5	; 181
    3528:	ff 4f       	sbci	r31, 0xFF	; 255
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	8d 93       	st	X+, r24
    3530:	9c 93       	st	X, r25
    3532:	fe 01       	movw	r30, r28
    3534:	e9 5b       	subi	r30, 0xB9	; 185
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	80 81       	ld	r24, Z
    353a:	91 81       	ldd	r25, Z+1	; 0x01
    353c:	01 97       	sbiw	r24, 0x01	; 1
    353e:	f1 f7       	brne	.-4      	; 0x353c <main+0xf18>
    3540:	fe 01       	movw	r30, r28
    3542:	e9 5b       	subi	r30, 0xB9	; 185
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
							_delay_ms(1000);
							/*Go To Pass Check Function*/
							Pass_Check();
    354a:	ce 01       	movw	r24, r28
    354c:	8f 54       	subi	r24, 0x4F	; 79
    354e:	9f 4f       	sbci	r25, 0xFF	; 255
    3550:	1c 01       	movw	r2, r24
    3552:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <Pass_Check.1340>
    3556:	93 c0       	rjmp	.+294    	; 0x367e <main+0x105a>
						}
						/*If Incorrect Password*/
						else if(Pas==2)
    3558:	fe 01       	movw	r30, r28
    355a:	e0 55       	subi	r30, 0x50	; 80
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	80 81       	ld	r24, Z
    3560:	82 30       	cpi	r24, 0x02	; 2
    3562:	09 f0       	breq	.+2      	; 0x3566 <main+0xf42>
    3564:	8c c0       	rjmp	.+280    	; 0x367e <main+0x105a>
						{
							HLCD_VoidSendCommand(0x01);
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
							HLCD_VoidSendString("Wrong Pass ");
    356c:	8b e7       	ldi	r24, 0x7B	; 123
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    3574:	fe 01       	movw	r30, r28
    3576:	ed 5b       	subi	r30, 0xBD	; 189
    3578:	ff 4f       	sbci	r31, 0xFF	; 255
    357a:	80 e0       	ldi	r24, 0x00	; 0
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	aa e7       	ldi	r26, 0x7A	; 122
    3580:	b4 e4       	ldi	r27, 0x44	; 68
    3582:	80 83       	st	Z, r24
    3584:	91 83       	std	Z+1, r25	; 0x01
    3586:	a2 83       	std	Z+2, r26	; 0x02
    3588:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    358a:	8e 01       	movw	r16, r28
    358c:	01 5c       	subi	r16, 0xC1	; 193
    358e:	1f 4f       	sbci	r17, 0xFF	; 255
    3590:	fe 01       	movw	r30, r28
    3592:	ed 5b       	subi	r30, 0xBD	; 189
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	4a ef       	ldi	r20, 0xFA	; 250
    35a4:	54 e4       	ldi	r21, 0x44	; 68
    35a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	f8 01       	movw	r30, r16
    35b0:	80 83       	st	Z, r24
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	a2 83       	std	Z+2, r26	; 0x02
    35b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35b8:	fe 01       	movw	r30, r28
    35ba:	ff 96       	adiw	r30, 0x3f	; 63
    35bc:	60 81       	ld	r22, Z
    35be:	71 81       	ldd	r23, Z+1	; 0x01
    35c0:	82 81       	ldd	r24, Z+2	; 0x02
    35c2:	93 81       	ldd	r25, Z+3	; 0x03
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	2c f4       	brge	.+10     	; 0x35de <main+0xfba>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	9e af       	std	Y+62, r25	; 0x3e
    35da:	8d af       	std	Y+61, r24	; 0x3d
    35dc:	46 c0       	rjmp	.+140    	; 0x366a <main+0x1046>
	else if (__tmp > 65535)
    35de:	fe 01       	movw	r30, r28
    35e0:	ff 96       	adiw	r30, 0x3f	; 63
    35e2:	60 81       	ld	r22, Z
    35e4:	71 81       	ldd	r23, Z+1	; 0x01
    35e6:	82 81       	ldd	r24, Z+2	; 0x02
    35e8:	93 81       	ldd	r25, Z+3	; 0x03
    35ea:	20 e0       	ldi	r18, 0x00	; 0
    35ec:	3f ef       	ldi	r19, 0xFF	; 255
    35ee:	4f e7       	ldi	r20, 0x7F	; 127
    35f0:	57 e4       	ldi	r21, 0x47	; 71
    35f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35f6:	18 16       	cp	r1, r24
    35f8:	64 f5       	brge	.+88     	; 0x3652 <main+0x102e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35fa:	fe 01       	movw	r30, r28
    35fc:	ed 5b       	subi	r30, 0xBD	; 189
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	60 81       	ld	r22, Z
    3602:	71 81       	ldd	r23, Z+1	; 0x01
    3604:	82 81       	ldd	r24, Z+2	; 0x02
    3606:	93 81       	ldd	r25, Z+3	; 0x03
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e2       	ldi	r20, 0x20	; 32
    360e:	51 e4       	ldi	r21, 0x41	; 65
    3610:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	bc 01       	movw	r22, r24
    361a:	cd 01       	movw	r24, r26
    361c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	9e af       	std	Y+62, r25	; 0x3e
    3626:	8d af       	std	Y+61, r24	; 0x3d
    3628:	0f c0       	rjmp	.+30     	; 0x3648 <main+0x1024>
    362a:	88 ec       	ldi	r24, 0xC8	; 200
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	9c af       	std	Y+60, r25	; 0x3c
    3630:	8b af       	std	Y+59, r24	; 0x3b
    3632:	8b ad       	ldd	r24, Y+59	; 0x3b
    3634:	9c ad       	ldd	r25, Y+60	; 0x3c
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	f1 f7       	brne	.-4      	; 0x3636 <main+0x1012>
    363a:	9c af       	std	Y+60, r25	; 0x3c
    363c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3640:	9e ad       	ldd	r25, Y+62	; 0x3e
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	9e af       	std	Y+62, r25	; 0x3e
    3646:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3648:	8d ad       	ldd	r24, Y+61	; 0x3d
    364a:	9e ad       	ldd	r25, Y+62	; 0x3e
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	69 f7       	brne	.-38     	; 0x362a <main+0x1006>
    3650:	16 c0       	rjmp	.+44     	; 0x367e <main+0x105a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3652:	fe 01       	movw	r30, r28
    3654:	ff 96       	adiw	r30, 0x3f	; 63
    3656:	60 81       	ld	r22, Z
    3658:	71 81       	ldd	r23, Z+1	; 0x01
    365a:	82 81       	ldd	r24, Z+2	; 0x02
    365c:	93 81       	ldd	r25, Z+3	; 0x03
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9e af       	std	Y+62, r25	; 0x3e
    3668:	8d af       	std	Y+61, r24	; 0x3d
    366a:	8d ad       	ldd	r24, Y+61	; 0x3d
    366c:	9e ad       	ldd	r25, Y+62	; 0x3e
    366e:	9a af       	std	Y+58, r25	; 0x3a
    3670:	89 af       	std	Y+57, r24	; 0x39
    3672:	89 ad       	ldd	r24, Y+57	; 0x39
    3674:	9a ad       	ldd	r25, Y+58	; 0x3a
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <main+0x1052>
    367a:	9a af       	std	Y+58, r25	; 0x3a
    367c:	89 af       	std	Y+57, r24	; 0x39
					HLCD_VoidSendCommand(0x01);
					HLCD_VoidSetPostion(0,0);
					/*Go To Pass Check Function*/
					Pass_Check();

					for(Pas=0;Pas<2;Pas++)
    367e:	de 01       	movw	r26, r28
    3680:	a0 55       	subi	r26, 0x50	; 80
    3682:	bf 4f       	sbci	r27, 0xFF	; 255
    3684:	fe 01       	movw	r30, r28
    3686:	e0 55       	subi	r30, 0x50	; 80
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	8c 93       	st	X, r24
    3690:	fe 01       	movw	r30, r28
    3692:	e0 55       	subi	r30, 0x50	; 80
    3694:	ff 4f       	sbci	r31, 0xFF	; 255
    3696:	80 81       	ld	r24, Z
    3698:	82 30       	cpi	r24, 0x02	; 2
    369a:	08 f4       	brcc	.+2      	; 0x369e <main+0x107a>
    369c:	5e ce       	rjmp	.-836    	; 0x335a <main+0xd36>
    369e:	86 c0       	rjmp	.+268    	; 0x37ac <main+0x1188>




				/*If Incorrect ID*/
				else if(y<3)
    36a0:	fe 01       	movw	r30, r28
    36a2:	e1 55       	subi	r30, 0x51	; 81
    36a4:	ff 4f       	sbci	r31, 0xFF	; 255
    36a6:	80 81       	ld	r24, Z
    36a8:	83 30       	cpi	r24, 0x03	; 3
    36aa:	08 f0       	brcs	.+2      	; 0x36ae <main+0x108a>
    36ac:	7f c0       	rjmp	.+254    	; 0x37ac <main+0x1188>
				{
					HLCD_VoidSendCommand(0x01);
    36ae:	81 e0       	ldi	r24, 0x01	; 1
    36b0:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSendString("Wrong ID Try Again");
    36b4:	8d e8       	ldi	r24, 0x8D	; 141
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	aa e7       	ldi	r26, 0x7A	; 122
    36c2:	b4 e4       	ldi	r27, 0x44	; 68
    36c4:	8d ab       	std	Y+53, r24	; 0x35
    36c6:	9e ab       	std	Y+54, r25	; 0x36
    36c8:	af ab       	std	Y+55, r26	; 0x37
    36ca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36cc:	6d a9       	ldd	r22, Y+53	; 0x35
    36ce:	7e a9       	ldd	r23, Y+54	; 0x36
    36d0:	8f a9       	ldd	r24, Y+55	; 0x37
    36d2:	98 ad       	ldd	r25, Y+56	; 0x38
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	4a ef       	ldi	r20, 0xFA	; 250
    36da:	54 e4       	ldi	r21, 0x44	; 68
    36dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	89 ab       	std	Y+49, r24	; 0x31
    36e6:	9a ab       	std	Y+50, r25	; 0x32
    36e8:	ab ab       	std	Y+51, r26	; 0x33
    36ea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36ec:	69 a9       	ldd	r22, Y+49	; 0x31
    36ee:	7a a9       	ldd	r23, Y+50	; 0x32
    36f0:	8b a9       	ldd	r24, Y+51	; 0x33
    36f2:	9c a9       	ldd	r25, Y+52	; 0x34
    36f4:	20 e0       	ldi	r18, 0x00	; 0
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	40 e8       	ldi	r20, 0x80	; 128
    36fa:	5f e3       	ldi	r21, 0x3F	; 63
    36fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3700:	88 23       	and	r24, r24
    3702:	2c f4       	brge	.+10     	; 0x370e <main+0x10ea>
		__ticks = 1;
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	98 ab       	std	Y+48, r25	; 0x30
    370a:	8f a7       	std	Y+47, r24	; 0x2f
    370c:	3f c0       	rjmp	.+126    	; 0x378c <main+0x1168>
	else if (__tmp > 65535)
    370e:	69 a9       	ldd	r22, Y+49	; 0x31
    3710:	7a a9       	ldd	r23, Y+50	; 0x32
    3712:	8b a9       	ldd	r24, Y+51	; 0x33
    3714:	9c a9       	ldd	r25, Y+52	; 0x34
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	3f ef       	ldi	r19, 0xFF	; 255
    371a:	4f e7       	ldi	r20, 0x7F	; 127
    371c:	57 e4       	ldi	r21, 0x47	; 71
    371e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3722:	18 16       	cp	r1, r24
    3724:	4c f5       	brge	.+82     	; 0x3778 <main+0x1154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3726:	6d a9       	ldd	r22, Y+53	; 0x35
    3728:	7e a9       	ldd	r23, Y+54	; 0x36
    372a:	8f a9       	ldd	r24, Y+55	; 0x37
    372c:	98 ad       	ldd	r25, Y+56	; 0x38
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	40 e2       	ldi	r20, 0x20	; 32
    3734:	51 e4       	ldi	r21, 0x41	; 65
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	bc 01       	movw	r22, r24
    3740:	cd 01       	movw	r24, r26
    3742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3746:	dc 01       	movw	r26, r24
    3748:	cb 01       	movw	r24, r22
    374a:	98 ab       	std	Y+48, r25	; 0x30
    374c:	8f a7       	std	Y+47, r24	; 0x2f
    374e:	0f c0       	rjmp	.+30     	; 0x376e <main+0x114a>
    3750:	88 ec       	ldi	r24, 0xC8	; 200
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	9e a7       	std	Y+46, r25	; 0x2e
    3756:	8d a7       	std	Y+45, r24	; 0x2d
    3758:	8d a5       	ldd	r24, Y+45	; 0x2d
    375a:	9e a5       	ldd	r25, Y+46	; 0x2e
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <main+0x1138>
    3760:	9e a7       	std	Y+46, r25	; 0x2e
    3762:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3764:	8f a5       	ldd	r24, Y+47	; 0x2f
    3766:	98 a9       	ldd	r25, Y+48	; 0x30
    3768:	01 97       	sbiw	r24, 0x01	; 1
    376a:	98 ab       	std	Y+48, r25	; 0x30
    376c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3770:	98 a9       	ldd	r25, Y+48	; 0x30
    3772:	00 97       	sbiw	r24, 0x00	; 0
    3774:	69 f7       	brne	.-38     	; 0x3750 <main+0x112c>
    3776:	14 c0       	rjmp	.+40     	; 0x37a0 <main+0x117c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3778:	69 a9       	ldd	r22, Y+49	; 0x31
    377a:	7a a9       	ldd	r23, Y+50	; 0x32
    377c:	8b a9       	ldd	r24, Y+51	; 0x33
    377e:	9c a9       	ldd	r25, Y+52	; 0x34
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	98 ab       	std	Y+48, r25	; 0x30
    378a:	8f a7       	std	Y+47, r24	; 0x2f
    378c:	8f a5       	ldd	r24, Y+47	; 0x2f
    378e:	98 a9       	ldd	r25, Y+48	; 0x30
    3790:	9c a7       	std	Y+44, r25	; 0x2c
    3792:	8b a7       	std	Y+43, r24	; 0x2b
    3794:	8b a5       	ldd	r24, Y+43	; 0x2b
    3796:	9c a5       	ldd	r25, Y+44	; 0x2c
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	f1 f7       	brne	.-4      	; 0x3798 <main+0x1174>
    379c:	9c a7       	std	Y+44, r25	; 0x2c
    379e:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					/*Go To ID Check Function*/
					ID_CHECK();
    37a0:	ce 01       	movw	r24, r28
    37a2:	8f 54       	subi	r24, 0x4F	; 79
    37a4:	9f 4f       	sbci	r25, 0xFF	; 255
    37a6:	1c 01       	movw	r2, r24
    37a8:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <ID_CHECK.1347>
				}
				/*If Incorrect ID*/
				if(y==2)
    37ac:	fe 01       	movw	r30, r28
    37ae:	e1 55       	subi	r30, 0x51	; 81
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	80 81       	ld	r24, Z
    37b4:	82 30       	cpi	r24, 0x02	; 2
    37b6:	09 f0       	breq	.+2      	; 0x37ba <main+0x1196>
    37b8:	7c c0       	rjmp	.+248    	; 0x38b2 <main+0x128e>
				{
					Login_Trial=True;
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	80 93 3d 01 	sts	0x013D, r24
					HLCD_VoidSendCommand(0x01);
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSendString("Wrong ID ");
    37c6:	80 ea       	ldi	r24, 0xA0	; 160
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	aa e7       	ldi	r26, 0x7A	; 122
    37d4:	b4 e4       	ldi	r27, 0x44	; 68
    37d6:	8f a3       	std	Y+39, r24	; 0x27
    37d8:	98 a7       	std	Y+40, r25	; 0x28
    37da:	a9 a7       	std	Y+41, r26	; 0x29
    37dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37de:	6f a1       	ldd	r22, Y+39	; 0x27
    37e0:	78 a5       	ldd	r23, Y+40	; 0x28
    37e2:	89 a5       	ldd	r24, Y+41	; 0x29
    37e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	4a ef       	ldi	r20, 0xFA	; 250
    37ec:	54 e4       	ldi	r21, 0x44	; 68
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	8b a3       	std	Y+35, r24	; 0x23
    37f8:	9c a3       	std	Y+36, r25	; 0x24
    37fa:	ad a3       	std	Y+37, r26	; 0x25
    37fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3800:	7c a1       	ldd	r23, Y+36	; 0x24
    3802:	8d a1       	ldd	r24, Y+37	; 0x25
    3804:	9e a1       	ldd	r25, Y+38	; 0x26
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e8       	ldi	r20, 0x80	; 128
    380c:	5f e3       	ldi	r21, 0x3F	; 63
    380e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3812:	88 23       	and	r24, r24
    3814:	2c f4       	brge	.+10     	; 0x3820 <main+0x11fc>
		__ticks = 1;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9a a3       	std	Y+34, r25	; 0x22
    381c:	89 a3       	std	Y+33, r24	; 0x21
    381e:	3f c0       	rjmp	.+126    	; 0x389e <main+0x127a>
	else if (__tmp > 65535)
    3820:	6b a1       	ldd	r22, Y+35	; 0x23
    3822:	7c a1       	ldd	r23, Y+36	; 0x24
    3824:	8d a1       	ldd	r24, Y+37	; 0x25
    3826:	9e a1       	ldd	r25, Y+38	; 0x26
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	3f ef       	ldi	r19, 0xFF	; 255
    382c:	4f e7       	ldi	r20, 0x7F	; 127
    382e:	57 e4       	ldi	r21, 0x47	; 71
    3830:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3834:	18 16       	cp	r1, r24
    3836:	4c f5       	brge	.+82     	; 0x388a <main+0x1266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3838:	6f a1       	ldd	r22, Y+39	; 0x27
    383a:	78 a5       	ldd	r23, Y+40	; 0x28
    383c:	89 a5       	ldd	r24, Y+41	; 0x29
    383e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	40 e2       	ldi	r20, 0x20	; 32
    3846:	51 e4       	ldi	r21, 0x41	; 65
    3848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	bc 01       	movw	r22, r24
    3852:	cd 01       	movw	r24, r26
    3854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	9a a3       	std	Y+34, r25	; 0x22
    385e:	89 a3       	std	Y+33, r24	; 0x21
    3860:	0f c0       	rjmp	.+30     	; 0x3880 <main+0x125c>
    3862:	88 ec       	ldi	r24, 0xC8	; 200
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	98 a3       	std	Y+32, r25	; 0x20
    3868:	8f 8f       	std	Y+31, r24	; 0x1f
    386a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    386c:	98 a1       	ldd	r25, Y+32	; 0x20
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	f1 f7       	brne	.-4      	; 0x386e <main+0x124a>
    3872:	98 a3       	std	Y+32, r25	; 0x20
    3874:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3876:	89 a1       	ldd	r24, Y+33	; 0x21
    3878:	9a a1       	ldd	r25, Y+34	; 0x22
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	9a a3       	std	Y+34, r25	; 0x22
    387e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3880:	89 a1       	ldd	r24, Y+33	; 0x21
    3882:	9a a1       	ldd	r25, Y+34	; 0x22
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	69 f7       	brne	.-38     	; 0x3862 <main+0x123e>
    3888:	14 c0       	rjmp	.+40     	; 0x38b2 <main+0x128e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388a:	6b a1       	ldd	r22, Y+35	; 0x23
    388c:	7c a1       	ldd	r23, Y+36	; 0x24
    388e:	8d a1       	ldd	r24, Y+37	; 0x25
    3890:	9e a1       	ldd	r25, Y+38	; 0x26
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	9a a3       	std	Y+34, r25	; 0x22
    389c:	89 a3       	std	Y+33, r24	; 0x21
    389e:	89 a1       	ldd	r24, Y+33	; 0x21
    38a0:	9a a1       	ldd	r25, Y+34	; 0x22
    38a2:	9e 8f       	std	Y+30, r25	; 0x1e
    38a4:	8d 8f       	std	Y+29, r24	; 0x1d
    38a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <main+0x1286>
    38ae:	9e 8f       	std	Y+30, r25	; 0x1e
    38b0:	8d 8f       	std	Y+29, r24	; 0x1d

			/*Go To ID Check Function*/

			u8 Pas=0;
			/* bigger loop id check  */
			for(u8 y=0;y<3;y++)
    38b2:	de 01       	movw	r26, r28
    38b4:	a1 55       	subi	r26, 0x51	; 81
    38b6:	bf 4f       	sbci	r27, 0xFF	; 255
    38b8:	fe 01       	movw	r30, r28
    38ba:	e1 55       	subi	r30, 0x51	; 81
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	80 81       	ld	r24, Z
    38c0:	8f 5f       	subi	r24, 0xFF	; 255
    38c2:	8c 93       	st	X, r24
    38c4:	fe 01       	movw	r30, r28
    38c6:	e1 55       	subi	r30, 0x51	; 81
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	83 30       	cpi	r24, 0x03	; 3
    38ce:	10 f4       	brcc	.+4      	; 0x38d4 <main+0x12b0>
    38d0:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <main+0x80>
{
	/*bigger Loop*/
	while(1)
	{
		/*Login */
		while(!Login_Trial)
    38d4:	80 91 3d 01 	lds	r24, 0x013D
    38d8:	88 23       	and	r24, r24
    38da:	11 f4       	brne	.+4      	; 0x38e0 <main+0x12bc>
    38dc:	0c 94 23 13 	jmp	0x2646	; 0x2646 <main+0x22>
    38e0:	fa c1       	rjmp	.+1012   	; 0x3cd6 <main+0x16b2>
			}
		} /*end Login loop*/


		/* ID & Password Correct*/
		while(Login_state)
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	aa ef       	ldi	r26, 0xFA	; 250
    38e8:	b4 e4       	ldi	r27, 0x44	; 68
    38ea:	89 8f       	std	Y+25, r24	; 0x19
    38ec:	9a 8f       	std	Y+26, r25	; 0x1a
    38ee:	ab 8f       	std	Y+27, r26	; 0x1b
    38f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f2:	69 8d       	ldd	r22, Y+25	; 0x19
    38f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	4a ef       	ldi	r20, 0xFA	; 250
    3900:	54 e4       	ldi	r21, 0x44	; 68
    3902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	8d 8b       	std	Y+21, r24	; 0x15
    390c:	9e 8b       	std	Y+22, r25	; 0x16
    390e:	af 8b       	std	Y+23, r26	; 0x17
    3910:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3912:	6d 89       	ldd	r22, Y+21	; 0x15
    3914:	7e 89       	ldd	r23, Y+22	; 0x16
    3916:	8f 89       	ldd	r24, Y+23	; 0x17
    3918:	98 8d       	ldd	r25, Y+24	; 0x18
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	40 e8       	ldi	r20, 0x80	; 128
    3920:	5f e3       	ldi	r21, 0x3F	; 63
    3922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3926:	88 23       	and	r24, r24
    3928:	2c f4       	brge	.+10     	; 0x3934 <main+0x1310>
		__ticks = 1;
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9c 8b       	std	Y+20, r25	; 0x14
    3930:	8b 8b       	std	Y+19, r24	; 0x13
    3932:	3f c0       	rjmp	.+126    	; 0x39b2 <main+0x138e>
	else if (__tmp > 65535)
    3934:	6d 89       	ldd	r22, Y+21	; 0x15
    3936:	7e 89       	ldd	r23, Y+22	; 0x16
    3938:	8f 89       	ldd	r24, Y+23	; 0x17
    393a:	98 8d       	ldd	r25, Y+24	; 0x18
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	3f ef       	ldi	r19, 0xFF	; 255
    3940:	4f e7       	ldi	r20, 0x7F	; 127
    3942:	57 e4       	ldi	r21, 0x47	; 71
    3944:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3948:	18 16       	cp	r1, r24
    394a:	4c f5       	brge	.+82     	; 0x399e <main+0x137a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394c:	69 8d       	ldd	r22, Y+25	; 0x19
    394e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3950:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3952:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	40 e2       	ldi	r20, 0x20	; 32
    395a:	51 e4       	ldi	r21, 0x41	; 65
    395c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3960:	dc 01       	movw	r26, r24
    3962:	cb 01       	movw	r24, r22
    3964:	bc 01       	movw	r22, r24
    3966:	cd 01       	movw	r24, r26
    3968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	9c 8b       	std	Y+20, r25	; 0x14
    3972:	8b 8b       	std	Y+19, r24	; 0x13
    3974:	0f c0       	rjmp	.+30     	; 0x3994 <main+0x1370>
    3976:	88 ec       	ldi	r24, 0xC8	; 200
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	9a 8b       	std	Y+18, r25	; 0x12
    397c:	89 8b       	std	Y+17, r24	; 0x11
    397e:	89 89       	ldd	r24, Y+17	; 0x11
    3980:	9a 89       	ldd	r25, Y+18	; 0x12
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <main+0x135e>
    3986:	9a 8b       	std	Y+18, r25	; 0x12
    3988:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398a:	8b 89       	ldd	r24, Y+19	; 0x13
    398c:	9c 89       	ldd	r25, Y+20	; 0x14
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	9c 8b       	std	Y+20, r25	; 0x14
    3992:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3994:	8b 89       	ldd	r24, Y+19	; 0x13
    3996:	9c 89       	ldd	r25, Y+20	; 0x14
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	69 f7       	brne	.-38     	; 0x3976 <main+0x1352>
    399c:	14 c0       	rjmp	.+40     	; 0x39c6 <main+0x13a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    399e:	6d 89       	ldd	r22, Y+21	; 0x15
    39a0:	7e 89       	ldd	r23, Y+22	; 0x16
    39a2:	8f 89       	ldd	r24, Y+23	; 0x17
    39a4:	98 8d       	ldd	r25, Y+24	; 0x18
    39a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	9c 8b       	std	Y+20, r25	; 0x14
    39b0:	8b 8b       	std	Y+19, r24	; 0x13
    39b2:	8b 89       	ldd	r24, Y+19	; 0x13
    39b4:	9c 89       	ldd	r25, Y+20	; 0x14
    39b6:	98 8b       	std	Y+16, r25	; 0x10
    39b8:	8f 87       	std	Y+15, r24	; 0x0f
    39ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    39bc:	98 89       	ldd	r25, Y+16	; 0x10
    39be:	01 97       	sbiw	r24, 0x01	; 1
    39c0:	f1 f7       	brne	.-4      	; 0x39be <main+0x139a>
    39c2:	98 8b       	std	Y+16, r25	; 0x10
    39c4:	8f 87       	std	Y+15, r24	; 0x0f
		{
			/*Display Options On LCD*/

			_delay_ms(2000);
			HLCD_VoidSendCommand(0x01);
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
			HLCD_VoidSetPostion(0,0);
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
			HLCD_VoidSendString("1:O/D");
    39d4:	8a ea       	ldi	r24, 0xAA	; 170
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
			HLCD_VoidSetPostion(0,7);
    39dc:	80 e0       	ldi	r24, 0x00	; 0
    39de:	67 e0       	ldi	r22, 0x07	; 7
    39e0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
			HLCD_VoidSendString("2:C/D");
    39e4:	80 eb       	ldi	r24, 0xB0	; 176
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
			HLCD_VoidSetPostion(1,0);
    39ec:	81 e0       	ldi	r24, 0x01	; 1
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
			HLCD_VoidSendString("3:Temp");
    39f4:	86 eb       	ldi	r24, 0xB6	; 182
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
			HLCD_VoidSetPostion(1,7);
    39fc:	81 e0       	ldi	r24, 0x01	; 1
    39fe:	67 e0       	ldi	r22, 0x07	; 7
    3a00:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
			HLCD_VoidSendString("4:LED");
    3a04:	8d eb       	ldi	r24, 0xBD	; 189
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
			HLCD_VoidSetPostion(1,13);
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	6d e0       	ldi	r22, 0x0D	; 13
    3a10:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
			HLCD_VoidSendString("5:0");
    3a14:	83 ec       	ldi	r24, 0xC3	; 195
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>



			Data=URT_Recevier();
    3a1c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <URT_Recevier>
    3a20:	80 93 40 01 	sts	0x0140, r24
			if(Data=='1')
    3a24:	80 91 40 01 	lds	r24, 0x0140
    3a28:	81 33       	cpi	r24, 0x31	; 49
    3a2a:	61 f5       	brne	.+88     	; 0x3a84 <main+0x1460>
			{
				if(Door_State==Closed)
    3a2c:	80 91 3e 01 	lds	r24, 0x013E
    3a30:	88 23       	and	r24, r24
    3a32:	b9 f4       	brne	.+46     	; 0x3a62 <main+0x143e>
				{
					MDIO_VoidSetPinDirection(PORTB,3,OUTPUT);
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	63 e0       	ldi	r22, 0x03	; 3
    3a38:	41 e0       	ldi	r20, 0x01	; 1
    3a3a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MDIO_VoidSetPinDirection>
					HLCD_VoidSendCommand(0x01);
    3a3e:	81 e0       	ldi	r24, 0x01	; 1
    3a40:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,0);
    3a44:	80 e0       	ldi	r24, 0x00	; 0
    3a46:	60 e0       	ldi	r22, 0x00	; 0
    3a48:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					HLCD_VoidSendString("Open Door");
    3a4c:	87 ec       	ldi	r24, 0xC7	; 199
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
					TIM0_FastPWM_Set_DutyCycle(13);
    3a54:	8d e0       	ldi	r24, 0x0D	; 13
    3a56:	0e 94 77 11 	call	0x22ee	; 0x22ee <TIM0_FastPWM_Set_DutyCycle>
					Door_State=Open;
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	80 93 3e 01 	sts	0x013E, r24
    3a60:	3a c1       	rjmp	.+628    	; 0x3cd6 <main+0x16b2>

				}
				else if(Door_State==Open)
    3a62:	80 91 3e 01 	lds	r24, 0x013E
    3a66:	81 30       	cpi	r24, 0x01	; 1
    3a68:	09 f0       	breq	.+2      	; 0x3a6c <main+0x1448>
    3a6a:	35 c1       	rjmp	.+618    	; 0x3cd6 <main+0x16b2>
				{
					HLCD_VoidSendCommand(0x01);
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,0);
    3a72:	80 e0       	ldi	r24, 0x00	; 0
    3a74:	60 e0       	ldi	r22, 0x00	; 0
    3a76:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					HLCD_VoidSendString("Door Already Open");
    3a7a:	81 ed       	ldi	r24, 0xD1	; 209
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    3a82:	29 c1       	rjmp	.+594    	; 0x3cd6 <main+0x16b2>
				}

			}

			else if(Data=='2')
    3a84:	80 91 40 01 	lds	r24, 0x0140
    3a88:	82 33       	cpi	r24, 0x32	; 50
    3a8a:	99 f5       	brne	.+102    	; 0x3af2 <main+0x14ce>
			{
				if(Door_State==Open)
    3a8c:	80 91 3e 01 	lds	r24, 0x013E
    3a90:	81 30       	cpi	r24, 0x01	; 1
    3a92:	b1 f4       	brne	.+44     	; 0x3ac0 <main+0x149c>
				{
					MDIO_VoidSetPinDirection(PORTB,3,OUTPUT);
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	63 e0       	ldi	r22, 0x03	; 3
    3a98:	41 e0       	ldi	r20, 0x01	; 1
    3a9a:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MDIO_VoidSetPinDirection>
					HLCD_VoidSendCommand(0x01);
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,0);
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	60 e0       	ldi	r22, 0x00	; 0
    3aa8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					HLCD_VoidSendString("Close Door");
    3aac:	83 ee       	ldi	r24, 0xE3	; 227
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
					TIM0_FastPWM_Set_DutyCycle(75);
    3ab4:	8b e4       	ldi	r24, 0x4B	; 75
    3ab6:	0e 94 77 11 	call	0x22ee	; 0x22ee <TIM0_FastPWM_Set_DutyCycle>
					Door_State=Closed;
    3aba:	10 92 3e 01 	sts	0x013E, r1
    3abe:	0b c1       	rjmp	.+534    	; 0x3cd6 <main+0x16b2>
				}
				else if(Door_State==Closed)
    3ac0:	80 91 3e 01 	lds	r24, 0x013E
    3ac4:	88 23       	and	r24, r24
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <main+0x14a6>
    3ac8:	06 c1       	rjmp	.+524    	; 0x3cd6 <main+0x16b2>
				{
					HLCD_VoidSendCommand(0x01);
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
					HLCD_VoidSetPostion(0,2);
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	62 e0       	ldi	r22, 0x02	; 2
    3ad4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					HLCD_VoidSendString("Door Already ");
    3ad8:	8e ee       	ldi	r24, 0xEE	; 238
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
					HLCD_VoidSetPostion(1,5);
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	65 e0       	ldi	r22, 0x05	; 5
    3ae4:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
					HLCD_VoidSendString(" Closed");
    3ae8:	8c ef       	ldi	r24, 0xFC	; 252
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    3af0:	f2 c0       	rjmp	.+484    	; 0x3cd6 <main+0x16b2>
				}


			}
			else if(Data=='3')
    3af2:	80 91 40 01 	lds	r24, 0x0140
    3af6:	83 33       	cpi	r24, 0x33	; 51
    3af8:	09 f0       	breq	.+2      	; 0x3afc <main+0x14d8>
    3afa:	cc c0       	rjmp	.+408    	; 0x3c94 <main+0x1670>
			{
				HLCD_VoidSendCommand(0x01);
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				u16 Digital=0,milivolt=0,temp=0;
    3b02:	fe 01       	movw	r30, r28
    3b04:	e3 55       	subi	r30, 0x53	; 83
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	11 82       	std	Z+1, r1	; 0x01
    3b0a:	10 82       	st	Z, r1
    3b0c:	fe 01       	movw	r30, r28
    3b0e:	e5 55       	subi	r30, 0x55	; 85
    3b10:	ff 4f       	sbci	r31, 0xFF	; 255
    3b12:	11 82       	std	Z+1, r1	; 0x01
    3b14:	10 82       	st	Z, r1
    3b16:	fe 01       	movw	r30, r28
    3b18:	e7 55       	subi	r30, 0x57	; 87
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	11 82       	std	Z+1, r1	; 0x01
    3b1e:	10 82       	st	Z, r1
				Digital= MADC_ReadData(0);
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	0e 94 75 0d 	call	0x1aea	; 0x1aea <MADC_ReadData>
    3b26:	fe 01       	movw	r30, r28
    3b28:	e3 55       	subi	r30, 0x53	; 83
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	91 83       	std	Z+1, r25	; 0x01
    3b2e:	80 83       	st	Z, r24
				milivolt=(Digital*5000)/256;
    3b30:	fe 01       	movw	r30, r28
    3b32:	e3 55       	subi	r30, 0x53	; 83
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	20 81       	ld	r18, Z
    3b38:	31 81       	ldd	r19, Z+1	; 0x01
    3b3a:	88 e8       	ldi	r24, 0x88	; 136
    3b3c:	93 e1       	ldi	r25, 0x13	; 19
    3b3e:	ac 01       	movw	r20, r24
    3b40:	24 9f       	mul	r18, r20
    3b42:	c0 01       	movw	r24, r0
    3b44:	25 9f       	mul	r18, r21
    3b46:	90 0d       	add	r25, r0
    3b48:	34 9f       	mul	r19, r20
    3b4a:	90 0d       	add	r25, r0
    3b4c:	11 24       	eor	r1, r1
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e5 55       	subi	r30, 0x55	; 85
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	89 2f       	mov	r24, r25
    3b56:	99 27       	eor	r25, r25
    3b58:	91 83       	std	Z+1, r25	; 0x01
    3b5a:	80 83       	st	Z, r24
				temp=milivolt/10;
    3b5c:	8e 01       	movw	r16, r28
    3b5e:	07 55       	subi	r16, 0x57	; 87
    3b60:	1f 4f       	sbci	r17, 0xFF	; 255
    3b62:	fe 01       	movw	r30, r28
    3b64:	e5 55       	subi	r30, 0x55	; 85
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	80 81       	ld	r24, Z
    3b6a:	91 81       	ldd	r25, Z+1	; 0x01
    3b6c:	2a e0       	ldi	r18, 0x0A	; 10
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	b9 01       	movw	r22, r18
    3b72:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__udivmodhi4>
    3b76:	cb 01       	movw	r24, r22
    3b78:	d8 01       	movw	r26, r16
    3b7a:	8d 93       	st	X+, r24
    3b7c:	9c 93       	st	X, r25
				HLCD_VoidSetPostion(0,0);
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	60 e0       	ldi	r22, 0x00	; 0
    3b82:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
				HLCD_VoidSendString("Temp:");
    3b86:	84 e0       	ldi	r24, 0x04	; 4
    3b88:	91 e0       	ldi	r25, 0x01	; 1
    3b8a:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
				HLCD_VoidSendNumber(temp);
    3b8e:	fe 01       	movw	r30, r28
    3b90:	e7 55       	subi	r30, 0x57	; 87
    3b92:	ff 4f       	sbci	r31, 0xFF	; 255
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	cc 01       	movw	r24, r24
    3b9a:	a0 e0       	ldi	r26, 0x00	; 0
    3b9c:	b0 e0       	ldi	r27, 0x00	; 0
    3b9e:	bc 01       	movw	r22, r24
    3ba0:	cd 01       	movw	r24, r26
    3ba2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <HLCD_VoidSendNumber>
				HLCD_VoidSendString("C");
    3ba6:	8a e0       	ldi	r24, 0x0A	; 10
    3ba8:	91 e0       	ldi	r25, 0x01	; 1
    3baa:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e8       	ldi	r25, 0x80	; 128
    3bb2:	ab e3       	ldi	r26, 0x3B	; 59
    3bb4:	b5 e4       	ldi	r27, 0x45	; 69
    3bb6:	8b 87       	std	Y+11, r24	; 0x0b
    3bb8:	9c 87       	std	Y+12, r25	; 0x0c
    3bba:	ad 87       	std	Y+13, r26	; 0x0d
    3bbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	4a ef       	ldi	r20, 0xFA	; 250
    3bcc:	54 e4       	ldi	r21, 0x44	; 68
    3bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	8f 83       	std	Y+7, r24	; 0x07
    3bd8:	98 87       	std	Y+8, r25	; 0x08
    3bda:	a9 87       	std	Y+9, r26	; 0x09
    3bdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bde:	6f 81       	ldd	r22, Y+7	; 0x07
    3be0:	78 85       	ldd	r23, Y+8	; 0x08
    3be2:	89 85       	ldd	r24, Y+9	; 0x09
    3be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e8       	ldi	r20, 0x80	; 128
    3bec:	5f e3       	ldi	r21, 0x3F	; 63
    3bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf2:	88 23       	and	r24, r24
    3bf4:	2c f4       	brge	.+10     	; 0x3c00 <main+0x15dc>
		__ticks = 1;
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    3bfc:	8d 83       	std	Y+5, r24	; 0x05
    3bfe:	3f c0       	rjmp	.+126    	; 0x3c7e <main+0x165a>
	else if (__tmp > 65535)
    3c00:	6f 81       	ldd	r22, Y+7	; 0x07
    3c02:	78 85       	ldd	r23, Y+8	; 0x08
    3c04:	89 85       	ldd	r24, Y+9	; 0x09
    3c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	3f ef       	ldi	r19, 0xFF	; 255
    3c0c:	4f e7       	ldi	r20, 0x7F	; 127
    3c0e:	57 e4       	ldi	r21, 0x47	; 71
    3c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c14:	18 16       	cp	r1, r24
    3c16:	4c f5       	brge	.+82     	; 0x3c6a <main+0x1646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	40 e2       	ldi	r20, 0x20	; 32
    3c26:	51 e4       	ldi	r21, 0x41	; 65
    3c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	bc 01       	movw	r22, r24
    3c32:	cd 01       	movw	r24, r26
    3c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
    3c40:	0f c0       	rjmp	.+30     	; 0x3c60 <main+0x163c>
    3c42:	88 ec       	ldi	r24, 0xC8	; 200
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	9c 83       	std	Y+4, r25	; 0x04
    3c48:	8b 83       	std	Y+3, r24	; 0x03
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <main+0x162a>
    3c52:	9c 83       	std	Y+4, r25	; 0x04
    3c54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
    3c58:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	9e 83       	std	Y+6, r25	; 0x06
    3c5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c60:	8d 81       	ldd	r24, Y+5	; 0x05
    3c62:	9e 81       	ldd	r25, Y+6	; 0x06
    3c64:	00 97       	sbiw	r24, 0x00	; 0
    3c66:	69 f7       	brne	.-38     	; 0x3c42 <main+0x161e>
    3c68:	36 c0       	rjmp	.+108    	; 0x3cd6 <main+0x16b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6c:	78 85       	ldd	r23, Y+8	; 0x08
    3c6e:	89 85       	ldd	r24, Y+9	; 0x09
    3c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	9e 83       	std	Y+6, r25	; 0x06
    3c7c:	8d 83       	std	Y+5, r24	; 0x05
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	9a 83       	std	Y+2, r25	; 0x02
    3c84:	89 83       	std	Y+1, r24	; 0x01
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <main+0x1666>
    3c8e:	9a 83       	std	Y+2, r25	; 0x02
    3c90:	89 83       	std	Y+1, r24	; 0x01
    3c92:	21 c0       	rjmp	.+66     	; 0x3cd6 <main+0x16b2>


			}


			else if(Data=='4')
    3c94:	80 91 40 01 	lds	r24, 0x0140
    3c98:	84 33       	cpi	r24, 0x34	; 52
    3c9a:	a9 f4       	brne	.+42     	; 0x3cc6 <main+0x16a2>
			{
				HLCD_VoidSendCommand(0x01);//
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				MDIO_VoidSetPinDirection(PORTA,PIN1,OUTPUT);
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	61 e0       	ldi	r22, 0x01	; 1
    3ca6:	41 e0       	ldi	r20, 0x01	; 1
    3ca8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <MDIO_VoidSetPinDirection>
				MDIO_VoidTogglePin(PORTA,PIN1);
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	0e 94 a6 10 	call	0x214c	; 0x214c <MDIO_VoidTogglePin>
				HLCD_VoidSetPostion(0,0);
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
				HLCD_VoidSendString("LED:ON/Off");
    3cbc:	8c e0       	ldi	r24, 0x0C	; 12
    3cbe:	91 e0       	ldi	r25, 0x01	; 1
    3cc0:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
    3cc4:	08 c0       	rjmp	.+16     	; 0x3cd6 <main+0x16b2>

			}


			else if(Data=='5')
    3cc6:	80 91 40 01 	lds	r24, 0x0140
    3cca:	85 33       	cpi	r24, 0x35	; 53
    3ccc:	21 f4       	brne	.+8      	; 0x3cd6 <main+0x16b2>
			{
				Login_state=OUT;
    3cce:	10 92 3f 01 	sts	0x013F, r1
				Login_Trial=False;
    3cd2:	10 92 3d 01 	sts	0x013D, r1
			}
		} /*end Login loop*/


		/* ID & Password Correct*/
		while(Login_state)
    3cd6:	80 91 3f 01 	lds	r24, 0x013F
    3cda:	88 23       	and	r24, r24
    3cdc:	09 f0       	breq	.+2      	; 0x3ce0 <main+0x16bc>
    3cde:	01 ce       	rjmp	.-1022   	; 0x38e2 <main+0x12be>
    3ce0:	f9 cd       	rjmp	.-1038   	; 0x38d4 <main+0x12b0>

00003ce2 <ID_CHECK.1347>:



			/*ID Check Function*/
			void ID_CHECK(void)
			{
    3ce2:	2f 92       	push	r2
    3ce4:	3f 92       	push	r3
    3ce6:	df 93       	push	r29
    3ce8:	cf 93       	push	r28
    3cea:	00 d0       	rcall	.+0      	; 0x3cec <ID_CHECK.1347+0xa>
    3cec:	0f 92       	push	r0
    3cee:	cd b7       	in	r28, 0x3d	; 61
    3cf0:	de b7       	in	r29, 0x3e	; 62
    3cf2:	3b 82       	std	Y+3, r3	; 0x03
    3cf4:	2a 82       	std	Y+2, r2	; 0x02
				ID=0;
    3cf6:	ea 81       	ldd	r30, Y+2	; 0x02
    3cf8:	fb 81       	ldd	r31, Y+3	; 0x03
    3cfa:	16 82       	std	Z+6, r1	; 0x06
				HLCD_VoidSendCommand(0x01);
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				HLCD_VoidSetPostion(0,0);
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
				HLCD_VoidSendString("ID:");
    3d0a:	87 e1       	ldi	r24, 0x17	; 23
    3d0c:	91 e0       	ldi	r25, 0x01	; 1
    3d0e:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
				for(u8 i=0;i<=3;i++)
    3d12:	19 82       	std	Y+1, r1	; 0x01
    3d14:	2c c0       	rjmp	.+88     	; 0x3d6e <ID_CHECK.1347+0x8c>
				{
					/*Get ID From User*/
					ID=URT_Recevier();
    3d16:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <URT_Recevier>
    3d1a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d1c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d1e:	86 83       	std	Z+6, r24	; 0x06
					URT_Transmitte(IDTrue[i]);
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	88 2f       	mov	r24, r24
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	88 0f       	add	r24, r24
    3d28:	99 1f       	adc	r25, r25
    3d2a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d2c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d2e:	e8 0f       	add	r30, r24
    3d30:	f9 1f       	adc	r31, r25
    3d32:	80 81       	ld	r24, Z
    3d34:	91 81       	ldd	r25, Z+1	; 0x01
    3d36:	0e 94 bf 12 	call	0x257e	; 0x257e <URT_Transmitte>
					/*Display ID On LCD*/
					HLCD_VoidSendChar(ID);
    3d3a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d3c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d3e:	86 81       	ldd	r24, Z+6	; 0x06
    3d40:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
					/*Store ID In Array*/
					IDTrue[i]=ID;
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	48 2f       	mov	r20, r24
    3d48:	50 e0       	ldi	r21, 0x00	; 0
    3d4a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d4c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d4e:	86 81       	ldd	r24, Z+6	; 0x06
    3d50:	88 2f       	mov	r24, r24
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	9c 01       	movw	r18, r24
    3d56:	ca 01       	movw	r24, r20
    3d58:	88 0f       	add	r24, r24
    3d5a:	99 1f       	adc	r25, r25
    3d5c:	ea 81       	ldd	r30, Y+2	; 0x02
    3d5e:	fb 81       	ldd	r31, Y+3	; 0x03
    3d60:	e8 0f       	add	r30, r24
    3d62:	f9 1f       	adc	r31, r25
    3d64:	31 83       	std	Z+1, r19	; 0x01
    3d66:	20 83       	st	Z, r18
			{
				ID=0;
				HLCD_VoidSendCommand(0x01);
				HLCD_VoidSetPostion(0,0);
				HLCD_VoidSendString("ID:");
				for(u8 i=0;i<=3;i++)
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	8f 5f       	subi	r24, 0xFF	; 255
    3d6c:	89 83       	std	Y+1, r24	; 0x01
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	84 30       	cpi	r24, 0x04	; 4
    3d72:	88 f2       	brcs	.-94     	; 0x3d16 <ID_CHECK.1347+0x34>
					/*Display ID On LCD*/
					HLCD_VoidSendChar(ID);
					/*Store ID In Array*/
					IDTrue[i]=ID;
				}
			}
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	0f 90       	pop	r0
    3d7a:	cf 91       	pop	r28
    3d7c:	df 91       	pop	r29
    3d7e:	3f 90       	pop	r3
    3d80:	2f 90       	pop	r2
    3d82:	08 95       	ret

00003d84 <Pass_Check.1340>:
			u8 ID=0;
			u8 Pass=0;

			/*Password Check */
			void Pass_Check(void)
			{
    3d84:	2f 92       	push	r2
    3d86:	3f 92       	push	r3
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	00 d0       	rcall	.+0      	; 0x3d8e <Pass_Check.1340+0xa>
    3d8e:	0f 92       	push	r0
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62
    3d94:	3b 82       	std	Y+3, r3	; 0x03
    3d96:	2a 82       	std	Y+2, r2	; 0x02
				Pass=0;
    3d98:	ea 81       	ldd	r30, Y+2	; 0x02
    3d9a:	fb 81       	ldd	r31, Y+3	; 0x03
    3d9c:	15 86       	std	Z+13, r1	; 0x0d

				HLCD_VoidSendCommand(0x01);
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	0e 94 d6 07 	call	0xfac	; 0xfac <HLCD_VoidSendCommand>
				HLCD_VoidSetPostion(0,0);
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	60 e0       	ldi	r22, 0x00	; 0
    3da8:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <HLCD_VoidSetPostion>
				HLCD_VoidSendString("Password:");
    3dac:	8b e1       	ldi	r24, 0x1B	; 27
    3dae:	91 e0       	ldi	r25, 0x01	; 1
    3db0:	0e 94 30 0c 	call	0x1860	; 0x1860 <HLCD_VoidSendString>
				for(u8 i=0;i<=3;i++)
    3db4:	19 82       	std	Y+1, r1	; 0x01
    3db6:	2e c0       	rjmp	.+92     	; 0x3e14 <Pass_Check.1340+0x90>
				{
					/*Get Password From User*/
					Pass=URT_Recevier();
    3db8:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <URT_Recevier>
    3dbc:	ea 81       	ldd	r30, Y+2	; 0x02
    3dbe:	fb 81       	ldd	r31, Y+3	; 0x03
    3dc0:	85 87       	std	Z+13, r24	; 0x0d
					URT_Transmitte(PassTrue[i]);
    3dc2:	89 81       	ldd	r24, Y+1	; 0x01
    3dc4:	88 2f       	mov	r24, r24
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	88 0f       	add	r24, r24
    3dca:	99 1f       	adc	r25, r25
    3dcc:	2a 81       	ldd	r18, Y+2	; 0x02
    3dce:	3b 81       	ldd	r19, Y+3	; 0x03
    3dd0:	82 0f       	add	r24, r18
    3dd2:	93 1f       	adc	r25, r19
    3dd4:	fc 01       	movw	r30, r24
    3dd6:	37 96       	adiw	r30, 0x07	; 7
    3dd8:	80 81       	ld	r24, Z
    3dda:	91 81       	ldd	r25, Z+1	; 0x01
    3ddc:	0e 94 bf 12 	call	0x257e	; 0x257e <URT_Transmitte>
					/*Display Password On LCD*/
					HLCD_VoidSendChar('*');
    3de0:	8a e2       	ldi	r24, 0x2A	; 42
    3de2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <HLCD_VoidSendChar>
					/*Store Password In Array*/
					PassTrue[i]=Pass;
    3de6:	89 81       	ldd	r24, Y+1	; 0x01
    3de8:	28 2f       	mov	r18, r24
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	ea 81       	ldd	r30, Y+2	; 0x02
    3dee:	fb 81       	ldd	r31, Y+3	; 0x03
    3df0:	85 85       	ldd	r24, Z+13	; 0x0d
    3df2:	88 2f       	mov	r24, r24
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	ac 01       	movw	r20, r24
    3df8:	c9 01       	movw	r24, r18
    3dfa:	88 0f       	add	r24, r24
    3dfc:	99 1f       	adc	r25, r25
    3dfe:	2a 81       	ldd	r18, Y+2	; 0x02
    3e00:	3b 81       	ldd	r19, Y+3	; 0x03
    3e02:	82 0f       	add	r24, r18
    3e04:	93 1f       	adc	r25, r19
    3e06:	fc 01       	movw	r30, r24
    3e08:	37 96       	adiw	r30, 0x07	; 7
    3e0a:	51 83       	std	Z+1, r21	; 0x01
    3e0c:	40 83       	st	Z, r20
				Pass=0;

				HLCD_VoidSendCommand(0x01);
				HLCD_VoidSetPostion(0,0);
				HLCD_VoidSendString("Password:");
				for(u8 i=0;i<=3;i++)
    3e0e:	89 81       	ldd	r24, Y+1	; 0x01
    3e10:	8f 5f       	subi	r24, 0xFF	; 255
    3e12:	89 83       	std	Y+1, r24	; 0x01
    3e14:	89 81       	ldd	r24, Y+1	; 0x01
    3e16:	84 30       	cpi	r24, 0x04	; 4
    3e18:	78 f2       	brcs	.-98     	; 0x3db8 <Pass_Check.1340+0x34>
					/*Display Password On LCD*/
					HLCD_VoidSendChar('*');
					/*Store Password In Array*/
					PassTrue[i]=Pass;
				}
			}
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	3f 90       	pop	r3
    3e26:	2f 90       	pop	r2
    3e28:	08 95       	ret

00003e2a <__mulsi3>:
    3e2a:	62 9f       	mul	r22, r18
    3e2c:	d0 01       	movw	r26, r0
    3e2e:	73 9f       	mul	r23, r19
    3e30:	f0 01       	movw	r30, r0
    3e32:	82 9f       	mul	r24, r18
    3e34:	e0 0d       	add	r30, r0
    3e36:	f1 1d       	adc	r31, r1
    3e38:	64 9f       	mul	r22, r20
    3e3a:	e0 0d       	add	r30, r0
    3e3c:	f1 1d       	adc	r31, r1
    3e3e:	92 9f       	mul	r25, r18
    3e40:	f0 0d       	add	r31, r0
    3e42:	83 9f       	mul	r24, r19
    3e44:	f0 0d       	add	r31, r0
    3e46:	74 9f       	mul	r23, r20
    3e48:	f0 0d       	add	r31, r0
    3e4a:	65 9f       	mul	r22, r21
    3e4c:	f0 0d       	add	r31, r0
    3e4e:	99 27       	eor	r25, r25
    3e50:	72 9f       	mul	r23, r18
    3e52:	b0 0d       	add	r27, r0
    3e54:	e1 1d       	adc	r30, r1
    3e56:	f9 1f       	adc	r31, r25
    3e58:	63 9f       	mul	r22, r19
    3e5a:	b0 0d       	add	r27, r0
    3e5c:	e1 1d       	adc	r30, r1
    3e5e:	f9 1f       	adc	r31, r25
    3e60:	bd 01       	movw	r22, r26
    3e62:	cf 01       	movw	r24, r30
    3e64:	11 24       	eor	r1, r1
    3e66:	08 95       	ret

00003e68 <__udivmodhi4>:
    3e68:	aa 1b       	sub	r26, r26
    3e6a:	bb 1b       	sub	r27, r27
    3e6c:	51 e1       	ldi	r21, 0x11	; 17
    3e6e:	07 c0       	rjmp	.+14     	; 0x3e7e <__udivmodhi4_ep>

00003e70 <__udivmodhi4_loop>:
    3e70:	aa 1f       	adc	r26, r26
    3e72:	bb 1f       	adc	r27, r27
    3e74:	a6 17       	cp	r26, r22
    3e76:	b7 07       	cpc	r27, r23
    3e78:	10 f0       	brcs	.+4      	; 0x3e7e <__udivmodhi4_ep>
    3e7a:	a6 1b       	sub	r26, r22
    3e7c:	b7 0b       	sbc	r27, r23

00003e7e <__udivmodhi4_ep>:
    3e7e:	88 1f       	adc	r24, r24
    3e80:	99 1f       	adc	r25, r25
    3e82:	5a 95       	dec	r21
    3e84:	a9 f7       	brne	.-22     	; 0x3e70 <__udivmodhi4_loop>
    3e86:	80 95       	com	r24
    3e88:	90 95       	com	r25
    3e8a:	bc 01       	movw	r22, r24
    3e8c:	cd 01       	movw	r24, r26
    3e8e:	08 95       	ret

00003e90 <__udivmodsi4>:
    3e90:	a1 e2       	ldi	r26, 0x21	; 33
    3e92:	1a 2e       	mov	r1, r26
    3e94:	aa 1b       	sub	r26, r26
    3e96:	bb 1b       	sub	r27, r27
    3e98:	fd 01       	movw	r30, r26
    3e9a:	0d c0       	rjmp	.+26     	; 0x3eb6 <__udivmodsi4_ep>

00003e9c <__udivmodsi4_loop>:
    3e9c:	aa 1f       	adc	r26, r26
    3e9e:	bb 1f       	adc	r27, r27
    3ea0:	ee 1f       	adc	r30, r30
    3ea2:	ff 1f       	adc	r31, r31
    3ea4:	a2 17       	cp	r26, r18
    3ea6:	b3 07       	cpc	r27, r19
    3ea8:	e4 07       	cpc	r30, r20
    3eaa:	f5 07       	cpc	r31, r21
    3eac:	20 f0       	brcs	.+8      	; 0x3eb6 <__udivmodsi4_ep>
    3eae:	a2 1b       	sub	r26, r18
    3eb0:	b3 0b       	sbc	r27, r19
    3eb2:	e4 0b       	sbc	r30, r20
    3eb4:	f5 0b       	sbc	r31, r21

00003eb6 <__udivmodsi4_ep>:
    3eb6:	66 1f       	adc	r22, r22
    3eb8:	77 1f       	adc	r23, r23
    3eba:	88 1f       	adc	r24, r24
    3ebc:	99 1f       	adc	r25, r25
    3ebe:	1a 94       	dec	r1
    3ec0:	69 f7       	brne	.-38     	; 0x3e9c <__udivmodsi4_loop>
    3ec2:	60 95       	com	r22
    3ec4:	70 95       	com	r23
    3ec6:	80 95       	com	r24
    3ec8:	90 95       	com	r25
    3eca:	9b 01       	movw	r18, r22
    3ecc:	ac 01       	movw	r20, r24
    3ece:	bd 01       	movw	r22, r26
    3ed0:	cf 01       	movw	r24, r30
    3ed2:	08 95       	ret

00003ed4 <__prologue_saves__>:
    3ed4:	2f 92       	push	r2
    3ed6:	3f 92       	push	r3
    3ed8:	4f 92       	push	r4
    3eda:	5f 92       	push	r5
    3edc:	6f 92       	push	r6
    3ede:	7f 92       	push	r7
    3ee0:	8f 92       	push	r8
    3ee2:	9f 92       	push	r9
    3ee4:	af 92       	push	r10
    3ee6:	bf 92       	push	r11
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	ca 1b       	sub	r28, r26
    3efe:	db 0b       	sbc	r29, r27
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	09 94       	ijmp

00003f0c <__epilogue_restores__>:
    3f0c:	2a 88       	ldd	r2, Y+18	; 0x12
    3f0e:	39 88       	ldd	r3, Y+17	; 0x11
    3f10:	48 88       	ldd	r4, Y+16	; 0x10
    3f12:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f14:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f16:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f18:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f1e:	b9 84       	ldd	r11, Y+9	; 0x09
    3f20:	c8 84       	ldd	r12, Y+8	; 0x08
    3f22:	df 80       	ldd	r13, Y+7	; 0x07
    3f24:	ee 80       	ldd	r14, Y+6	; 0x06
    3f26:	fd 80       	ldd	r15, Y+5	; 0x05
    3f28:	0c 81       	ldd	r16, Y+4	; 0x04
    3f2a:	1b 81       	ldd	r17, Y+3	; 0x03
    3f2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3f2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3f30:	ce 0f       	add	r28, r30
    3f32:	d1 1d       	adc	r29, r1
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	ed 01       	movw	r28, r26
    3f40:	08 95       	ret

00003f42 <_exit>:
    3f42:	f8 94       	cli

00003f44 <__stop_program>:
    3f44:	ff cf       	rjmp	.-2      	; 0x3f44 <__stop_program>
